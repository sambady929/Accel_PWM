
spi_inittest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000409c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08004224  08004224  00014224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004260  08004260  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004260  08004260  00014260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004268  08004268  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004268  08004268  00014268  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800426c  0800426c  0001426c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004270  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  20000010  08004280  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000108  08004280  00020108  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d259  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001af5  00000000  00000000  0002d299  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000db0  00000000  00000000  0002ed90  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000cd8  00000000  00000000  0002fb40  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002119e  00000000  00000000  00030818  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000096dc  00000000  00000000  000519b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cba20  00000000  00000000  0005b092  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00126ab2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a4c  00000000  00000000  00126b30  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800420c 	.word	0x0800420c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	0800420c 	.word	0x0800420c

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <main>:
void LIS_Write(uint8_t reg, uint8_t data);

int timeout = 5000;

int main(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	f5ad 7d1e 	sub.w	sp, sp, #632	; 0x278
 80004de:	af00      	add	r7, sp, #0

  HAL_Init();
 80004e0:	f000 ff08 	bl	80012f4 <HAL_Init>
  SystemClock_Config();
 80004e4:	f000 fbdc 	bl	8000ca0 <SystemClock_Config>

  MX_GPIO_Init();
 80004e8:	f000 fd14 	bl	8000f14 <MX_GPIO_Init>
  MX_SPI1_Init();
 80004ec:	f000 fc42 	bl	8000d74 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80004f0:	f000 fc76 	bl	8000de0 <MX_USART1_UART_Init>
  MX_TIM_Init();
 80004f4:	f000 fc9e 	bl	8000e34 <MX_TIM_Init>

  int16_t x[100] = {0};
 80004f8:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 80004fc:	22c8      	movs	r2, #200	; 0xc8
 80004fe:	2100      	movs	r1, #0
 8000500:	4618      	mov	r0, r3
 8000502:	f003 fe6b 	bl	80041dc <memset>
  int16_t y[100] = {0};
 8000506:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800050a:	4618      	mov	r0, r3
 800050c:	23c8      	movs	r3, #200	; 0xc8
 800050e:	461a      	mov	r2, r3
 8000510:	2100      	movs	r1, #0
 8000512:	f003 fe63 	bl	80041dc <memset>
  int16_t z[100] = {0};
 8000516:	f107 031c 	add.w	r3, r7, #28
 800051a:	4618      	mov	r0, r3
 800051c:	23c8      	movs	r3, #200	; 0xc8
 800051e:	461a      	mov	r2, r3
 8000520:	2100      	movs	r1, #0
 8000522:	f003 fe5b 	bl	80041dc <memset>

  TIM_OC_InitTypeDef PWM_OC_Config = {0};
 8000526:	463b      	mov	r3, r7
 8000528:	461a      	mov	r2, r3
 800052a:	2300      	movs	r3, #0
 800052c:	6013      	str	r3, [r2, #0]
 800052e:	6053      	str	r3, [r2, #4]
 8000530:	6093      	str	r3, [r2, #8]
 8000532:	60d3      	str	r3, [r2, #12]
 8000534:	6113      	str	r3, [r2, #16]
 8000536:	6153      	str	r3, [r2, #20]
 8000538:	6193      	str	r3, [r2, #24]

  Accel_Init();
 800053a:	f000 f8f9 	bl	8000730 <Accel_Init>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800053e:	2100      	movs	r1, #0
 8000540:	4827      	ldr	r0, [pc, #156]	; (80005e0 <main+0x108>)
 8000542:	f002 f9f3 	bl	800292c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000546:	2104      	movs	r1, #4
 8000548:	4825      	ldr	r0, [pc, #148]	; (80005e0 <main+0x108>)
 800054a:	f002 f9ef 	bl	800292c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800054e:	2108      	movs	r1, #8
 8000550:	4823      	ldr	r0, [pc, #140]	; (80005e0 <main+0x108>)
 8000552:	f002 f9eb 	bl	800292c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000556:	210c      	movs	r1, #12
 8000558:	4821      	ldr	r0, [pc, #132]	; (80005e0 <main+0x108>)
 800055a:	f002 f9e7 	bl	800292c <HAL_TIM_PWM_Start>

  PWM_OC_Config.OCMode = TIM_OCMODE_PWM1;
 800055e:	463b      	mov	r3, r7
 8000560:	2260      	movs	r2, #96	; 0x60
 8000562:	601a      	str	r2, [r3, #0]
  PWM_OC_Config.Pulse = 500;
 8000564:	463b      	mov	r3, r7
 8000566:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800056a:	605a      	str	r2, [r3, #4]
  PWM_OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 800056c:	463b      	mov	r3, r7
 800056e:	2200      	movs	r2, #0
 8000570:	609a      	str	r2, [r3, #8]
  PWM_OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8000572:	463b      	mov	r3, r7
 8000574:	2200      	movs	r2, #0
 8000576:	611a      	str	r2, [r3, #16]

  int y_neg = 0;
 8000578:	2300      	movs	r3, #0
 800057a:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274

  while(1){

	  Accel_Get(&x[0], &y[0], &z[0]);
 800057e:	f107 021c 	add.w	r2, r7, #28
 8000582:	f107 01e4 	add.w	r1, r7, #228	; 0xe4
 8000586:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 800058a:	4618      	mov	r0, r3
 800058c:	f000 f994 	bl	80008b8 <Accel_Get>
	  HAL_Delay(500);
 8000590:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000594:	f000 ff20 	bl	80013d8 <HAL_Delay>

	  Print_XYZ(x[0], y[0], z[0]);
 8000598:	f9b7 01ac 	ldrsh.w	r0, [r7, #428]	; 0x1ac
 800059c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80005a0:	f9b3 1000 	ldrsh.w	r1, [r3]
 80005a4:	f107 031c 	add.w	r3, r7, #28
 80005a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80005ac:	461a      	mov	r2, r3
 80005ae:	f000 f819 	bl	80005e4 <Print_XYZ>

	  y_neg = y[0]/16;
 80005b2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80005b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	da00      	bge.n	80005c0 <main+0xe8>
 80005be:	330f      	adds	r3, #15
 80005c0:	111b      	asrs	r3, r3, #4
 80005c2:	b21b      	sxth	r3, r3
 80005c4:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
	  PWM_OC_Config.Pulse = y_neg;
 80005c8:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 80005cc:	463b      	mov	r3, r7
 80005ce:	605a      	str	r2, [r3, #4]
	  HAL_TIM_PWM_ConfigChannel(&htim1, &PWM_OC_Config, TIM_CHANNEL_1);
 80005d0:	463b      	mov	r3, r7
 80005d2:	2200      	movs	r2, #0
 80005d4:	4619      	mov	r1, r3
 80005d6:	4802      	ldr	r0, [pc, #8]	; (80005e0 <main+0x108>)
 80005d8:	f002 f9e6 	bl	80029a8 <HAL_TIM_PWM_ConfigChannel>
	  Accel_Get(&x[0], &y[0], &z[0]);
 80005dc:	e7cf      	b.n	800057e <main+0xa6>
 80005de:	bf00      	nop
 80005e0:	2000006c 	.word	0x2000006c

080005e4 <Print_XYZ>:
	  }*/
  }

}

void Print_XYZ(int16_t x, int16_t y, int16_t z) {
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b0a2      	sub	sp, #136	; 0x88
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	4603      	mov	r3, r0
 80005ec:	80fb      	strh	r3, [r7, #6]
 80005ee:	460b      	mov	r3, r1
 80005f0:	80bb      	strh	r3, [r7, #4]
 80005f2:	4613      	mov	r3, r2
 80005f4:	807b      	strh	r3, [r7, #2]

	char printout[100];

	char x_accel[]="000000";
 80005f6:	4a48      	ldr	r2, [pc, #288]	; (8000718 <Print_XYZ+0x134>)
 80005f8:	f107 031c 	add.w	r3, r7, #28
 80005fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000600:	6018      	str	r0, [r3, #0]
 8000602:	3304      	adds	r3, #4
 8000604:	8019      	strh	r1, [r3, #0]
 8000606:	3302      	adds	r3, #2
 8000608:	0c0a      	lsrs	r2, r1, #16
 800060a:	701a      	strb	r2, [r3, #0]
	char y_accel[]="000000";
 800060c:	4a42      	ldr	r2, [pc, #264]	; (8000718 <Print_XYZ+0x134>)
 800060e:	f107 0314 	add.w	r3, r7, #20
 8000612:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000616:	6018      	str	r0, [r3, #0]
 8000618:	3304      	adds	r3, #4
 800061a:	8019      	strh	r1, [r3, #0]
 800061c:	3302      	adds	r3, #2
 800061e:	0c0a      	lsrs	r2, r1, #16
 8000620:	701a      	strb	r2, [r3, #0]
	char z_accel[]="000000";
 8000622:	4a3d      	ldr	r2, [pc, #244]	; (8000718 <Print_XYZ+0x134>)
 8000624:	f107 030c 	add.w	r3, r7, #12
 8000628:	e892 0003 	ldmia.w	r2, {r0, r1}
 800062c:	6018      	str	r0, [r3, #0]
 800062e:	3304      	adds	r3, #4
 8000630:	8019      	strh	r1, [r3, #0]
 8000632:	3302      	adds	r3, #2
 8000634:	0c0a      	lsrs	r2, r1, #16
 8000636:	701a      	strb	r2, [r3, #0]

	int162string(x, x_accel);
 8000638:	f107 021c 	add.w	r2, r7, #28
 800063c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000640:	4611      	mov	r1, r2
 8000642:	4618      	mov	r0, r3
 8000644:	f000 fa9e 	bl	8000b84 <int162string>
	int162string(y, y_accel);
 8000648:	f107 0214 	add.w	r2, r7, #20
 800064c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000650:	4611      	mov	r1, r2
 8000652:	4618      	mov	r0, r3
 8000654:	f000 fa96 	bl	8000b84 <int162string>
	int162string(z, z_accel);
 8000658:	f107 020c 	add.w	r2, r7, #12
 800065c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000660:	4611      	mov	r1, r2
 8000662:	4618      	mov	r0, r3
 8000664:	f000 fa8e 	bl	8000b84 <int162string>

	strcat(printout, "\r\nData: X=");
 8000668:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800066c:	4618      	mov	r0, r3
 800066e:	f7ff fdab 	bl	80001c8 <strlen>
 8000672:	4603      	mov	r3, r0
 8000674:	461a      	mov	r2, r3
 8000676:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800067a:	4413      	add	r3, r2
 800067c:	4927      	ldr	r1, [pc, #156]	; (800071c <Print_XYZ+0x138>)
 800067e:	461a      	mov	r2, r3
 8000680:	460b      	mov	r3, r1
 8000682:	cb03      	ldmia	r3!, {r0, r1}
 8000684:	6010      	str	r0, [r2, #0]
 8000686:	6051      	str	r1, [r2, #4]
 8000688:	8819      	ldrh	r1, [r3, #0]
 800068a:	789b      	ldrb	r3, [r3, #2]
 800068c:	8111      	strh	r1, [r2, #8]
 800068e:	7293      	strb	r3, [r2, #10]
	strcat(printout, x_accel);
 8000690:	f107 021c 	add.w	r2, r7, #28
 8000694:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000698:	4611      	mov	r1, r2
 800069a:	4618      	mov	r0, r3
 800069c:	f003 fda6 	bl	80041ec <strcat>
	strcat(printout, " Y=");
 80006a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006a4:	4618      	mov	r0, r3
 80006a6:	f7ff fd8f 	bl	80001c8 <strlen>
 80006aa:	4603      	mov	r3, r0
 80006ac:	461a      	mov	r2, r3
 80006ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006b2:	4413      	add	r3, r2
 80006b4:	4a1a      	ldr	r2, [pc, #104]	; (8000720 <Print_XYZ+0x13c>)
 80006b6:	6810      	ldr	r0, [r2, #0]
 80006b8:	6018      	str	r0, [r3, #0]
	strcat(printout, y_accel);
 80006ba:	f107 0214 	add.w	r2, r7, #20
 80006be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006c2:	4611      	mov	r1, r2
 80006c4:	4618      	mov	r0, r3
 80006c6:	f003 fd91 	bl	80041ec <strcat>
	strcat(printout, " Z=");
 80006ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006ce:	4618      	mov	r0, r3
 80006d0:	f7ff fd7a 	bl	80001c8 <strlen>
 80006d4:	4603      	mov	r3, r0
 80006d6:	461a      	mov	r2, r3
 80006d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006dc:	4413      	add	r3, r2
 80006de:	4a11      	ldr	r2, [pc, #68]	; (8000724 <Print_XYZ+0x140>)
 80006e0:	6810      	ldr	r0, [r2, #0]
 80006e2:	6018      	str	r0, [r3, #0]
	strcat(printout, z_accel);
 80006e4:	f107 020c 	add.w	r2, r7, #12
 80006e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006ec:	4611      	mov	r1, r2
 80006ee:	4618      	mov	r0, r3
 80006f0:	f003 fd7c 	bl	80041ec <strcat>

	HAL_UART_Transmit(&huart1, printout, strlen(printout), timeout);
 80006f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006f8:	4618      	mov	r0, r3
 80006fa:	f7ff fd65 	bl	80001c8 <strlen>
 80006fe:	4603      	mov	r3, r0
 8000700:	b29a      	uxth	r2, r3
 8000702:	4b09      	ldr	r3, [pc, #36]	; (8000728 <Print_XYZ+0x144>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800070a:	4808      	ldr	r0, [pc, #32]	; (800072c <Print_XYZ+0x148>)
 800070c:	f002 fea3 	bl	8003456 <HAL_UART_Transmit>


	return;
 8000710:	bf00      	nop
}
 8000712:	3788      	adds	r7, #136	; 0x88
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	08004238 	.word	0x08004238
 800071c:	08004224 	.word	0x08004224
 8000720:	08004230 	.word	0x08004230
 8000724:	08004234 	.word	0x08004234
 8000728:	20000000 	.word	0x20000000
 800072c:	2000002c 	.word	0x2000002c

08000730 <Accel_Init>:

void Accel_Init() {
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0

	uint8_t id_reg = (WHO_AM_I);
 8000736:	230f      	movs	r3, #15
 8000738:	71fb      	strb	r3, [r7, #7]
	uint8_t response = 0;
 800073a:	2300      	movs	r3, #0
 800073c:	70bb      	strb	r3, [r7, #2]

	uint8_t ctrl4_w = (CTRL_REG4);
 800073e:	2320      	movs	r3, #32
 8000740:	71bb      	strb	r3, [r7, #6]
	uint8_t ctrl4_set = (0x77); //400Hz sample
 8000742:	2377      	movs	r3, #119	; 0x77
 8000744:	717b      	strb	r3, [r7, #5]

	uint8_t ctrl6_w = (CTRL_REG6);
 8000746:	2325      	movs	r3, #37	; 0x25
 8000748:	713b      	strb	r3, [r7, #4]
	uint8_t ctrl6_set = (0x50);
 800074a:	2350      	movs	r3, #80	; 0x50
 800074c:	70fb      	strb	r3, [r7, #3]

	LIS_Read(id_reg, &response);
 800074e:	1cba      	adds	r2, r7, #2
 8000750:	79fb      	ldrb	r3, [r7, #7]
 8000752:	4611      	mov	r1, r2
 8000754:	4618      	mov	r0, r3
 8000756:	f000 f915 	bl	8000984 <LIS_Read>
	LIS_Read(id_reg, &response);
 800075a:	1cba      	adds	r2, r7, #2
 800075c:	79fb      	ldrb	r3, [r7, #7]
 800075e:	4611      	mov	r1, r2
 8000760:	4618      	mov	r0, r3
 8000762:	f000 f90f 	bl	8000984 <LIS_Read>

	LIS_Write(ctrl4_w, ctrl4_set);
 8000766:	797a      	ldrb	r2, [r7, #5]
 8000768:	79bb      	ldrb	r3, [r7, #6]
 800076a:	4611      	mov	r1, r2
 800076c:	4618      	mov	r0, r3
 800076e:	f000 f93d 	bl	80009ec <LIS_Write>
	LIS_Write(ctrl6_w, ctrl6_set);
 8000772:	78fa      	ldrb	r2, [r7, #3]
 8000774:	793b      	ldrb	r3, [r7, #4]
 8000776:	4611      	mov	r1, r2
 8000778:	4618      	mov	r0, r3
 800077a:	f000 f937 	bl	80009ec <LIS_Write>

	Accel_Offset_Cal();
 800077e:	f000 f805 	bl	800078c <Accel_Offset_Cal>

	return;
 8000782:	bf00      	nop

}
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
	...

0800078c <Accel_Offset_Cal>:

void Accel_Offset_Cal() {
 800078c:	b580      	push	{r7, lr}
 800078e:	b088      	sub	sp, #32
 8000790:	af00      	add	r7, sp, #0

	int16_t x_off[] = {0};
 8000792:	2300      	movs	r3, #0
 8000794:	813b      	strh	r3, [r7, #8]
	int16_t y_off[] = {0};
 8000796:	2300      	movs	r3, #0
 8000798:	80bb      	strh	r3, [r7, #4]
	int16_t z_off[] = {0};
 800079a:	2300      	movs	r3, #0
 800079c:	803b      	strh	r3, [r7, #0]

	uint8_t x_off_reg = (OFF_X);
 800079e:	2310      	movs	r3, #16
 80007a0:	74fb      	strb	r3, [r7, #19]
	uint8_t y_off_reg = (OFF_Y);
 80007a2:	2311      	movs	r3, #17
 80007a4:	74bb      	strb	r3, [r7, #18]
	uint8_t z_off_reg = (OFF_Z);
 80007a6:	2312      	movs	r3, #18
 80007a8:	747b      	strb	r3, [r7, #17]

	int16_t x_off_sum=0;
 80007aa:	2300      	movs	r3, #0
 80007ac:	83fb      	strh	r3, [r7, #30]
	int16_t y_off_sum=0;
 80007ae:	2300      	movs	r3, #0
 80007b0:	83bb      	strh	r3, [r7, #28]
	int16_t z_off_sum=0;
 80007b2:	2300      	movs	r3, #0
 80007b4:	837b      	strh	r3, [r7, #26]

	//zero the offset calibration
	int8_t clear = (0x00);
 80007b6:	2300      	movs	r3, #0
 80007b8:	743b      	strb	r3, [r7, #16]
	LIS_Write(x_off_reg, clear);
 80007ba:	7c3a      	ldrb	r2, [r7, #16]
 80007bc:	7cfb      	ldrb	r3, [r7, #19]
 80007be:	4611      	mov	r1, r2
 80007c0:	4618      	mov	r0, r3
 80007c2:	f000 f913 	bl	80009ec <LIS_Write>
	LIS_Write(y_off_reg, clear);
 80007c6:	7c3a      	ldrb	r2, [r7, #16]
 80007c8:	7cbb      	ldrb	r3, [r7, #18]
 80007ca:	4611      	mov	r1, r2
 80007cc:	4618      	mov	r0, r3
 80007ce:	f000 f90d 	bl	80009ec <LIS_Write>
	LIS_Write(z_off_reg, clear);
 80007d2:	7c3a      	ldrb	r2, [r7, #16]
 80007d4:	7c7b      	ldrb	r3, [r7, #17]
 80007d6:	4611      	mov	r1, r2
 80007d8:	4618      	mov	r0, r3
 80007da:	f000 f907 	bl	80009ec <LIS_Write>

	//take average of 10 readings
	int i=0;
 80007de:	2300      	movs	r3, #0
 80007e0:	617b      	str	r3, [r7, #20]
	while (i < 10) {
 80007e2:	e033      	b.n	800084c <Accel_Offset_Cal+0xc0>
		Accel_Get(&x_off[0], &y_off[0], &z_off[0]);
 80007e4:	463a      	mov	r2, r7
 80007e6:	1d39      	adds	r1, r7, #4
 80007e8:	f107 0308 	add.w	r3, r7, #8
 80007ec:	4618      	mov	r0, r3
 80007ee:	f000 f863 	bl	80008b8 <Accel_Get>
		x_off_sum += x_off[0]/10;
 80007f2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80007f6:	4a2f      	ldr	r2, [pc, #188]	; (80008b4 <Accel_Offset_Cal+0x128>)
 80007f8:	fb82 1203 	smull	r1, r2, r2, r3
 80007fc:	1092      	asrs	r2, r2, #2
 80007fe:	17db      	asrs	r3, r3, #31
 8000800:	1ad3      	subs	r3, r2, r3
 8000802:	b21b      	sxth	r3, r3
 8000804:	b29a      	uxth	r2, r3
 8000806:	8bfb      	ldrh	r3, [r7, #30]
 8000808:	4413      	add	r3, r2
 800080a:	b29b      	uxth	r3, r3
 800080c:	83fb      	strh	r3, [r7, #30]
		y_off_sum += y_off[0]/10;
 800080e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000812:	4a28      	ldr	r2, [pc, #160]	; (80008b4 <Accel_Offset_Cal+0x128>)
 8000814:	fb82 1203 	smull	r1, r2, r2, r3
 8000818:	1092      	asrs	r2, r2, #2
 800081a:	17db      	asrs	r3, r3, #31
 800081c:	1ad3      	subs	r3, r2, r3
 800081e:	b21b      	sxth	r3, r3
 8000820:	b29a      	uxth	r2, r3
 8000822:	8bbb      	ldrh	r3, [r7, #28]
 8000824:	4413      	add	r3, r2
 8000826:	b29b      	uxth	r3, r3
 8000828:	83bb      	strh	r3, [r7, #28]
		z_off_sum += z_off[0]/10;
 800082a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800082e:	4a21      	ldr	r2, [pc, #132]	; (80008b4 <Accel_Offset_Cal+0x128>)
 8000830:	fb82 1203 	smull	r1, r2, r2, r3
 8000834:	1092      	asrs	r2, r2, #2
 8000836:	17db      	asrs	r3, r3, #31
 8000838:	1ad3      	subs	r3, r2, r3
 800083a:	b21b      	sxth	r3, r3
 800083c:	b29a      	uxth	r2, r3
 800083e:	8b7b      	ldrh	r3, [r7, #26]
 8000840:	4413      	add	r3, r2
 8000842:	b29b      	uxth	r3, r3
 8000844:	837b      	strh	r3, [r7, #26]
		i++;
 8000846:	697b      	ldr	r3, [r7, #20]
 8000848:	3301      	adds	r3, #1
 800084a:	617b      	str	r3, [r7, #20]
	while (i < 10) {
 800084c:	697b      	ldr	r3, [r7, #20]
 800084e:	2b09      	cmp	r3, #9
 8000850:	ddc8      	ble.n	80007e4 <Accel_Offset_Cal+0x58>
	}

	//Offset register gets multiplied by 32 before being subtracted from accel ADC value
	//Z axis starts off at 1g, which is 16383
	int8_t x_cal = x_off_sum/32;
 8000852:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000856:	2b00      	cmp	r3, #0
 8000858:	da00      	bge.n	800085c <Accel_Offset_Cal+0xd0>
 800085a:	331f      	adds	r3, #31
 800085c:	115b      	asrs	r3, r3, #5
 800085e:	b21b      	sxth	r3, r3
 8000860:	73fb      	strb	r3, [r7, #15]
	int8_t y_cal = y_off_sum/32;
 8000862:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000866:	2b00      	cmp	r3, #0
 8000868:	da00      	bge.n	800086c <Accel_Offset_Cal+0xe0>
 800086a:	331f      	adds	r3, #31
 800086c:	115b      	asrs	r3, r3, #5
 800086e:	b21b      	sxth	r3, r3
 8000870:	73bb      	strb	r3, [r7, #14]
	int8_t z_cal = (z_off_sum-16383)/32;
 8000872:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000876:	f5a3 537f 	sub.w	r3, r3, #16320	; 0x3fc0
 800087a:	3b3f      	subs	r3, #63	; 0x3f
 800087c:	2b00      	cmp	r3, #0
 800087e:	da00      	bge.n	8000882 <Accel_Offset_Cal+0xf6>
 8000880:	331f      	adds	r3, #31
 8000882:	115b      	asrs	r3, r3, #5
 8000884:	737b      	strb	r3, [r7, #13]

	LIS_Write(x_off_reg, x_cal);
 8000886:	7bfa      	ldrb	r2, [r7, #15]
 8000888:	7cfb      	ldrb	r3, [r7, #19]
 800088a:	4611      	mov	r1, r2
 800088c:	4618      	mov	r0, r3
 800088e:	f000 f8ad 	bl	80009ec <LIS_Write>
	LIS_Write(y_off_reg, y_cal);
 8000892:	7bba      	ldrb	r2, [r7, #14]
 8000894:	7cbb      	ldrb	r3, [r7, #18]
 8000896:	4611      	mov	r1, r2
 8000898:	4618      	mov	r0, r3
 800089a:	f000 f8a7 	bl	80009ec <LIS_Write>
	LIS_Write(z_off_reg, z_cal);
 800089e:	7b7a      	ldrb	r2, [r7, #13]
 80008a0:	7c7b      	ldrb	r3, [r7, #17]
 80008a2:	4611      	mov	r1, r2
 80008a4:	4618      	mov	r0, r3
 80008a6:	f000 f8a1 	bl	80009ec <LIS_Write>

	return;
 80008aa:	bf00      	nop

}
 80008ac:	3720      	adds	r7, #32
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	66666667 	.word	0x66666667

080008b8 <Accel_Get>:

void Accel_Get(int16_t *x, int16_t *y, int16_t *z) {
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b088      	sub	sp, #32
 80008bc:	af00      	add	r7, sp, #0
 80008be:	60f8      	str	r0, [r7, #12]
 80008c0:	60b9      	str	r1, [r7, #8]
 80008c2:	607a      	str	r2, [r7, #4]

	uint8_t output[] = {0, 0, 0, 0, 0, 0};
 80008c4:	f107 0314 	add.w	r3, r7, #20
 80008c8:	2200      	movs	r2, #0
 80008ca:	601a      	str	r2, [r3, #0]
 80008cc:	809a      	strh	r2, [r3, #4]

	uint8_t x_low = (OUT_X_LOW);
 80008ce:	2328      	movs	r3, #40	; 0x28
 80008d0:	77fb      	strb	r3, [r7, #31]
	uint8_t x_high = (OUT_X_HIGH);
 80008d2:	2329      	movs	r3, #41	; 0x29
 80008d4:	77bb      	strb	r3, [r7, #30]
	uint8_t y_low = (OUT_Y_LOW);
 80008d6:	232a      	movs	r3, #42	; 0x2a
 80008d8:	777b      	strb	r3, [r7, #29]
	uint8_t y_high = (OUT_Y_HIGH);
 80008da:	232b      	movs	r3, #43	; 0x2b
 80008dc:	773b      	strb	r3, [r7, #28]
	uint8_t z_low = (OUT_Z_LOW);
 80008de:	232c      	movs	r3, #44	; 0x2c
 80008e0:	76fb      	strb	r3, [r7, #27]
	uint8_t z_high = (OUT_Z_HIGH);
 80008e2:	232d      	movs	r3, #45	; 0x2d
 80008e4:	76bb      	strb	r3, [r7, #26]

	LIS_Read(x_low, &output[0]);
 80008e6:	f107 0214 	add.w	r2, r7, #20
 80008ea:	7ffb      	ldrb	r3, [r7, #31]
 80008ec:	4611      	mov	r1, r2
 80008ee:	4618      	mov	r0, r3
 80008f0:	f000 f848 	bl	8000984 <LIS_Read>
	LIS_Read(x_high, &output[1]);
 80008f4:	f107 0314 	add.w	r3, r7, #20
 80008f8:	1c5a      	adds	r2, r3, #1
 80008fa:	7fbb      	ldrb	r3, [r7, #30]
 80008fc:	4611      	mov	r1, r2
 80008fe:	4618      	mov	r0, r3
 8000900:	f000 f840 	bl	8000984 <LIS_Read>
	LIS_Read(y_low, &output[2]);
 8000904:	f107 0314 	add.w	r3, r7, #20
 8000908:	1c9a      	adds	r2, r3, #2
 800090a:	7f7b      	ldrb	r3, [r7, #29]
 800090c:	4611      	mov	r1, r2
 800090e:	4618      	mov	r0, r3
 8000910:	f000 f838 	bl	8000984 <LIS_Read>
	LIS_Read(y_high, &output[3]);
 8000914:	f107 0314 	add.w	r3, r7, #20
 8000918:	1cda      	adds	r2, r3, #3
 800091a:	7f3b      	ldrb	r3, [r7, #28]
 800091c:	4611      	mov	r1, r2
 800091e:	4618      	mov	r0, r3
 8000920:	f000 f830 	bl	8000984 <LIS_Read>
	LIS_Read(z_low, &output[4]);
 8000924:	f107 0314 	add.w	r3, r7, #20
 8000928:	1d1a      	adds	r2, r3, #4
 800092a:	7efb      	ldrb	r3, [r7, #27]
 800092c:	4611      	mov	r1, r2
 800092e:	4618      	mov	r0, r3
 8000930:	f000 f828 	bl	8000984 <LIS_Read>
	LIS_Read(z_high, &output[5]);
 8000934:	f107 0314 	add.w	r3, r7, #20
 8000938:	1d5a      	adds	r2, r3, #5
 800093a:	7ebb      	ldrb	r3, [r7, #26]
 800093c:	4611      	mov	r1, r2
 800093e:	4618      	mov	r0, r3
 8000940:	f000 f820 	bl	8000984 <LIS_Read>

	x[0] = (int16_t) (output[1] << 8) | (output[0]);
 8000944:	7d7b      	ldrb	r3, [r7, #21]
 8000946:	021b      	lsls	r3, r3, #8
 8000948:	b21a      	sxth	r2, r3
 800094a:	7d3b      	ldrb	r3, [r7, #20]
 800094c:	b21b      	sxth	r3, r3
 800094e:	4313      	orrs	r3, r2
 8000950:	b21a      	sxth	r2, r3
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	801a      	strh	r2, [r3, #0]
	y[0] = (int16_t) (output[3] << 8) | (output[2]);
 8000956:	7dfb      	ldrb	r3, [r7, #23]
 8000958:	021b      	lsls	r3, r3, #8
 800095a:	b21a      	sxth	r2, r3
 800095c:	7dbb      	ldrb	r3, [r7, #22]
 800095e:	b21b      	sxth	r3, r3
 8000960:	4313      	orrs	r3, r2
 8000962:	b21a      	sxth	r2, r3
 8000964:	68bb      	ldr	r3, [r7, #8]
 8000966:	801a      	strh	r2, [r3, #0]
	z[0] = (int16_t) (output[5] << 8) | (output[4]);
 8000968:	7e7b      	ldrb	r3, [r7, #25]
 800096a:	021b      	lsls	r3, r3, #8
 800096c:	b21a      	sxth	r2, r3
 800096e:	7e3b      	ldrb	r3, [r7, #24]
 8000970:	b21b      	sxth	r3, r3
 8000972:	4313      	orrs	r3, r2
 8000974:	b21a      	sxth	r2, r3
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	801a      	strh	r2, [r3, #0]

	return;
 800097a:	bf00      	nop

}
 800097c:	3720      	adds	r7, #32
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
	...

08000984 <LIS_Read>:

void LIS_Read(uint8_t reg, uint8_t *output) {
 8000984:	b580      	push	{r7, lr}
 8000986:	b086      	sub	sp, #24
 8000988:	af02      	add	r7, sp, #8
 800098a:	4603      	mov	r3, r0
 800098c:	6039      	str	r1, [r7, #0]
 800098e:	71fb      	strb	r3, [r7, #7]

	uint8_t dummy = (0x00);
 8000990:	2300      	movs	r3, #0
 8000992:	73fb      	strb	r3, [r7, #15]
	uint8_t read_reg = (0x80) | (reg);
 8000994:	79fb      	ldrb	r3, [r7, #7]
 8000996:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800099a:	b2db      	uxtb	r3, r3
 800099c:	73bb      	strb	r3, [r7, #14]

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 800099e:	2200      	movs	r2, #0
 80009a0:	2108      	movs	r1, #8
 80009a2:	4810      	ldr	r0, [pc, #64]	; (80009e4 <LIS_Read+0x60>)
 80009a4:	f001 f808 	bl	80019b8 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, &read_reg, &output[0], 1, 5000);
 80009a8:	f107 010e 	add.w	r1, r7, #14
 80009ac:	f241 3388 	movw	r3, #5000	; 0x1388
 80009b0:	9300      	str	r3, [sp, #0]
 80009b2:	2301      	movs	r3, #1
 80009b4:	683a      	ldr	r2, [r7, #0]
 80009b6:	480c      	ldr	r0, [pc, #48]	; (80009e8 <LIS_Read+0x64>)
 80009b8:	f001 fcde 	bl	8002378 <HAL_SPI_TransmitReceive>
	HAL_SPI_TransmitReceive(&hspi1, &dummy, &output[0], 1, 5000);
 80009bc:	f107 010f 	add.w	r1, r7, #15
 80009c0:	f241 3388 	movw	r3, #5000	; 0x1388
 80009c4:	9300      	str	r3, [sp, #0]
 80009c6:	2301      	movs	r3, #1
 80009c8:	683a      	ldr	r2, [r7, #0]
 80009ca:	4807      	ldr	r0, [pc, #28]	; (80009e8 <LIS_Read+0x64>)
 80009cc:	f001 fcd4 	bl	8002378 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 80009d0:	2201      	movs	r2, #1
 80009d2:	2108      	movs	r1, #8
 80009d4:	4803      	ldr	r0, [pc, #12]	; (80009e4 <LIS_Read+0x60>)
 80009d6:	f000 ffef 	bl	80019b8 <HAL_GPIO_WritePin>

	return;
 80009da:	bf00      	nop

}
 80009dc:	3710      	adds	r7, #16
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	40021000 	.word	0x40021000
 80009e8:	200000ac 	.word	0x200000ac

080009ec <LIS_Write>:

void LIS_Write(uint8_t reg, uint8_t data) {
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b086      	sub	sp, #24
 80009f0:	af02      	add	r7, sp, #8
 80009f2:	4603      	mov	r3, r0
 80009f4:	460a      	mov	r2, r1
 80009f6:	71fb      	strb	r3, [r7, #7]
 80009f8:	4613      	mov	r3, r2
 80009fa:	71bb      	strb	r3, [r7, #6]

	uint8_t output[] = {0};
 80009fc:	2300      	movs	r3, #0
 80009fe:	733b      	strb	r3, [r7, #12]

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000a00:	2200      	movs	r2, #0
 8000a02:	2108      	movs	r1, #8
 8000a04:	480f      	ldr	r0, [pc, #60]	; (8000a44 <LIS_Write+0x58>)
 8000a06:	f000 ffd7 	bl	80019b8 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, &reg, &output[0], 1, 5000);
 8000a0a:	f107 020c 	add.w	r2, r7, #12
 8000a0e:	1df9      	adds	r1, r7, #7
 8000a10:	f241 3388 	movw	r3, #5000	; 0x1388
 8000a14:	9300      	str	r3, [sp, #0]
 8000a16:	2301      	movs	r3, #1
 8000a18:	480b      	ldr	r0, [pc, #44]	; (8000a48 <LIS_Write+0x5c>)
 8000a1a:	f001 fcad 	bl	8002378 <HAL_SPI_TransmitReceive>
	HAL_SPI_TransmitReceive(&hspi1, &data, &output[0], 1, 5000);
 8000a1e:	f107 020c 	add.w	r2, r7, #12
 8000a22:	1db9      	adds	r1, r7, #6
 8000a24:	f241 3388 	movw	r3, #5000	; 0x1388
 8000a28:	9300      	str	r3, [sp, #0]
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	4806      	ldr	r0, [pc, #24]	; (8000a48 <LIS_Write+0x5c>)
 8000a2e:	f001 fca3 	bl	8002378 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8000a32:	2201      	movs	r2, #1
 8000a34:	2108      	movs	r1, #8
 8000a36:	4803      	ldr	r0, [pc, #12]	; (8000a44 <LIS_Write+0x58>)
 8000a38:	f000 ffbe 	bl	80019b8 <HAL_GPIO_WritePin>

	return;
 8000a3c:	bf00      	nop

}
 8000a3e:	3710      	adds	r7, #16
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	40021000 	.word	0x40021000
 8000a48:	200000ac 	.word	0x200000ac

08000a4c <uint162string>:

	return;

}

void uint162string(uint16_t byte_in, char *string_out) {
 8000a4c:	b590      	push	{r4, r7, lr}
 8000a4e:	b08d      	sub	sp, #52	; 0x34
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	4603      	mov	r3, r0
 8000a54:	6039      	str	r1, [r7, #0]
 8000a56:	80fb      	strh	r3, [r7, #6]
	int tenthousands=0;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
	int thousands=0;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	62bb      	str	r3, [r7, #40]	; 0x28
	int hundreds=0;
 8000a60:	2300      	movs	r3, #0
 8000a62:	627b      	str	r3, [r7, #36]	; 0x24
	int tens=0;
 8000a64:	2300      	movs	r3, #0
 8000a66:	623b      	str	r3, [r7, #32]
	int ones=0;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	61fb      	str	r3, [r7, #28]

	int quad_digit = byte_in % 10000; //returns the last four digits
 8000a6c:	88fb      	ldrh	r3, [r7, #6]
 8000a6e:	4a3f      	ldr	r2, [pc, #252]	; (8000b6c <uint162string+0x120>)
 8000a70:	fba2 1203 	umull	r1, r2, r2, r3
 8000a74:	0b52      	lsrs	r2, r2, #13
 8000a76:	f242 7110 	movw	r1, #10000	; 0x2710
 8000a7a:	fb01 f202 	mul.w	r2, r1, r2
 8000a7e:	1a9b      	subs	r3, r3, r2
 8000a80:	b29b      	uxth	r3, r3
 8000a82:	61bb      	str	r3, [r7, #24]
	int triple_digit = byte_in % 1000; //returns the last three digits
 8000a84:	88fb      	ldrh	r3, [r7, #6]
 8000a86:	4a3a      	ldr	r2, [pc, #232]	; (8000b70 <uint162string+0x124>)
 8000a88:	fba2 1203 	umull	r1, r2, r2, r3
 8000a8c:	0992      	lsrs	r2, r2, #6
 8000a8e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a92:	fb01 f202 	mul.w	r2, r1, r2
 8000a96:	1a9b      	subs	r3, r3, r2
 8000a98:	b29b      	uxth	r3, r3
 8000a9a:	617b      	str	r3, [r7, #20]
	int double_digit = byte_in % 100; //returns the last two digits
 8000a9c:	88fb      	ldrh	r3, [r7, #6]
 8000a9e:	4a35      	ldr	r2, [pc, #212]	; (8000b74 <uint162string+0x128>)
 8000aa0:	fba2 1203 	umull	r1, r2, r2, r3
 8000aa4:	0952      	lsrs	r2, r2, #5
 8000aa6:	2164      	movs	r1, #100	; 0x64
 8000aa8:	fb01 f202 	mul.w	r2, r1, r2
 8000aac:	1a9b      	subs	r3, r3, r2
 8000aae:	b29b      	uxth	r3, r3
 8000ab0:	613b      	str	r3, [r7, #16]
	int single_digit = byte_in % 10; //returns last digit
 8000ab2:	88fa      	ldrh	r2, [r7, #6]
 8000ab4:	4b30      	ldr	r3, [pc, #192]	; (8000b78 <uint162string+0x12c>)
 8000ab6:	fba3 1302 	umull	r1, r3, r3, r2
 8000aba:	08d9      	lsrs	r1, r3, #3
 8000abc:	460b      	mov	r3, r1
 8000abe:	009b      	lsls	r3, r3, #2
 8000ac0:	440b      	add	r3, r1
 8000ac2:	005b      	lsls	r3, r3, #1
 8000ac4:	1ad3      	subs	r3, r2, r3
 8000ac6:	b29b      	uxth	r3, r3
 8000ac8:	60fb      	str	r3, [r7, #12]

	tenthousands = (byte_in - quad_digit)/10000;
 8000aca:	88fa      	ldrh	r2, [r7, #6]
 8000acc:	69bb      	ldr	r3, [r7, #24]
 8000ace:	1ad3      	subs	r3, r2, r3
 8000ad0:	4a2a      	ldr	r2, [pc, #168]	; (8000b7c <uint162string+0x130>)
 8000ad2:	fb82 1203 	smull	r1, r2, r2, r3
 8000ad6:	1312      	asrs	r2, r2, #12
 8000ad8:	17db      	asrs	r3, r3, #31
 8000ada:	1ad3      	subs	r3, r2, r3
 8000adc:	62fb      	str	r3, [r7, #44]	; 0x2c
	thousands = (quad_digit - triple_digit)/1000;
 8000ade:	69ba      	ldr	r2, [r7, #24]
 8000ae0:	697b      	ldr	r3, [r7, #20]
 8000ae2:	1ad3      	subs	r3, r2, r3
 8000ae4:	4a22      	ldr	r2, [pc, #136]	; (8000b70 <uint162string+0x124>)
 8000ae6:	fb82 1203 	smull	r1, r2, r2, r3
 8000aea:	1192      	asrs	r2, r2, #6
 8000aec:	17db      	asrs	r3, r3, #31
 8000aee:	1ad3      	subs	r3, r2, r3
 8000af0:	62bb      	str	r3, [r7, #40]	; 0x28
	hundreds = (triple_digit - double_digit)/100;
 8000af2:	697a      	ldr	r2, [r7, #20]
 8000af4:	693b      	ldr	r3, [r7, #16]
 8000af6:	1ad3      	subs	r3, r2, r3
 8000af8:	4a1e      	ldr	r2, [pc, #120]	; (8000b74 <uint162string+0x128>)
 8000afa:	fb82 1203 	smull	r1, r2, r2, r3
 8000afe:	1152      	asrs	r2, r2, #5
 8000b00:	17db      	asrs	r3, r3, #31
 8000b02:	1ad3      	subs	r3, r2, r3
 8000b04:	627b      	str	r3, [r7, #36]	; 0x24
	tens = (double_digit - single_digit)/10;
 8000b06:	693a      	ldr	r2, [r7, #16]
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	1ad3      	subs	r3, r2, r3
 8000b0c:	4a1c      	ldr	r2, [pc, #112]	; (8000b80 <uint162string+0x134>)
 8000b0e:	fb82 1203 	smull	r1, r2, r2, r3
 8000b12:	1092      	asrs	r2, r2, #2
 8000b14:	17db      	asrs	r3, r3, #31
 8000b16:	1ad3      	subs	r3, r2, r3
 8000b18:	623b      	str	r3, [r7, #32]
	ones = single_digit;
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	61fb      	str	r3, [r7, #28]

	string_out[0] = dig2char(tenthousands);
 8000b1e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000b20:	f000 f87e 	bl	8000c20 <dig2char>
 8000b24:	4603      	mov	r3, r0
 8000b26:	461a      	mov	r2, r3
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	701a      	strb	r2, [r3, #0]
	string_out[1] = dig2char(thousands);
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	1c5c      	adds	r4, r3, #1
 8000b30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000b32:	f000 f875 	bl	8000c20 <dig2char>
 8000b36:	4603      	mov	r3, r0
 8000b38:	7023      	strb	r3, [r4, #0]
	string_out[2] = dig2char(hundreds);
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	1c9c      	adds	r4, r3, #2
 8000b3e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000b40:	f000 f86e 	bl	8000c20 <dig2char>
 8000b44:	4603      	mov	r3, r0
 8000b46:	7023      	strb	r3, [r4, #0]
	string_out[3] = dig2char(tens);
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	1cdc      	adds	r4, r3, #3
 8000b4c:	6a38      	ldr	r0, [r7, #32]
 8000b4e:	f000 f867 	bl	8000c20 <dig2char>
 8000b52:	4603      	mov	r3, r0
 8000b54:	7023      	strb	r3, [r4, #0]
	string_out[4] = dig2char(ones);
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	1d1c      	adds	r4, r3, #4
 8000b5a:	69f8      	ldr	r0, [r7, #28]
 8000b5c:	f000 f860 	bl	8000c20 <dig2char>
 8000b60:	4603      	mov	r3, r0
 8000b62:	7023      	strb	r3, [r4, #0]

	return;
 8000b64:	bf00      	nop

}
 8000b66:	3734      	adds	r7, #52	; 0x34
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd90      	pop	{r4, r7, pc}
 8000b6c:	d1b71759 	.word	0xd1b71759
 8000b70:	10624dd3 	.word	0x10624dd3
 8000b74:	51eb851f 	.word	0x51eb851f
 8000b78:	cccccccd 	.word	0xcccccccd
 8000b7c:	68db8bad 	.word	0x68db8bad
 8000b80:	66666667 	.word	0x66666667

08000b84 <int162string>:

	return;

}

void int162string(int16_t byte_in, char *string_out) {
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b086      	sub	sp, #24
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	6039      	str	r1, [r7, #0]
 8000b8e:	80fb      	strh	r3, [r7, #6]
	int sign = 0;
 8000b90:	2300      	movs	r3, #0
 8000b92:	617b      	str	r3, [r7, #20]
	char uintchar[] = "00000";
 8000b94:	4a21      	ldr	r2, [pc, #132]	; (8000c1c <int162string+0x98>)
 8000b96:	f107 030c 	add.w	r3, r7, #12
 8000b9a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b9e:	6018      	str	r0, [r3, #0]
 8000ba0:	3304      	adds	r3, #4
 8000ba2:	8019      	strh	r1, [r3, #0]
	uint16_t abs_int = 0;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	827b      	strh	r3, [r7, #18]

	sign = byte_in & (1<<15);
 8000ba8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000bac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000bb0:	617b      	str	r3, [r7, #20]

	if (sign) {
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d00d      	beq.n	8000bd4 <int162string+0x50>
		string_out[0] = '-';
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	222d      	movs	r2, #45	; 0x2d
 8000bbc:	701a      	strb	r2, [r3, #0]
		abs_int = (uint16_t) ((~(byte_in)) + 1);
 8000bbe:	88fb      	ldrh	r3, [r7, #6]
 8000bc0:	425b      	negs	r3, r3
 8000bc2:	827b      	strh	r3, [r7, #18]
		uint162string(abs_int, uintchar);
 8000bc4:	f107 020c 	add.w	r2, r7, #12
 8000bc8:	8a7b      	ldrh	r3, [r7, #18]
 8000bca:	4611      	mov	r1, r2
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f7ff ff3d 	bl	8000a4c <uint162string>
 8000bd2:	e00b      	b.n	8000bec <int162string+0x68>
	} else {
		string_out[0] = '+';
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	222b      	movs	r2, #43	; 0x2b
 8000bd8:	701a      	strb	r2, [r3, #0]
		abs_int = (uint16_t) byte_in;
 8000bda:	88fb      	ldrh	r3, [r7, #6]
 8000bdc:	827b      	strh	r3, [r7, #18]
		uint162string(abs_int, uintchar);
 8000bde:	f107 020c 	add.w	r2, r7, #12
 8000be2:	8a7b      	ldrh	r3, [r7, #18]
 8000be4:	4611      	mov	r1, r2
 8000be6:	4618      	mov	r0, r3
 8000be8:	f7ff ff30 	bl	8000a4c <uint162string>
	}

	string_out[1] = uintchar[0];
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	3301      	adds	r3, #1
 8000bf0:	7b3a      	ldrb	r2, [r7, #12]
 8000bf2:	701a      	strb	r2, [r3, #0]
	string_out[2] = uintchar[1];
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	3302      	adds	r3, #2
 8000bf8:	7b7a      	ldrb	r2, [r7, #13]
 8000bfa:	701a      	strb	r2, [r3, #0]
	string_out[3] = uintchar[2];
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	3303      	adds	r3, #3
 8000c00:	7bba      	ldrb	r2, [r7, #14]
 8000c02:	701a      	strb	r2, [r3, #0]
	string_out[4] = uintchar[3];
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	3304      	adds	r3, #4
 8000c08:	7bfa      	ldrb	r2, [r7, #15]
 8000c0a:	701a      	strb	r2, [r3, #0]
	string_out[5] = uintchar[4];
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	3305      	adds	r3, #5
 8000c10:	7c3a      	ldrb	r2, [r7, #16]
 8000c12:	701a      	strb	r2, [r3, #0]

	return;
 8000c14:	bf00      	nop

}
 8000c16:	3718      	adds	r7, #24
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	08004240 	.word	0x08004240

08000c20 <dig2char>:

char dig2char(int digit) {
 8000c20:	b480      	push	{r7}
 8000c22:	b085      	sub	sp, #20
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]

	char character='\0';
 8000c28:	2300      	movs	r3, #0
 8000c2a:	73fb      	strb	r3, [r7, #15]

		if (digit == 0)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d101      	bne.n	8000c36 <dig2char+0x16>
			character='0';
 8000c32:	2330      	movs	r3, #48	; 0x30
 8000c34:	73fb      	strb	r3, [r7, #15]
		if (digit == 1)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	2b01      	cmp	r3, #1
 8000c3a:	d101      	bne.n	8000c40 <dig2char+0x20>
			character='1';
 8000c3c:	2331      	movs	r3, #49	; 0x31
 8000c3e:	73fb      	strb	r3, [r7, #15]
		if (digit == 2)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	2b02      	cmp	r3, #2
 8000c44:	d101      	bne.n	8000c4a <dig2char+0x2a>
			character='2';
 8000c46:	2332      	movs	r3, #50	; 0x32
 8000c48:	73fb      	strb	r3, [r7, #15]
		if (digit == 3)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	2b03      	cmp	r3, #3
 8000c4e:	d101      	bne.n	8000c54 <dig2char+0x34>
			character='3';
 8000c50:	2333      	movs	r3, #51	; 0x33
 8000c52:	73fb      	strb	r3, [r7, #15]
		if (digit == 4)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	2b04      	cmp	r3, #4
 8000c58:	d101      	bne.n	8000c5e <dig2char+0x3e>
			character='4';
 8000c5a:	2334      	movs	r3, #52	; 0x34
 8000c5c:	73fb      	strb	r3, [r7, #15]
		if (digit == 5)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	2b05      	cmp	r3, #5
 8000c62:	d101      	bne.n	8000c68 <dig2char+0x48>
			character='5';
 8000c64:	2335      	movs	r3, #53	; 0x35
 8000c66:	73fb      	strb	r3, [r7, #15]
		if (digit == 6)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	2b06      	cmp	r3, #6
 8000c6c:	d101      	bne.n	8000c72 <dig2char+0x52>
			character='6';
 8000c6e:	2336      	movs	r3, #54	; 0x36
 8000c70:	73fb      	strb	r3, [r7, #15]
		if (digit == 7)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	2b07      	cmp	r3, #7
 8000c76:	d101      	bne.n	8000c7c <dig2char+0x5c>
			character='7';
 8000c78:	2337      	movs	r3, #55	; 0x37
 8000c7a:	73fb      	strb	r3, [r7, #15]
		if (digit == 8)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	2b08      	cmp	r3, #8
 8000c80:	d101      	bne.n	8000c86 <dig2char+0x66>
			character='8';
 8000c82:	2338      	movs	r3, #56	; 0x38
 8000c84:	73fb      	strb	r3, [r7, #15]
		if (digit == 9)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	2b09      	cmp	r3, #9
 8000c8a:	d101      	bne.n	8000c90 <dig2char+0x70>
			character='9';
 8000c8c:	2339      	movs	r3, #57	; 0x39
 8000c8e:	73fb      	strb	r3, [r7, #15]

	return character;
 8000c90:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	3714      	adds	r7, #20
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
	...

08000ca0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b094      	sub	sp, #80	; 0x50
 8000ca4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ca6:	f107 0320 	add.w	r3, r7, #32
 8000caa:	2230      	movs	r2, #48	; 0x30
 8000cac:	2100      	movs	r1, #0
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f003 fa94 	bl	80041dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cb4:	f107 030c 	add.w	r3, r7, #12
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]
 8000cbc:	605a      	str	r2, [r3, #4]
 8000cbe:	609a      	str	r2, [r3, #8]
 8000cc0:	60da      	str	r2, [r3, #12]
 8000cc2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	60bb      	str	r3, [r7, #8]
 8000cc8:	4b28      	ldr	r3, [pc, #160]	; (8000d6c <SystemClock_Config+0xcc>)
 8000cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ccc:	4a27      	ldr	r2, [pc, #156]	; (8000d6c <SystemClock_Config+0xcc>)
 8000cce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cd2:	6413      	str	r3, [r2, #64]	; 0x40
 8000cd4:	4b25      	ldr	r3, [pc, #148]	; (8000d6c <SystemClock_Config+0xcc>)
 8000cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cdc:	60bb      	str	r3, [r7, #8]
 8000cde:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	607b      	str	r3, [r7, #4]
 8000ce4:	4b22      	ldr	r3, [pc, #136]	; (8000d70 <SystemClock_Config+0xd0>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a21      	ldr	r2, [pc, #132]	; (8000d70 <SystemClock_Config+0xd0>)
 8000cea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cee:	6013      	str	r3, [r2, #0]
 8000cf0:	4b1f      	ldr	r3, [pc, #124]	; (8000d70 <SystemClock_Config+0xd0>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cf8:	607b      	str	r3, [r7, #4]
 8000cfa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d00:	2301      	movs	r3, #1
 8000d02:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d04:	2310      	movs	r3, #16
 8000d06:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d08:	2302      	movs	r3, #2
 8000d0a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000d10:	2308      	movs	r3, #8
 8000d12:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000d14:	2332      	movs	r3, #50	; 0x32
 8000d16:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000d18:	2304      	movs	r3, #4
 8000d1a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000d1c:	2307      	movs	r3, #7
 8000d1e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d20:	f107 0320 	add.w	r3, r7, #32
 8000d24:	4618      	mov	r0, r3
 8000d26:	f000 fe61 	bl	80019ec <HAL_RCC_OscConfig>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000d30:	f000 f9a0 	bl	8001074 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d34:	230f      	movs	r3, #15
 8000d36:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d38:	2302      	movs	r3, #2
 8000d3a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d40:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d44:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d4a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d4c:	f107 030c 	add.w	r3, r7, #12
 8000d50:	2100      	movs	r1, #0
 8000d52:	4618      	mov	r0, r3
 8000d54:	f001 f8ba 	bl	8001ecc <HAL_RCC_ClockConfig>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000d5e:	f000 f989 	bl	8001074 <Error_Handler>
  }
}
 8000d62:	bf00      	nop
 8000d64:	3750      	adds	r7, #80	; 0x50
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	40023800 	.word	0x40023800
 8000d70:	40007000 	.word	0x40007000

08000d74 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000d78:	4b17      	ldr	r3, [pc, #92]	; (8000dd8 <MX_SPI1_Init+0x64>)
 8000d7a:	4a18      	ldr	r2, [pc, #96]	; (8000ddc <MX_SPI1_Init+0x68>)
 8000d7c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d7e:	4b16      	ldr	r3, [pc, #88]	; (8000dd8 <MX_SPI1_Init+0x64>)
 8000d80:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d84:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d86:	4b14      	ldr	r3, [pc, #80]	; (8000dd8 <MX_SPI1_Init+0x64>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d8c:	4b12      	ldr	r3, [pc, #72]	; (8000dd8 <MX_SPI1_Init+0x64>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000d92:	4b11      	ldr	r3, [pc, #68]	; (8000dd8 <MX_SPI1_Init+0x64>)
 8000d94:	2202      	movs	r2, #2
 8000d96:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000d98:	4b0f      	ldr	r3, [pc, #60]	; (8000dd8 <MX_SPI1_Init+0x64>)
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d9e:	4b0e      	ldr	r3, [pc, #56]	; (8000dd8 <MX_SPI1_Init+0x64>)
 8000da0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000da4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000da6:	4b0c      	ldr	r3, [pc, #48]	; (8000dd8 <MX_SPI1_Init+0x64>)
 8000da8:	2220      	movs	r2, #32
 8000daa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000dac:	4b0a      	ldr	r3, [pc, #40]	; (8000dd8 <MX_SPI1_Init+0x64>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000db2:	4b09      	ldr	r3, [pc, #36]	; (8000dd8 <MX_SPI1_Init+0x64>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000db8:	4b07      	ldr	r3, [pc, #28]	; (8000dd8 <MX_SPI1_Init+0x64>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000dbe:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <MX_SPI1_Init+0x64>)
 8000dc0:	220a      	movs	r2, #10
 8000dc2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000dc4:	4804      	ldr	r0, [pc, #16]	; (8000dd8 <MX_SPI1_Init+0x64>)
 8000dc6:	f001 fa73 	bl	80022b0 <HAL_SPI_Init>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000dd0:	f000 f950 	bl	8001074 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000dd4:	bf00      	nop
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	200000ac 	.word	0x200000ac
 8000ddc:	40013000 	.word	0x40013000

08000de0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000de4:	4b11      	ldr	r3, [pc, #68]	; (8000e2c <MX_USART1_UART_Init+0x4c>)
 8000de6:	4a12      	ldr	r2, [pc, #72]	; (8000e30 <MX_USART1_UART_Init+0x50>)
 8000de8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000dea:	4b10      	ldr	r3, [pc, #64]	; (8000e2c <MX_USART1_UART_Init+0x4c>)
 8000dec:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000df0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000df2:	4b0e      	ldr	r3, [pc, #56]	; (8000e2c <MX_USART1_UART_Init+0x4c>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000df8:	4b0c      	ldr	r3, [pc, #48]	; (8000e2c <MX_USART1_UART_Init+0x4c>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000dfe:	4b0b      	ldr	r3, [pc, #44]	; (8000e2c <MX_USART1_UART_Init+0x4c>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX;
 8000e04:	4b09      	ldr	r3, [pc, #36]	; (8000e2c <MX_USART1_UART_Init+0x4c>)
 8000e06:	2208      	movs	r2, #8
 8000e08:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e0a:	4b08      	ldr	r3, [pc, #32]	; (8000e2c <MX_USART1_UART_Init+0x4c>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e10:	4b06      	ldr	r3, [pc, #24]	; (8000e2c <MX_USART1_UART_Init+0x4c>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e16:	4805      	ldr	r0, [pc, #20]	; (8000e2c <MX_USART1_UART_Init+0x4c>)
 8000e18:	f002 fad0 	bl	80033bc <HAL_UART_Init>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000e22:	f000 f927 	bl	8001074 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e26:	bf00      	nop
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	2000002c 	.word	0x2000002c
 8000e30:	40011000 	.word	0x40011000

08000e34 <MX_TIM_Init>:

static void MX_TIM_Init(void) {
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b08e      	sub	sp, #56	; 0x38
 8000e38:	af00      	add	r7, sp, #0

	TIM_ClockConfigTypeDef ClockSourceConfig = {0};
 8000e3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e3e:	2200      	movs	r2, #0
 8000e40:	601a      	str	r2, [r3, #0]
 8000e42:	605a      	str	r2, [r3, #4]
 8000e44:	609a      	str	r2, [r3, #8]
 8000e46:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef MasterConfig = {0};
 8000e48:	f107 0320 	add.w	r3, r7, #32
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]
 8000e50:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef PWM_OC_Config = {0};
 8000e52:	1d3b      	adds	r3, r7, #4
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	605a      	str	r2, [r3, #4]
 8000e5a:	609a      	str	r2, [r3, #8]
 8000e5c:	60da      	str	r2, [r3, #12]
 8000e5e:	611a      	str	r2, [r3, #16]
 8000e60:	615a      	str	r2, [r3, #20]
 8000e62:	619a      	str	r2, [r3, #24]

	htim1.Instance = TIM3;
 8000e64:	4b29      	ldr	r3, [pc, #164]	; (8000f0c <MX_TIM_Init+0xd8>)
 8000e66:	4a2a      	ldr	r2, [pc, #168]	; (8000f10 <MX_TIM_Init+0xdc>)
 8000e68:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 5;
 8000e6a:	4b28      	ldr	r3, [pc, #160]	; (8000f0c <MX_TIM_Init+0xd8>)
 8000e6c:	2205      	movs	r2, #5
 8000e6e:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8000e70:	4b26      	ldr	r3, [pc, #152]	; (8000f0c <MX_TIM_Init+0xd8>)
 8000e72:	2210      	movs	r2, #16
 8000e74:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 1000;
 8000e76:	4b25      	ldr	r3, [pc, #148]	; (8000f0c <MX_TIM_Init+0xd8>)
 8000e78:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e7c:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e7e:	4b23      	ldr	r3, [pc, #140]	; (8000f0c <MX_TIM_Init+0xd8>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 10;
 8000e84:	4b21      	ldr	r3, [pc, #132]	; (8000f0c <MX_TIM_Init+0xd8>)
 8000e86:	220a      	movs	r2, #10
 8000e88:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e8a:	4b20      	ldr	r3, [pc, #128]	; (8000f0c <MX_TIM_Init+0xd8>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	619a      	str	r2, [r3, #24]
	HAL_TIM_Base_Init(&htim1);
 8000e90:	481e      	ldr	r0, [pc, #120]	; (8000f0c <MX_TIM_Init+0xd8>)
 8000e92:	f001 fcbf 	bl	8002814 <HAL_TIM_Base_Init>

	ClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e9a:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_TIM_ConfigClockSource(&htim1, &ClockSourceConfig);
 8000e9c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	481a      	ldr	r0, [pc, #104]	; (8000f0c <MX_TIM_Init+0xd8>)
 8000ea4:	f001 fe46 	bl	8002b34 <HAL_TIM_ConfigClockSource>

	HAL_TIM_PWM_Init(&htim1);
 8000ea8:	4818      	ldr	r0, [pc, #96]	; (8000f0c <MX_TIM_Init+0xd8>)
 8000eaa:	f001 fd09 	bl	80028c0 <HAL_TIM_PWM_Init>

	MasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	623b      	str	r3, [r7, #32]
	MasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_TIMEx_MasterConfigSynchronization(&htim1, &MasterConfig);
 8000eb6:	f107 0320 	add.w	r3, r7, #32
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4813      	ldr	r0, [pc, #76]	; (8000f0c <MX_TIM_Init+0xd8>)
 8000ebe:	f002 fa01 	bl	80032c4 <HAL_TIMEx_MasterConfigSynchronization>

	PWM_OC_Config.OCMode = TIM_OCMODE_PWM1;
 8000ec2:	2360      	movs	r3, #96	; 0x60
 8000ec4:	607b      	str	r3, [r7, #4]
	PWM_OC_Config.Pulse = 500;
 8000ec6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000eca:	60bb      	str	r3, [r7, #8]
	PWM_OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	60fb      	str	r3, [r7, #12]
	PWM_OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	617b      	str	r3, [r7, #20]
	HAL_TIM_PWM_ConfigChannel(&htim1, &PWM_OC_Config, TIM_CHANNEL_1);
 8000ed4:	1d3b      	adds	r3, r7, #4
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	4619      	mov	r1, r3
 8000eda:	480c      	ldr	r0, [pc, #48]	; (8000f0c <MX_TIM_Init+0xd8>)
 8000edc:	f001 fd64 	bl	80029a8 <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_PWM_ConfigChannel(&htim1, &PWM_OC_Config, TIM_CHANNEL_2);
 8000ee0:	1d3b      	adds	r3, r7, #4
 8000ee2:	2204      	movs	r2, #4
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	4809      	ldr	r0, [pc, #36]	; (8000f0c <MX_TIM_Init+0xd8>)
 8000ee8:	f001 fd5e 	bl	80029a8 <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_PWM_ConfigChannel(&htim1, &PWM_OC_Config, TIM_CHANNEL_3);
 8000eec:	1d3b      	adds	r3, r7, #4
 8000eee:	2208      	movs	r2, #8
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	4806      	ldr	r0, [pc, #24]	; (8000f0c <MX_TIM_Init+0xd8>)
 8000ef4:	f001 fd58 	bl	80029a8 <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_PWM_ConfigChannel(&htim1, &PWM_OC_Config, TIM_CHANNEL_4);
 8000ef8:	1d3b      	adds	r3, r7, #4
 8000efa:	220c      	movs	r2, #12
 8000efc:	4619      	mov	r1, r3
 8000efe:	4803      	ldr	r0, [pc, #12]	; (8000f0c <MX_TIM_Init+0xd8>)
 8000f00:	f001 fd52 	bl	80029a8 <HAL_TIM_PWM_ConfigChannel>

}
 8000f04:	bf00      	nop
 8000f06:	3738      	adds	r7, #56	; 0x38
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	2000006c 	.word	0x2000006c
 8000f10:	40000400 	.word	0x40000400

08000f14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b08c      	sub	sp, #48	; 0x30
 8000f18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f1a:	f107 031c 	add.w	r3, r7, #28
 8000f1e:	2200      	movs	r2, #0
 8000f20:	601a      	str	r2, [r3, #0]
 8000f22:	605a      	str	r2, [r3, #4]
 8000f24:	609a      	str	r2, [r3, #8]
 8000f26:	60da      	str	r2, [r3, #12]
 8000f28:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	61bb      	str	r3, [r7, #24]
 8000f2e:	4b4b      	ldr	r3, [pc, #300]	; (800105c <MX_GPIO_Init+0x148>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	4a4a      	ldr	r2, [pc, #296]	; (800105c <MX_GPIO_Init+0x148>)
 8000f34:	f043 0310 	orr.w	r3, r3, #16
 8000f38:	6313      	str	r3, [r2, #48]	; 0x30
 8000f3a:	4b48      	ldr	r3, [pc, #288]	; (800105c <MX_GPIO_Init+0x148>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	f003 0310 	and.w	r3, r3, #16
 8000f42:	61bb      	str	r3, [r7, #24]
 8000f44:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f46:	2300      	movs	r3, #0
 8000f48:	617b      	str	r3, [r7, #20]
 8000f4a:	4b44      	ldr	r3, [pc, #272]	; (800105c <MX_GPIO_Init+0x148>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	4a43      	ldr	r2, [pc, #268]	; (800105c <MX_GPIO_Init+0x148>)
 8000f50:	f043 0304 	orr.w	r3, r3, #4
 8000f54:	6313      	str	r3, [r2, #48]	; 0x30
 8000f56:	4b41      	ldr	r3, [pc, #260]	; (800105c <MX_GPIO_Init+0x148>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	f003 0304 	and.w	r3, r3, #4
 8000f5e:	617b      	str	r3, [r7, #20]
 8000f60:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f62:	2300      	movs	r3, #0
 8000f64:	613b      	str	r3, [r7, #16]
 8000f66:	4b3d      	ldr	r3, [pc, #244]	; (800105c <MX_GPIO_Init+0x148>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	4a3c      	ldr	r2, [pc, #240]	; (800105c <MX_GPIO_Init+0x148>)
 8000f6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f70:	6313      	str	r3, [r2, #48]	; 0x30
 8000f72:	4b3a      	ldr	r3, [pc, #232]	; (800105c <MX_GPIO_Init+0x148>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f7a:	613b      	str	r3, [r7, #16]
 8000f7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7e:	2300      	movs	r3, #0
 8000f80:	60fb      	str	r3, [r7, #12]
 8000f82:	4b36      	ldr	r3, [pc, #216]	; (800105c <MX_GPIO_Init+0x148>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f86:	4a35      	ldr	r2, [pc, #212]	; (800105c <MX_GPIO_Init+0x148>)
 8000f88:	f043 0301 	orr.w	r3, r3, #1
 8000f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8e:	4b33      	ldr	r3, [pc, #204]	; (800105c <MX_GPIO_Init+0x148>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	f003 0301 	and.w	r3, r3, #1
 8000f96:	60fb      	str	r3, [r7, #12]
 8000f98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	60bb      	str	r3, [r7, #8]
 8000f9e:	4b2f      	ldr	r3, [pc, #188]	; (800105c <MX_GPIO_Init+0x148>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	4a2e      	ldr	r2, [pc, #184]	; (800105c <MX_GPIO_Init+0x148>)
 8000fa4:	f043 0302 	orr.w	r3, r3, #2
 8000fa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000faa:	4b2c      	ldr	r3, [pc, #176]	; (800105c <MX_GPIO_Init+0x148>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fae:	f003 0302 	and.w	r3, r3, #2
 8000fb2:	60bb      	str	r3, [r7, #8]
 8000fb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	607b      	str	r3, [r7, #4]
 8000fba:	4b28      	ldr	r3, [pc, #160]	; (800105c <MX_GPIO_Init+0x148>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	4a27      	ldr	r2, [pc, #156]	; (800105c <MX_GPIO_Init+0x148>)
 8000fc0:	f043 0308 	orr.w	r3, r3, #8
 8000fc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc6:	4b25      	ldr	r3, [pc, #148]	; (800105c <MX_GPIO_Init+0x148>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fca:	f003 0308 	and.w	r3, r3, #8
 8000fce:	607b      	str	r3, [r7, #4]
 8000fd0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	2108      	movs	r1, #8
 8000fd6:	4822      	ldr	r0, [pc, #136]	; (8001060 <MX_GPIO_Init+0x14c>)
 8000fd8:	f000 fcee 	bl	80019b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 8000fdc:	2200      	movs	r2, #0
 8000fde:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000fe2:	4820      	ldr	r0, [pc, #128]	; (8001064 <MX_GPIO_Init+0x150>)
 8000fe4:	f000 fce8 	bl	80019b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000fe8:	2308      	movs	r3, #8
 8000fea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fec:	2301      	movs	r3, #1
 8000fee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000ff8:	f107 031c 	add.w	r3, r7, #28
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4818      	ldr	r0, [pc, #96]	; (8001060 <MX_GPIO_Init+0x14c>)
 8001000:	f000 fb40 	bl	8001684 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001004:	2301      	movs	r3, #1
 8001006:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001008:	4b17      	ldr	r3, [pc, #92]	; (8001068 <MX_GPIO_Init+0x154>)
 800100a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100c:	2300      	movs	r3, #0
 800100e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001010:	f107 031c 	add.w	r3, r7, #28
 8001014:	4619      	mov	r1, r3
 8001016:	4815      	ldr	r0, [pc, #84]	; (800106c <MX_GPIO_Init+0x158>)
 8001018:	f000 fb34 	bl	8001684 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800101c:	2304      	movs	r3, #4
 800101e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001020:	2300      	movs	r3, #0
 8001022:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001024:	2300      	movs	r3, #0
 8001026:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001028:	f107 031c 	add.w	r3, r7, #28
 800102c:	4619      	mov	r1, r3
 800102e:	4810      	ldr	r0, [pc, #64]	; (8001070 <MX_GPIO_Init+0x15c>)
 8001030:	f000 fb28 	bl	8001684 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin;
 8001034:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001038:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800103a:	2301      	movs	r3, #1
 800103c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103e:	2300      	movs	r3, #0
 8001040:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001042:	2300      	movs	r3, #0
 8001044:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001046:	f107 031c 	add.w	r3, r7, #28
 800104a:	4619      	mov	r1, r3
 800104c:	4805      	ldr	r0, [pc, #20]	; (8001064 <MX_GPIO_Init+0x150>)
 800104e:	f000 fb19 	bl	8001684 <HAL_GPIO_Init>

}
 8001052:	bf00      	nop
 8001054:	3730      	adds	r7, #48	; 0x30
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	40023800 	.word	0x40023800
 8001060:	40021000 	.word	0x40021000
 8001064:	40020c00 	.word	0x40020c00
 8001068:	10110000 	.word	0x10110000
 800106c:	40020000 	.word	0x40020000
 8001070:	40020400 	.word	0x40020400

08001074 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001078:	bf00      	nop
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
	...

08001084 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800108a:	2300      	movs	r3, #0
 800108c:	607b      	str	r3, [r7, #4]
 800108e:	4b10      	ldr	r3, [pc, #64]	; (80010d0 <HAL_MspInit+0x4c>)
 8001090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001092:	4a0f      	ldr	r2, [pc, #60]	; (80010d0 <HAL_MspInit+0x4c>)
 8001094:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001098:	6453      	str	r3, [r2, #68]	; 0x44
 800109a:	4b0d      	ldr	r3, [pc, #52]	; (80010d0 <HAL_MspInit+0x4c>)
 800109c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800109e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010a2:	607b      	str	r3, [r7, #4]
 80010a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010a6:	2300      	movs	r3, #0
 80010a8:	603b      	str	r3, [r7, #0]
 80010aa:	4b09      	ldr	r3, [pc, #36]	; (80010d0 <HAL_MspInit+0x4c>)
 80010ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ae:	4a08      	ldr	r2, [pc, #32]	; (80010d0 <HAL_MspInit+0x4c>)
 80010b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010b4:	6413      	str	r3, [r2, #64]	; 0x40
 80010b6:	4b06      	ldr	r3, [pc, #24]	; (80010d0 <HAL_MspInit+0x4c>)
 80010b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010be:	603b      	str	r3, [r7, #0]
 80010c0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80010c2:	2007      	movs	r0, #7
 80010c4:	f000 fa7a 	bl	80015bc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010c8:	bf00      	nop
 80010ca:	3708      	adds	r7, #8
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	40023800 	.word	0x40023800

080010d4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b08a      	sub	sp, #40	; 0x28
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010dc:	f107 0314 	add.w	r3, r7, #20
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	605a      	str	r2, [r3, #4]
 80010e6:	609a      	str	r2, [r3, #8]
 80010e8:	60da      	str	r2, [r3, #12]
 80010ea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a19      	ldr	r2, [pc, #100]	; (8001158 <HAL_SPI_MspInit+0x84>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d12b      	bne.n	800114e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010f6:	2300      	movs	r3, #0
 80010f8:	613b      	str	r3, [r7, #16]
 80010fa:	4b18      	ldr	r3, [pc, #96]	; (800115c <HAL_SPI_MspInit+0x88>)
 80010fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010fe:	4a17      	ldr	r2, [pc, #92]	; (800115c <HAL_SPI_MspInit+0x88>)
 8001100:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001104:	6453      	str	r3, [r2, #68]	; 0x44
 8001106:	4b15      	ldr	r3, [pc, #84]	; (800115c <HAL_SPI_MspInit+0x88>)
 8001108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800110a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800110e:	613b      	str	r3, [r7, #16]
 8001110:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001112:	2300      	movs	r3, #0
 8001114:	60fb      	str	r3, [r7, #12]
 8001116:	4b11      	ldr	r3, [pc, #68]	; (800115c <HAL_SPI_MspInit+0x88>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	4a10      	ldr	r2, [pc, #64]	; (800115c <HAL_SPI_MspInit+0x88>)
 800111c:	f043 0301 	orr.w	r3, r3, #1
 8001120:	6313      	str	r3, [r2, #48]	; 0x30
 8001122:	4b0e      	ldr	r3, [pc, #56]	; (800115c <HAL_SPI_MspInit+0x88>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001126:	f003 0301 	and.w	r3, r3, #1
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800112e:	23e0      	movs	r3, #224	; 0xe0
 8001130:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001132:	2302      	movs	r3, #2
 8001134:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001136:	2300      	movs	r3, #0
 8001138:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800113a:	2303      	movs	r3, #3
 800113c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800113e:	2305      	movs	r3, #5
 8001140:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001142:	f107 0314 	add.w	r3, r7, #20
 8001146:	4619      	mov	r1, r3
 8001148:	4805      	ldr	r0, [pc, #20]	; (8001160 <HAL_SPI_MspInit+0x8c>)
 800114a:	f000 fa9b 	bl	8001684 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800114e:	bf00      	nop
 8001150:	3728      	adds	r7, #40	; 0x28
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	40013000 	.word	0x40013000
 800115c:	40023800 	.word	0x40023800
 8001160:	40020000 	.word	0x40020000

08001164 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b08a      	sub	sp, #40	; 0x28
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800116c:	f107 0314 	add.w	r3, r7, #20
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]
 8001174:	605a      	str	r2, [r3, #4]
 8001176:	609a      	str	r2, [r3, #8]
 8001178:	60da      	str	r2, [r3, #12]
 800117a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a1d      	ldr	r2, [pc, #116]	; (80011f8 <HAL_UART_MspInit+0x94>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d133      	bne.n	80011ee <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001186:	2300      	movs	r3, #0
 8001188:	613b      	str	r3, [r7, #16]
 800118a:	4b1c      	ldr	r3, [pc, #112]	; (80011fc <HAL_UART_MspInit+0x98>)
 800118c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800118e:	4a1b      	ldr	r2, [pc, #108]	; (80011fc <HAL_UART_MspInit+0x98>)
 8001190:	f043 0310 	orr.w	r3, r3, #16
 8001194:	6453      	str	r3, [r2, #68]	; 0x44
 8001196:	4b19      	ldr	r3, [pc, #100]	; (80011fc <HAL_UART_MspInit+0x98>)
 8001198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800119a:	f003 0310 	and.w	r3, r3, #16
 800119e:	613b      	str	r3, [r7, #16]
 80011a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011a2:	2300      	movs	r3, #0
 80011a4:	60fb      	str	r3, [r7, #12]
 80011a6:	4b15      	ldr	r3, [pc, #84]	; (80011fc <HAL_UART_MspInit+0x98>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011aa:	4a14      	ldr	r2, [pc, #80]	; (80011fc <HAL_UART_MspInit+0x98>)
 80011ac:	f043 0302 	orr.w	r3, r3, #2
 80011b0:	6313      	str	r3, [r2, #48]	; 0x30
 80011b2:	4b12      	ldr	r3, [pc, #72]	; (80011fc <HAL_UART_MspInit+0x98>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	f003 0302 	and.w	r3, r3, #2
 80011ba:	60fb      	str	r3, [r7, #12]
 80011bc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80011be:	23c0      	movs	r3, #192	; 0xc0
 80011c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c2:	2302      	movs	r3, #2
 80011c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c6:	2300      	movs	r3, #0
 80011c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ca:	2303      	movs	r3, #3
 80011cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80011ce:	2307      	movs	r3, #7
 80011d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011d2:	f107 0314 	add.w	r3, r7, #20
 80011d6:	4619      	mov	r1, r3
 80011d8:	4809      	ldr	r0, [pc, #36]	; (8001200 <HAL_UART_MspInit+0x9c>)
 80011da:	f000 fa53 	bl	8001684 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80011de:	2200      	movs	r2, #0
 80011e0:	2100      	movs	r1, #0
 80011e2:	2025      	movs	r0, #37	; 0x25
 80011e4:	f000 f9f5 	bl	80015d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80011e8:	2025      	movs	r0, #37	; 0x25
 80011ea:	f000 fa0e 	bl	800160a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80011ee:	bf00      	nop
 80011f0:	3728      	adds	r7, #40	; 0x28
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	40011000 	.word	0x40011000
 80011fc:	40023800 	.word	0x40023800
 8001200:	40020400 	.word	0x40020400

08001204 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001208:	bf00      	nop
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr

08001212 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001212:	b480      	push	{r7}
 8001214:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001216:	e7fe      	b.n	8001216 <HardFault_Handler+0x4>

08001218 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800121c:	e7fe      	b.n	800121c <MemManage_Handler+0x4>

0800121e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800121e:	b480      	push	{r7}
 8001220:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001222:	e7fe      	b.n	8001222 <BusFault_Handler+0x4>

08001224 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001228:	e7fe      	b.n	8001228 <UsageFault_Handler+0x4>

0800122a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800122a:	b480      	push	{r7}
 800122c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800122e:	bf00      	nop
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr

08001238 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800123c:	bf00      	nop
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr

08001246 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001246:	b480      	push	{r7}
 8001248:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800124a:	bf00      	nop
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr

08001254 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001258:	f000 f89e 	bl	8001398 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800125c:	bf00      	nop
 800125e:	bd80      	pop	{r7, pc}

08001260 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001264:	4802      	ldr	r0, [pc, #8]	; (8001270 <USART1_IRQHandler+0x10>)
 8001266:	f002 f98f 	bl	8003588 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800126a:	bf00      	nop
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	2000002c 	.word	0x2000002c

08001274 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001278:	4b08      	ldr	r3, [pc, #32]	; (800129c <SystemInit+0x28>)
 800127a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800127e:	4a07      	ldr	r2, [pc, #28]	; (800129c <SystemInit+0x28>)
 8001280:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001284:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001288:	4b04      	ldr	r3, [pc, #16]	; (800129c <SystemInit+0x28>)
 800128a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800128e:	609a      	str	r2, [r3, #8]
#endif
}
 8001290:	bf00      	nop
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	e000ed00 	.word	0xe000ed00

080012a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80012a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012d8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80012a4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80012a6:	e003      	b.n	80012b0 <LoopCopyDataInit>

080012a8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80012a8:	4b0c      	ldr	r3, [pc, #48]	; (80012dc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80012aa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80012ac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80012ae:	3104      	adds	r1, #4

080012b0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80012b0:	480b      	ldr	r0, [pc, #44]	; (80012e0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80012b2:	4b0c      	ldr	r3, [pc, #48]	; (80012e4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80012b4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80012b6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80012b8:	d3f6      	bcc.n	80012a8 <CopyDataInit>
  ldr  r2, =_sbss
 80012ba:	4a0b      	ldr	r2, [pc, #44]	; (80012e8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80012bc:	e002      	b.n	80012c4 <LoopFillZerobss>

080012be <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80012be:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80012c0:	f842 3b04 	str.w	r3, [r2], #4

080012c4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80012c4:	4b09      	ldr	r3, [pc, #36]	; (80012ec <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80012c6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80012c8:	d3f9      	bcc.n	80012be <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80012ca:	f7ff ffd3 	bl	8001274 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012ce:	f002 ff61 	bl	8004194 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012d2:	f7ff f901 	bl	80004d8 <main>
  bx  lr    
 80012d6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80012d8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80012dc:	08004270 	.word	0x08004270
  ldr  r0, =_sdata
 80012e0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80012e4:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 80012e8:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 80012ec:	20000108 	.word	0x20000108

080012f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012f0:	e7fe      	b.n	80012f0 <ADC_IRQHandler>
	...

080012f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012f8:	4b0e      	ldr	r3, [pc, #56]	; (8001334 <HAL_Init+0x40>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a0d      	ldr	r2, [pc, #52]	; (8001334 <HAL_Init+0x40>)
 80012fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001302:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001304:	4b0b      	ldr	r3, [pc, #44]	; (8001334 <HAL_Init+0x40>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a0a      	ldr	r2, [pc, #40]	; (8001334 <HAL_Init+0x40>)
 800130a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800130e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001310:	4b08      	ldr	r3, [pc, #32]	; (8001334 <HAL_Init+0x40>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a07      	ldr	r2, [pc, #28]	; (8001334 <HAL_Init+0x40>)
 8001316:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800131a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800131c:	2003      	movs	r0, #3
 800131e:	f000 f94d 	bl	80015bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001322:	2000      	movs	r0, #0
 8001324:	f000 f808 	bl	8001338 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001328:	f7ff feac 	bl	8001084 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800132c:	2300      	movs	r3, #0
}
 800132e:	4618      	mov	r0, r3
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	40023c00 	.word	0x40023c00

08001338 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001340:	4b12      	ldr	r3, [pc, #72]	; (800138c <HAL_InitTick+0x54>)
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	4b12      	ldr	r3, [pc, #72]	; (8001390 <HAL_InitTick+0x58>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	4619      	mov	r1, r3
 800134a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800134e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001352:	fbb2 f3f3 	udiv	r3, r2, r3
 8001356:	4618      	mov	r0, r3
 8001358:	f000 f965 	bl	8001626 <HAL_SYSTICK_Config>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	e00e      	b.n	8001384 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2b0f      	cmp	r3, #15
 800136a:	d80a      	bhi.n	8001382 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800136c:	2200      	movs	r2, #0
 800136e:	6879      	ldr	r1, [r7, #4]
 8001370:	f04f 30ff 	mov.w	r0, #4294967295
 8001374:	f000 f92d 	bl	80015d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001378:	4a06      	ldr	r2, [pc, #24]	; (8001394 <HAL_InitTick+0x5c>)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800137e:	2300      	movs	r3, #0
 8001380:	e000      	b.n	8001384 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
}
 8001384:	4618      	mov	r0, r3
 8001386:	3708      	adds	r7, #8
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	20000004 	.word	0x20000004
 8001390:	2000000c 	.word	0x2000000c
 8001394:	20000008 	.word	0x20000008

08001398 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800139c:	4b06      	ldr	r3, [pc, #24]	; (80013b8 <HAL_IncTick+0x20>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	461a      	mov	r2, r3
 80013a2:	4b06      	ldr	r3, [pc, #24]	; (80013bc <HAL_IncTick+0x24>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4413      	add	r3, r2
 80013a8:	4a04      	ldr	r2, [pc, #16]	; (80013bc <HAL_IncTick+0x24>)
 80013aa:	6013      	str	r3, [r2, #0]
}
 80013ac:	bf00      	nop
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	2000000c 	.word	0x2000000c
 80013bc:	20000104 	.word	0x20000104

080013c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  return uwTick;
 80013c4:	4b03      	ldr	r3, [pc, #12]	; (80013d4 <HAL_GetTick+0x14>)
 80013c6:	681b      	ldr	r3, [r3, #0]
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	20000104 	.word	0x20000104

080013d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013e0:	f7ff ffee 	bl	80013c0 <HAL_GetTick>
 80013e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013f0:	d005      	beq.n	80013fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013f2:	4b09      	ldr	r3, [pc, #36]	; (8001418 <HAL_Delay+0x40>)
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	461a      	mov	r2, r3
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	4413      	add	r3, r2
 80013fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80013fe:	bf00      	nop
 8001400:	f7ff ffde 	bl	80013c0 <HAL_GetTick>
 8001404:	4602      	mov	r2, r0
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	68fa      	ldr	r2, [r7, #12]
 800140c:	429a      	cmp	r2, r3
 800140e:	d8f7      	bhi.n	8001400 <HAL_Delay+0x28>
  {
  }
}
 8001410:	bf00      	nop
 8001412:	3710      	adds	r7, #16
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	2000000c 	.word	0x2000000c

0800141c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800141c:	b480      	push	{r7}
 800141e:	b085      	sub	sp, #20
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	f003 0307 	and.w	r3, r3, #7
 800142a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800142c:	4b0c      	ldr	r3, [pc, #48]	; (8001460 <__NVIC_SetPriorityGrouping+0x44>)
 800142e:	68db      	ldr	r3, [r3, #12]
 8001430:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001432:	68ba      	ldr	r2, [r7, #8]
 8001434:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001438:	4013      	ands	r3, r2
 800143a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001444:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001448:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800144c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800144e:	4a04      	ldr	r2, [pc, #16]	; (8001460 <__NVIC_SetPriorityGrouping+0x44>)
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	60d3      	str	r3, [r2, #12]
}
 8001454:	bf00      	nop
 8001456:	3714      	adds	r7, #20
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr
 8001460:	e000ed00 	.word	0xe000ed00

08001464 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001468:	4b04      	ldr	r3, [pc, #16]	; (800147c <__NVIC_GetPriorityGrouping+0x18>)
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	0a1b      	lsrs	r3, r3, #8
 800146e:	f003 0307 	and.w	r3, r3, #7
}
 8001472:	4618      	mov	r0, r3
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr
 800147c:	e000ed00 	.word	0xe000ed00

08001480 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	4603      	mov	r3, r0
 8001488:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800148a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800148e:	2b00      	cmp	r3, #0
 8001490:	db0b      	blt.n	80014aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001492:	79fb      	ldrb	r3, [r7, #7]
 8001494:	f003 021f 	and.w	r2, r3, #31
 8001498:	4907      	ldr	r1, [pc, #28]	; (80014b8 <__NVIC_EnableIRQ+0x38>)
 800149a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800149e:	095b      	lsrs	r3, r3, #5
 80014a0:	2001      	movs	r0, #1
 80014a2:	fa00 f202 	lsl.w	r2, r0, r2
 80014a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014aa:	bf00      	nop
 80014ac:	370c      	adds	r7, #12
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	e000e100 	.word	0xe000e100

080014bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	4603      	mov	r3, r0
 80014c4:	6039      	str	r1, [r7, #0]
 80014c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	db0a      	blt.n	80014e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	b2da      	uxtb	r2, r3
 80014d4:	490c      	ldr	r1, [pc, #48]	; (8001508 <__NVIC_SetPriority+0x4c>)
 80014d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014da:	0112      	lsls	r2, r2, #4
 80014dc:	b2d2      	uxtb	r2, r2
 80014de:	440b      	add	r3, r1
 80014e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014e4:	e00a      	b.n	80014fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	b2da      	uxtb	r2, r3
 80014ea:	4908      	ldr	r1, [pc, #32]	; (800150c <__NVIC_SetPriority+0x50>)
 80014ec:	79fb      	ldrb	r3, [r7, #7]
 80014ee:	f003 030f 	and.w	r3, r3, #15
 80014f2:	3b04      	subs	r3, #4
 80014f4:	0112      	lsls	r2, r2, #4
 80014f6:	b2d2      	uxtb	r2, r2
 80014f8:	440b      	add	r3, r1
 80014fa:	761a      	strb	r2, [r3, #24]
}
 80014fc:	bf00      	nop
 80014fe:	370c      	adds	r7, #12
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr
 8001508:	e000e100 	.word	0xe000e100
 800150c:	e000ed00 	.word	0xe000ed00

08001510 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001510:	b480      	push	{r7}
 8001512:	b089      	sub	sp, #36	; 0x24
 8001514:	af00      	add	r7, sp, #0
 8001516:	60f8      	str	r0, [r7, #12]
 8001518:	60b9      	str	r1, [r7, #8]
 800151a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	f003 0307 	and.w	r3, r3, #7
 8001522:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	f1c3 0307 	rsb	r3, r3, #7
 800152a:	2b04      	cmp	r3, #4
 800152c:	bf28      	it	cs
 800152e:	2304      	movcs	r3, #4
 8001530:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	3304      	adds	r3, #4
 8001536:	2b06      	cmp	r3, #6
 8001538:	d902      	bls.n	8001540 <NVIC_EncodePriority+0x30>
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	3b03      	subs	r3, #3
 800153e:	e000      	b.n	8001542 <NVIC_EncodePriority+0x32>
 8001540:	2300      	movs	r3, #0
 8001542:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001544:	f04f 32ff 	mov.w	r2, #4294967295
 8001548:	69bb      	ldr	r3, [r7, #24]
 800154a:	fa02 f303 	lsl.w	r3, r2, r3
 800154e:	43da      	mvns	r2, r3
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	401a      	ands	r2, r3
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001558:	f04f 31ff 	mov.w	r1, #4294967295
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	fa01 f303 	lsl.w	r3, r1, r3
 8001562:	43d9      	mvns	r1, r3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001568:	4313      	orrs	r3, r2
         );
}
 800156a:	4618      	mov	r0, r3
 800156c:	3724      	adds	r7, #36	; 0x24
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
	...

08001578 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	3b01      	subs	r3, #1
 8001584:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001588:	d301      	bcc.n	800158e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800158a:	2301      	movs	r3, #1
 800158c:	e00f      	b.n	80015ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800158e:	4a0a      	ldr	r2, [pc, #40]	; (80015b8 <SysTick_Config+0x40>)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	3b01      	subs	r3, #1
 8001594:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001596:	210f      	movs	r1, #15
 8001598:	f04f 30ff 	mov.w	r0, #4294967295
 800159c:	f7ff ff8e 	bl	80014bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015a0:	4b05      	ldr	r3, [pc, #20]	; (80015b8 <SysTick_Config+0x40>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015a6:	4b04      	ldr	r3, [pc, #16]	; (80015b8 <SysTick_Config+0x40>)
 80015a8:	2207      	movs	r2, #7
 80015aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015ac:	2300      	movs	r3, #0
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3708      	adds	r7, #8
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	e000e010 	.word	0xe000e010

080015bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	f7ff ff29 	bl	800141c <__NVIC_SetPriorityGrouping>
}
 80015ca:	bf00      	nop
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b086      	sub	sp, #24
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	4603      	mov	r3, r0
 80015da:	60b9      	str	r1, [r7, #8]
 80015dc:	607a      	str	r2, [r7, #4]
 80015de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015e0:	2300      	movs	r3, #0
 80015e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015e4:	f7ff ff3e 	bl	8001464 <__NVIC_GetPriorityGrouping>
 80015e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015ea:	687a      	ldr	r2, [r7, #4]
 80015ec:	68b9      	ldr	r1, [r7, #8]
 80015ee:	6978      	ldr	r0, [r7, #20]
 80015f0:	f7ff ff8e 	bl	8001510 <NVIC_EncodePriority>
 80015f4:	4602      	mov	r2, r0
 80015f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015fa:	4611      	mov	r1, r2
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7ff ff5d 	bl	80014bc <__NVIC_SetPriority>
}
 8001602:	bf00      	nop
 8001604:	3718      	adds	r7, #24
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}

0800160a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800160a:	b580      	push	{r7, lr}
 800160c:	b082      	sub	sp, #8
 800160e:	af00      	add	r7, sp, #0
 8001610:	4603      	mov	r3, r0
 8001612:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001614:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001618:	4618      	mov	r0, r3
 800161a:	f7ff ff31 	bl	8001480 <__NVIC_EnableIRQ>
}
 800161e:	bf00      	nop
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}

08001626 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001626:	b580      	push	{r7, lr}
 8001628:	b082      	sub	sp, #8
 800162a:	af00      	add	r7, sp, #0
 800162c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	f7ff ffa2 	bl	8001578 <SysTick_Config>
 8001634:	4603      	mov	r3, r0
}
 8001636:	4618      	mov	r0, r3
 8001638:	3708      	adds	r7, #8
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}

0800163e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800163e:	b480      	push	{r7}
 8001640:	b083      	sub	sp, #12
 8001642:	af00      	add	r7, sp, #0
 8001644:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800164c:	b2db      	uxtb	r3, r3
 800164e:	2b02      	cmp	r3, #2
 8001650:	d004      	beq.n	800165c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2280      	movs	r2, #128	; 0x80
 8001656:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001658:	2301      	movs	r3, #1
 800165a:	e00c      	b.n	8001676 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2205      	movs	r2, #5
 8001660:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f022 0201 	bic.w	r2, r2, #1
 8001672:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001674:	2300      	movs	r3, #0
}
 8001676:	4618      	mov	r0, r3
 8001678:	370c      	adds	r7, #12
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
	...

08001684 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001684:	b480      	push	{r7}
 8001686:	b089      	sub	sp, #36	; 0x24
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
 800168c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800168e:	2300      	movs	r3, #0
 8001690:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001692:	2300      	movs	r3, #0
 8001694:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001696:	2300      	movs	r3, #0
 8001698:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800169a:	2300      	movs	r3, #0
 800169c:	61fb      	str	r3, [r7, #28]
 800169e:	e16b      	b.n	8001978 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80016a0:	2201      	movs	r2, #1
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	fa02 f303 	lsl.w	r3, r2, r3
 80016a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	697a      	ldr	r2, [r7, #20]
 80016b0:	4013      	ands	r3, r2
 80016b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016b4:	693a      	ldr	r2, [r7, #16]
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	429a      	cmp	r2, r3
 80016ba:	f040 815a 	bne.w	8001972 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d00b      	beq.n	80016de <HAL_GPIO_Init+0x5a>
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d007      	beq.n	80016de <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016d2:	2b11      	cmp	r3, #17
 80016d4:	d003      	beq.n	80016de <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	2b12      	cmp	r3, #18
 80016dc:	d130      	bne.n	8001740 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	005b      	lsls	r3, r3, #1
 80016e8:	2203      	movs	r2, #3
 80016ea:	fa02 f303 	lsl.w	r3, r2, r3
 80016ee:	43db      	mvns	r3, r3
 80016f0:	69ba      	ldr	r2, [r7, #24]
 80016f2:	4013      	ands	r3, r2
 80016f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	68da      	ldr	r2, [r3, #12]
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	005b      	lsls	r3, r3, #1
 80016fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001702:	69ba      	ldr	r2, [r7, #24]
 8001704:	4313      	orrs	r3, r2
 8001706:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	69ba      	ldr	r2, [r7, #24]
 800170c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001714:	2201      	movs	r2, #1
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	fa02 f303 	lsl.w	r3, r2, r3
 800171c:	43db      	mvns	r3, r3
 800171e:	69ba      	ldr	r2, [r7, #24]
 8001720:	4013      	ands	r3, r2
 8001722:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	091b      	lsrs	r3, r3, #4
 800172a:	f003 0201 	and.w	r2, r3, #1
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	fa02 f303 	lsl.w	r3, r2, r3
 8001734:	69ba      	ldr	r2, [r7, #24]
 8001736:	4313      	orrs	r3, r2
 8001738:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	69ba      	ldr	r2, [r7, #24]
 800173e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	005b      	lsls	r3, r3, #1
 800174a:	2203      	movs	r2, #3
 800174c:	fa02 f303 	lsl.w	r3, r2, r3
 8001750:	43db      	mvns	r3, r3
 8001752:	69ba      	ldr	r2, [r7, #24]
 8001754:	4013      	ands	r3, r2
 8001756:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	689a      	ldr	r2, [r3, #8]
 800175c:	69fb      	ldr	r3, [r7, #28]
 800175e:	005b      	lsls	r3, r3, #1
 8001760:	fa02 f303 	lsl.w	r3, r2, r3
 8001764:	69ba      	ldr	r2, [r7, #24]
 8001766:	4313      	orrs	r3, r2
 8001768:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	69ba      	ldr	r2, [r7, #24]
 800176e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	2b02      	cmp	r3, #2
 8001776:	d003      	beq.n	8001780 <HAL_GPIO_Init+0xfc>
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	2b12      	cmp	r3, #18
 800177e:	d123      	bne.n	80017c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001780:	69fb      	ldr	r3, [r7, #28]
 8001782:	08da      	lsrs	r2, r3, #3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	3208      	adds	r2, #8
 8001788:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800178c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	f003 0307 	and.w	r3, r3, #7
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	220f      	movs	r2, #15
 8001798:	fa02 f303 	lsl.w	r3, r2, r3
 800179c:	43db      	mvns	r3, r3
 800179e:	69ba      	ldr	r2, [r7, #24]
 80017a0:	4013      	ands	r3, r2
 80017a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	691a      	ldr	r2, [r3, #16]
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	f003 0307 	and.w	r3, r3, #7
 80017ae:	009b      	lsls	r3, r3, #2
 80017b0:	fa02 f303 	lsl.w	r3, r2, r3
 80017b4:	69ba      	ldr	r2, [r7, #24]
 80017b6:	4313      	orrs	r3, r2
 80017b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	08da      	lsrs	r2, r3, #3
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	3208      	adds	r2, #8
 80017c2:	69b9      	ldr	r1, [r7, #24]
 80017c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	005b      	lsls	r3, r3, #1
 80017d2:	2203      	movs	r2, #3
 80017d4:	fa02 f303 	lsl.w	r3, r2, r3
 80017d8:	43db      	mvns	r3, r3
 80017da:	69ba      	ldr	r2, [r7, #24]
 80017dc:	4013      	ands	r3, r2
 80017de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	f003 0203 	and.w	r2, r3, #3
 80017e8:	69fb      	ldr	r3, [r7, #28]
 80017ea:	005b      	lsls	r3, r3, #1
 80017ec:	fa02 f303 	lsl.w	r3, r2, r3
 80017f0:	69ba      	ldr	r2, [r7, #24]
 80017f2:	4313      	orrs	r3, r2
 80017f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	69ba      	ldr	r2, [r7, #24]
 80017fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001804:	2b00      	cmp	r3, #0
 8001806:	f000 80b4 	beq.w	8001972 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800180a:	2300      	movs	r3, #0
 800180c:	60fb      	str	r3, [r7, #12]
 800180e:	4b5f      	ldr	r3, [pc, #380]	; (800198c <HAL_GPIO_Init+0x308>)
 8001810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001812:	4a5e      	ldr	r2, [pc, #376]	; (800198c <HAL_GPIO_Init+0x308>)
 8001814:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001818:	6453      	str	r3, [r2, #68]	; 0x44
 800181a:	4b5c      	ldr	r3, [pc, #368]	; (800198c <HAL_GPIO_Init+0x308>)
 800181c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800181e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001822:	60fb      	str	r3, [r7, #12]
 8001824:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001826:	4a5a      	ldr	r2, [pc, #360]	; (8001990 <HAL_GPIO_Init+0x30c>)
 8001828:	69fb      	ldr	r3, [r7, #28]
 800182a:	089b      	lsrs	r3, r3, #2
 800182c:	3302      	adds	r3, #2
 800182e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001832:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001834:	69fb      	ldr	r3, [r7, #28]
 8001836:	f003 0303 	and.w	r3, r3, #3
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	220f      	movs	r2, #15
 800183e:	fa02 f303 	lsl.w	r3, r2, r3
 8001842:	43db      	mvns	r3, r3
 8001844:	69ba      	ldr	r2, [r7, #24]
 8001846:	4013      	ands	r3, r2
 8001848:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4a51      	ldr	r2, [pc, #324]	; (8001994 <HAL_GPIO_Init+0x310>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d02b      	beq.n	80018aa <HAL_GPIO_Init+0x226>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4a50      	ldr	r2, [pc, #320]	; (8001998 <HAL_GPIO_Init+0x314>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d025      	beq.n	80018a6 <HAL_GPIO_Init+0x222>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4a4f      	ldr	r2, [pc, #316]	; (800199c <HAL_GPIO_Init+0x318>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d01f      	beq.n	80018a2 <HAL_GPIO_Init+0x21e>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4a4e      	ldr	r2, [pc, #312]	; (80019a0 <HAL_GPIO_Init+0x31c>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d019      	beq.n	800189e <HAL_GPIO_Init+0x21a>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4a4d      	ldr	r2, [pc, #308]	; (80019a4 <HAL_GPIO_Init+0x320>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d013      	beq.n	800189a <HAL_GPIO_Init+0x216>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4a4c      	ldr	r2, [pc, #304]	; (80019a8 <HAL_GPIO_Init+0x324>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d00d      	beq.n	8001896 <HAL_GPIO_Init+0x212>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4a4b      	ldr	r2, [pc, #300]	; (80019ac <HAL_GPIO_Init+0x328>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d007      	beq.n	8001892 <HAL_GPIO_Init+0x20e>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4a4a      	ldr	r2, [pc, #296]	; (80019b0 <HAL_GPIO_Init+0x32c>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d101      	bne.n	800188e <HAL_GPIO_Init+0x20a>
 800188a:	2307      	movs	r3, #7
 800188c:	e00e      	b.n	80018ac <HAL_GPIO_Init+0x228>
 800188e:	2308      	movs	r3, #8
 8001890:	e00c      	b.n	80018ac <HAL_GPIO_Init+0x228>
 8001892:	2306      	movs	r3, #6
 8001894:	e00a      	b.n	80018ac <HAL_GPIO_Init+0x228>
 8001896:	2305      	movs	r3, #5
 8001898:	e008      	b.n	80018ac <HAL_GPIO_Init+0x228>
 800189a:	2304      	movs	r3, #4
 800189c:	e006      	b.n	80018ac <HAL_GPIO_Init+0x228>
 800189e:	2303      	movs	r3, #3
 80018a0:	e004      	b.n	80018ac <HAL_GPIO_Init+0x228>
 80018a2:	2302      	movs	r3, #2
 80018a4:	e002      	b.n	80018ac <HAL_GPIO_Init+0x228>
 80018a6:	2301      	movs	r3, #1
 80018a8:	e000      	b.n	80018ac <HAL_GPIO_Init+0x228>
 80018aa:	2300      	movs	r3, #0
 80018ac:	69fa      	ldr	r2, [r7, #28]
 80018ae:	f002 0203 	and.w	r2, r2, #3
 80018b2:	0092      	lsls	r2, r2, #2
 80018b4:	4093      	lsls	r3, r2
 80018b6:	69ba      	ldr	r2, [r7, #24]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018bc:	4934      	ldr	r1, [pc, #208]	; (8001990 <HAL_GPIO_Init+0x30c>)
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	089b      	lsrs	r3, r3, #2
 80018c2:	3302      	adds	r3, #2
 80018c4:	69ba      	ldr	r2, [r7, #24]
 80018c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018ca:	4b3a      	ldr	r3, [pc, #232]	; (80019b4 <HAL_GPIO_Init+0x330>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	43db      	mvns	r3, r3
 80018d4:	69ba      	ldr	r2, [r7, #24]
 80018d6:	4013      	ands	r3, r2
 80018d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d003      	beq.n	80018ee <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80018e6:	69ba      	ldr	r2, [r7, #24]
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	4313      	orrs	r3, r2
 80018ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80018ee:	4a31      	ldr	r2, [pc, #196]	; (80019b4 <HAL_GPIO_Init+0x330>)
 80018f0:	69bb      	ldr	r3, [r7, #24]
 80018f2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80018f4:	4b2f      	ldr	r3, [pc, #188]	; (80019b4 <HAL_GPIO_Init+0x330>)
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	43db      	mvns	r3, r3
 80018fe:	69ba      	ldr	r2, [r7, #24]
 8001900:	4013      	ands	r3, r2
 8001902:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800190c:	2b00      	cmp	r3, #0
 800190e:	d003      	beq.n	8001918 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001910:	69ba      	ldr	r2, [r7, #24]
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	4313      	orrs	r3, r2
 8001916:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001918:	4a26      	ldr	r2, [pc, #152]	; (80019b4 <HAL_GPIO_Init+0x330>)
 800191a:	69bb      	ldr	r3, [r7, #24]
 800191c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800191e:	4b25      	ldr	r3, [pc, #148]	; (80019b4 <HAL_GPIO_Init+0x330>)
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	43db      	mvns	r3, r3
 8001928:	69ba      	ldr	r2, [r7, #24]
 800192a:	4013      	ands	r3, r2
 800192c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001936:	2b00      	cmp	r3, #0
 8001938:	d003      	beq.n	8001942 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800193a:	69ba      	ldr	r2, [r7, #24]
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	4313      	orrs	r3, r2
 8001940:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001942:	4a1c      	ldr	r2, [pc, #112]	; (80019b4 <HAL_GPIO_Init+0x330>)
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001948:	4b1a      	ldr	r3, [pc, #104]	; (80019b4 <HAL_GPIO_Init+0x330>)
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	43db      	mvns	r3, r3
 8001952:	69ba      	ldr	r2, [r7, #24]
 8001954:	4013      	ands	r3, r2
 8001956:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001960:	2b00      	cmp	r3, #0
 8001962:	d003      	beq.n	800196c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001964:	69ba      	ldr	r2, [r7, #24]
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	4313      	orrs	r3, r2
 800196a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800196c:	4a11      	ldr	r2, [pc, #68]	; (80019b4 <HAL_GPIO_Init+0x330>)
 800196e:	69bb      	ldr	r3, [r7, #24]
 8001970:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	3301      	adds	r3, #1
 8001976:	61fb      	str	r3, [r7, #28]
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	2b0f      	cmp	r3, #15
 800197c:	f67f ae90 	bls.w	80016a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001980:	bf00      	nop
 8001982:	3724      	adds	r7, #36	; 0x24
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr
 800198c:	40023800 	.word	0x40023800
 8001990:	40013800 	.word	0x40013800
 8001994:	40020000 	.word	0x40020000
 8001998:	40020400 	.word	0x40020400
 800199c:	40020800 	.word	0x40020800
 80019a0:	40020c00 	.word	0x40020c00
 80019a4:	40021000 	.word	0x40021000
 80019a8:	40021400 	.word	0x40021400
 80019ac:	40021800 	.word	0x40021800
 80019b0:	40021c00 	.word	0x40021c00
 80019b4:	40013c00 	.word	0x40013c00

080019b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	460b      	mov	r3, r1
 80019c2:	807b      	strh	r3, [r7, #2]
 80019c4:	4613      	mov	r3, r2
 80019c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019c8:	787b      	ldrb	r3, [r7, #1]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d003      	beq.n	80019d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019ce:	887a      	ldrh	r2, [r7, #2]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80019d4:	e003      	b.n	80019de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80019d6:	887b      	ldrh	r3, [r7, #2]
 80019d8:	041a      	lsls	r2, r3, #16
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	619a      	str	r2, [r3, #24]
}
 80019de:	bf00      	nop
 80019e0:	370c      	adds	r7, #12
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
	...

080019ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b086      	sub	sp, #24
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d101      	bne.n	80019fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e25b      	b.n	8001eb6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 0301 	and.w	r3, r3, #1
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d075      	beq.n	8001af6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a0a:	4ba3      	ldr	r3, [pc, #652]	; (8001c98 <HAL_RCC_OscConfig+0x2ac>)
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	f003 030c 	and.w	r3, r3, #12
 8001a12:	2b04      	cmp	r3, #4
 8001a14:	d00c      	beq.n	8001a30 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a16:	4ba0      	ldr	r3, [pc, #640]	; (8001c98 <HAL_RCC_OscConfig+0x2ac>)
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a1e:	2b08      	cmp	r3, #8
 8001a20:	d112      	bne.n	8001a48 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a22:	4b9d      	ldr	r3, [pc, #628]	; (8001c98 <HAL_RCC_OscConfig+0x2ac>)
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a2e:	d10b      	bne.n	8001a48 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a30:	4b99      	ldr	r3, [pc, #612]	; (8001c98 <HAL_RCC_OscConfig+0x2ac>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d05b      	beq.n	8001af4 <HAL_RCC_OscConfig+0x108>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d157      	bne.n	8001af4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	e236      	b.n	8001eb6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a50:	d106      	bne.n	8001a60 <HAL_RCC_OscConfig+0x74>
 8001a52:	4b91      	ldr	r3, [pc, #580]	; (8001c98 <HAL_RCC_OscConfig+0x2ac>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a90      	ldr	r2, [pc, #576]	; (8001c98 <HAL_RCC_OscConfig+0x2ac>)
 8001a58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a5c:	6013      	str	r3, [r2, #0]
 8001a5e:	e01d      	b.n	8001a9c <HAL_RCC_OscConfig+0xb0>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a68:	d10c      	bne.n	8001a84 <HAL_RCC_OscConfig+0x98>
 8001a6a:	4b8b      	ldr	r3, [pc, #556]	; (8001c98 <HAL_RCC_OscConfig+0x2ac>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a8a      	ldr	r2, [pc, #552]	; (8001c98 <HAL_RCC_OscConfig+0x2ac>)
 8001a70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a74:	6013      	str	r3, [r2, #0]
 8001a76:	4b88      	ldr	r3, [pc, #544]	; (8001c98 <HAL_RCC_OscConfig+0x2ac>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a87      	ldr	r2, [pc, #540]	; (8001c98 <HAL_RCC_OscConfig+0x2ac>)
 8001a7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a80:	6013      	str	r3, [r2, #0]
 8001a82:	e00b      	b.n	8001a9c <HAL_RCC_OscConfig+0xb0>
 8001a84:	4b84      	ldr	r3, [pc, #528]	; (8001c98 <HAL_RCC_OscConfig+0x2ac>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a83      	ldr	r2, [pc, #524]	; (8001c98 <HAL_RCC_OscConfig+0x2ac>)
 8001a8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a8e:	6013      	str	r3, [r2, #0]
 8001a90:	4b81      	ldr	r3, [pc, #516]	; (8001c98 <HAL_RCC_OscConfig+0x2ac>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a80      	ldr	r2, [pc, #512]	; (8001c98 <HAL_RCC_OscConfig+0x2ac>)
 8001a96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d013      	beq.n	8001acc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa4:	f7ff fc8c 	bl	80013c0 <HAL_GetTick>
 8001aa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aaa:	e008      	b.n	8001abe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001aac:	f7ff fc88 	bl	80013c0 <HAL_GetTick>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	2b64      	cmp	r3, #100	; 0x64
 8001ab8:	d901      	bls.n	8001abe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001aba:	2303      	movs	r3, #3
 8001abc:	e1fb      	b.n	8001eb6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001abe:	4b76      	ldr	r3, [pc, #472]	; (8001c98 <HAL_RCC_OscConfig+0x2ac>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d0f0      	beq.n	8001aac <HAL_RCC_OscConfig+0xc0>
 8001aca:	e014      	b.n	8001af6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001acc:	f7ff fc78 	bl	80013c0 <HAL_GetTick>
 8001ad0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ad2:	e008      	b.n	8001ae6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ad4:	f7ff fc74 	bl	80013c0 <HAL_GetTick>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	2b64      	cmp	r3, #100	; 0x64
 8001ae0:	d901      	bls.n	8001ae6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	e1e7      	b.n	8001eb6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ae6:	4b6c      	ldr	r3, [pc, #432]	; (8001c98 <HAL_RCC_OscConfig+0x2ac>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d1f0      	bne.n	8001ad4 <HAL_RCC_OscConfig+0xe8>
 8001af2:	e000      	b.n	8001af6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001af4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 0302 	and.w	r3, r3, #2
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d063      	beq.n	8001bca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b02:	4b65      	ldr	r3, [pc, #404]	; (8001c98 <HAL_RCC_OscConfig+0x2ac>)
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	f003 030c 	and.w	r3, r3, #12
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d00b      	beq.n	8001b26 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b0e:	4b62      	ldr	r3, [pc, #392]	; (8001c98 <HAL_RCC_OscConfig+0x2ac>)
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b16:	2b08      	cmp	r3, #8
 8001b18:	d11c      	bne.n	8001b54 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b1a:	4b5f      	ldr	r3, [pc, #380]	; (8001c98 <HAL_RCC_OscConfig+0x2ac>)
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d116      	bne.n	8001b54 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b26:	4b5c      	ldr	r3, [pc, #368]	; (8001c98 <HAL_RCC_OscConfig+0x2ac>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 0302 	and.w	r3, r3, #2
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d005      	beq.n	8001b3e <HAL_RCC_OscConfig+0x152>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	68db      	ldr	r3, [r3, #12]
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d001      	beq.n	8001b3e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e1bb      	b.n	8001eb6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b3e:	4b56      	ldr	r3, [pc, #344]	; (8001c98 <HAL_RCC_OscConfig+0x2ac>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	691b      	ldr	r3, [r3, #16]
 8001b4a:	00db      	lsls	r3, r3, #3
 8001b4c:	4952      	ldr	r1, [pc, #328]	; (8001c98 <HAL_RCC_OscConfig+0x2ac>)
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b52:	e03a      	b.n	8001bca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d020      	beq.n	8001b9e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b5c:	4b4f      	ldr	r3, [pc, #316]	; (8001c9c <HAL_RCC_OscConfig+0x2b0>)
 8001b5e:	2201      	movs	r2, #1
 8001b60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b62:	f7ff fc2d 	bl	80013c0 <HAL_GetTick>
 8001b66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b68:	e008      	b.n	8001b7c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b6a:	f7ff fc29 	bl	80013c0 <HAL_GetTick>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d901      	bls.n	8001b7c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001b78:	2303      	movs	r3, #3
 8001b7a:	e19c      	b.n	8001eb6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b7c:	4b46      	ldr	r3, [pc, #280]	; (8001c98 <HAL_RCC_OscConfig+0x2ac>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 0302 	and.w	r3, r3, #2
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d0f0      	beq.n	8001b6a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b88:	4b43      	ldr	r3, [pc, #268]	; (8001c98 <HAL_RCC_OscConfig+0x2ac>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	691b      	ldr	r3, [r3, #16]
 8001b94:	00db      	lsls	r3, r3, #3
 8001b96:	4940      	ldr	r1, [pc, #256]	; (8001c98 <HAL_RCC_OscConfig+0x2ac>)
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	600b      	str	r3, [r1, #0]
 8001b9c:	e015      	b.n	8001bca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b9e:	4b3f      	ldr	r3, [pc, #252]	; (8001c9c <HAL_RCC_OscConfig+0x2b0>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ba4:	f7ff fc0c 	bl	80013c0 <HAL_GetTick>
 8001ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001baa:	e008      	b.n	8001bbe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bac:	f7ff fc08 	bl	80013c0 <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d901      	bls.n	8001bbe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e17b      	b.n	8001eb6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bbe:	4b36      	ldr	r3, [pc, #216]	; (8001c98 <HAL_RCC_OscConfig+0x2ac>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 0302 	and.w	r3, r3, #2
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d1f0      	bne.n	8001bac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 0308 	and.w	r3, r3, #8
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d030      	beq.n	8001c38 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	695b      	ldr	r3, [r3, #20]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d016      	beq.n	8001c0c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bde:	4b30      	ldr	r3, [pc, #192]	; (8001ca0 <HAL_RCC_OscConfig+0x2b4>)
 8001be0:	2201      	movs	r2, #1
 8001be2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001be4:	f7ff fbec 	bl	80013c0 <HAL_GetTick>
 8001be8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bea:	e008      	b.n	8001bfe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bec:	f7ff fbe8 	bl	80013c0 <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d901      	bls.n	8001bfe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e15b      	b.n	8001eb6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bfe:	4b26      	ldr	r3, [pc, #152]	; (8001c98 <HAL_RCC_OscConfig+0x2ac>)
 8001c00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c02:	f003 0302 	and.w	r3, r3, #2
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d0f0      	beq.n	8001bec <HAL_RCC_OscConfig+0x200>
 8001c0a:	e015      	b.n	8001c38 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c0c:	4b24      	ldr	r3, [pc, #144]	; (8001ca0 <HAL_RCC_OscConfig+0x2b4>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c12:	f7ff fbd5 	bl	80013c0 <HAL_GetTick>
 8001c16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c18:	e008      	b.n	8001c2c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c1a:	f7ff fbd1 	bl	80013c0 <HAL_GetTick>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	2b02      	cmp	r3, #2
 8001c26:	d901      	bls.n	8001c2c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	e144      	b.n	8001eb6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c2c:	4b1a      	ldr	r3, [pc, #104]	; (8001c98 <HAL_RCC_OscConfig+0x2ac>)
 8001c2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c30:	f003 0302 	and.w	r3, r3, #2
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d1f0      	bne.n	8001c1a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 0304 	and.w	r3, r3, #4
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	f000 80a0 	beq.w	8001d86 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c46:	2300      	movs	r3, #0
 8001c48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c4a:	4b13      	ldr	r3, [pc, #76]	; (8001c98 <HAL_RCC_OscConfig+0x2ac>)
 8001c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d10f      	bne.n	8001c76 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c56:	2300      	movs	r3, #0
 8001c58:	60bb      	str	r3, [r7, #8]
 8001c5a:	4b0f      	ldr	r3, [pc, #60]	; (8001c98 <HAL_RCC_OscConfig+0x2ac>)
 8001c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5e:	4a0e      	ldr	r2, [pc, #56]	; (8001c98 <HAL_RCC_OscConfig+0x2ac>)
 8001c60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c64:	6413      	str	r3, [r2, #64]	; 0x40
 8001c66:	4b0c      	ldr	r3, [pc, #48]	; (8001c98 <HAL_RCC_OscConfig+0x2ac>)
 8001c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c6e:	60bb      	str	r3, [r7, #8]
 8001c70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c72:	2301      	movs	r3, #1
 8001c74:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c76:	4b0b      	ldr	r3, [pc, #44]	; (8001ca4 <HAL_RCC_OscConfig+0x2b8>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d121      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c82:	4b08      	ldr	r3, [pc, #32]	; (8001ca4 <HAL_RCC_OscConfig+0x2b8>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a07      	ldr	r2, [pc, #28]	; (8001ca4 <HAL_RCC_OscConfig+0x2b8>)
 8001c88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c8e:	f7ff fb97 	bl	80013c0 <HAL_GetTick>
 8001c92:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c94:	e011      	b.n	8001cba <HAL_RCC_OscConfig+0x2ce>
 8001c96:	bf00      	nop
 8001c98:	40023800 	.word	0x40023800
 8001c9c:	42470000 	.word	0x42470000
 8001ca0:	42470e80 	.word	0x42470e80
 8001ca4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ca8:	f7ff fb8a 	bl	80013c0 <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d901      	bls.n	8001cba <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e0fd      	b.n	8001eb6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cba:	4b81      	ldr	r3, [pc, #516]	; (8001ec0 <HAL_RCC_OscConfig+0x4d4>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d0f0      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d106      	bne.n	8001cdc <HAL_RCC_OscConfig+0x2f0>
 8001cce:	4b7d      	ldr	r3, [pc, #500]	; (8001ec4 <HAL_RCC_OscConfig+0x4d8>)
 8001cd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cd2:	4a7c      	ldr	r2, [pc, #496]	; (8001ec4 <HAL_RCC_OscConfig+0x4d8>)
 8001cd4:	f043 0301 	orr.w	r3, r3, #1
 8001cd8:	6713      	str	r3, [r2, #112]	; 0x70
 8001cda:	e01c      	b.n	8001d16 <HAL_RCC_OscConfig+0x32a>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	2b05      	cmp	r3, #5
 8001ce2:	d10c      	bne.n	8001cfe <HAL_RCC_OscConfig+0x312>
 8001ce4:	4b77      	ldr	r3, [pc, #476]	; (8001ec4 <HAL_RCC_OscConfig+0x4d8>)
 8001ce6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ce8:	4a76      	ldr	r2, [pc, #472]	; (8001ec4 <HAL_RCC_OscConfig+0x4d8>)
 8001cea:	f043 0304 	orr.w	r3, r3, #4
 8001cee:	6713      	str	r3, [r2, #112]	; 0x70
 8001cf0:	4b74      	ldr	r3, [pc, #464]	; (8001ec4 <HAL_RCC_OscConfig+0x4d8>)
 8001cf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cf4:	4a73      	ldr	r2, [pc, #460]	; (8001ec4 <HAL_RCC_OscConfig+0x4d8>)
 8001cf6:	f043 0301 	orr.w	r3, r3, #1
 8001cfa:	6713      	str	r3, [r2, #112]	; 0x70
 8001cfc:	e00b      	b.n	8001d16 <HAL_RCC_OscConfig+0x32a>
 8001cfe:	4b71      	ldr	r3, [pc, #452]	; (8001ec4 <HAL_RCC_OscConfig+0x4d8>)
 8001d00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d02:	4a70      	ldr	r2, [pc, #448]	; (8001ec4 <HAL_RCC_OscConfig+0x4d8>)
 8001d04:	f023 0301 	bic.w	r3, r3, #1
 8001d08:	6713      	str	r3, [r2, #112]	; 0x70
 8001d0a:	4b6e      	ldr	r3, [pc, #440]	; (8001ec4 <HAL_RCC_OscConfig+0x4d8>)
 8001d0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d0e:	4a6d      	ldr	r2, [pc, #436]	; (8001ec4 <HAL_RCC_OscConfig+0x4d8>)
 8001d10:	f023 0304 	bic.w	r3, r3, #4
 8001d14:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d015      	beq.n	8001d4a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d1e:	f7ff fb4f 	bl	80013c0 <HAL_GetTick>
 8001d22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d24:	e00a      	b.n	8001d3c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d26:	f7ff fb4b 	bl	80013c0 <HAL_GetTick>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	1ad3      	subs	r3, r2, r3
 8001d30:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d901      	bls.n	8001d3c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	e0bc      	b.n	8001eb6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d3c:	4b61      	ldr	r3, [pc, #388]	; (8001ec4 <HAL_RCC_OscConfig+0x4d8>)
 8001d3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d40:	f003 0302 	and.w	r3, r3, #2
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d0ee      	beq.n	8001d26 <HAL_RCC_OscConfig+0x33a>
 8001d48:	e014      	b.n	8001d74 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d4a:	f7ff fb39 	bl	80013c0 <HAL_GetTick>
 8001d4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d50:	e00a      	b.n	8001d68 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d52:	f7ff fb35 	bl	80013c0 <HAL_GetTick>
 8001d56:	4602      	mov	r2, r0
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d901      	bls.n	8001d68 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001d64:	2303      	movs	r3, #3
 8001d66:	e0a6      	b.n	8001eb6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d68:	4b56      	ldr	r3, [pc, #344]	; (8001ec4 <HAL_RCC_OscConfig+0x4d8>)
 8001d6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d6c:	f003 0302 	and.w	r3, r3, #2
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d1ee      	bne.n	8001d52 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d74:	7dfb      	ldrb	r3, [r7, #23]
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d105      	bne.n	8001d86 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d7a:	4b52      	ldr	r3, [pc, #328]	; (8001ec4 <HAL_RCC_OscConfig+0x4d8>)
 8001d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7e:	4a51      	ldr	r2, [pc, #324]	; (8001ec4 <HAL_RCC_OscConfig+0x4d8>)
 8001d80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d84:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	699b      	ldr	r3, [r3, #24]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	f000 8092 	beq.w	8001eb4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d90:	4b4c      	ldr	r3, [pc, #304]	; (8001ec4 <HAL_RCC_OscConfig+0x4d8>)
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	f003 030c 	and.w	r3, r3, #12
 8001d98:	2b08      	cmp	r3, #8
 8001d9a:	d05c      	beq.n	8001e56 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	699b      	ldr	r3, [r3, #24]
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	d141      	bne.n	8001e28 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001da4:	4b48      	ldr	r3, [pc, #288]	; (8001ec8 <HAL_RCC_OscConfig+0x4dc>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001daa:	f7ff fb09 	bl	80013c0 <HAL_GetTick>
 8001dae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001db0:	e008      	b.n	8001dc4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001db2:	f7ff fb05 	bl	80013c0 <HAL_GetTick>
 8001db6:	4602      	mov	r2, r0
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	2b02      	cmp	r3, #2
 8001dbe:	d901      	bls.n	8001dc4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	e078      	b.n	8001eb6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dc4:	4b3f      	ldr	r3, [pc, #252]	; (8001ec4 <HAL_RCC_OscConfig+0x4d8>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d1f0      	bne.n	8001db2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	69da      	ldr	r2, [r3, #28]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6a1b      	ldr	r3, [r3, #32]
 8001dd8:	431a      	orrs	r2, r3
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dde:	019b      	lsls	r3, r3, #6
 8001de0:	431a      	orrs	r2, r3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001de6:	085b      	lsrs	r3, r3, #1
 8001de8:	3b01      	subs	r3, #1
 8001dea:	041b      	lsls	r3, r3, #16
 8001dec:	431a      	orrs	r2, r3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001df2:	061b      	lsls	r3, r3, #24
 8001df4:	4933      	ldr	r1, [pc, #204]	; (8001ec4 <HAL_RCC_OscConfig+0x4d8>)
 8001df6:	4313      	orrs	r3, r2
 8001df8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dfa:	4b33      	ldr	r3, [pc, #204]	; (8001ec8 <HAL_RCC_OscConfig+0x4dc>)
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e00:	f7ff fade 	bl	80013c0 <HAL_GetTick>
 8001e04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e06:	e008      	b.n	8001e1a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e08:	f7ff fada 	bl	80013c0 <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d901      	bls.n	8001e1a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001e16:	2303      	movs	r3, #3
 8001e18:	e04d      	b.n	8001eb6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e1a:	4b2a      	ldr	r3, [pc, #168]	; (8001ec4 <HAL_RCC_OscConfig+0x4d8>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d0f0      	beq.n	8001e08 <HAL_RCC_OscConfig+0x41c>
 8001e26:	e045      	b.n	8001eb4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e28:	4b27      	ldr	r3, [pc, #156]	; (8001ec8 <HAL_RCC_OscConfig+0x4dc>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e2e:	f7ff fac7 	bl	80013c0 <HAL_GetTick>
 8001e32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e34:	e008      	b.n	8001e48 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e36:	f7ff fac3 	bl	80013c0 <HAL_GetTick>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d901      	bls.n	8001e48 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001e44:	2303      	movs	r3, #3
 8001e46:	e036      	b.n	8001eb6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e48:	4b1e      	ldr	r3, [pc, #120]	; (8001ec4 <HAL_RCC_OscConfig+0x4d8>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d1f0      	bne.n	8001e36 <HAL_RCC_OscConfig+0x44a>
 8001e54:	e02e      	b.n	8001eb4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	699b      	ldr	r3, [r3, #24]
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d101      	bne.n	8001e62 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e029      	b.n	8001eb6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e62:	4b18      	ldr	r3, [pc, #96]	; (8001ec4 <HAL_RCC_OscConfig+0x4d8>)
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	69db      	ldr	r3, [r3, #28]
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d11c      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d115      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001e84:	68fa      	ldr	r2, [r7, #12]
 8001e86:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d10d      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d106      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d001      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e000      	b.n	8001eb6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001eb4:	2300      	movs	r3, #0
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3718      	adds	r7, #24
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	40007000 	.word	0x40007000
 8001ec4:	40023800 	.word	0x40023800
 8001ec8:	42470060 	.word	0x42470060

08001ecc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d101      	bne.n	8001ee0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e0cc      	b.n	800207a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ee0:	4b68      	ldr	r3, [pc, #416]	; (8002084 <HAL_RCC_ClockConfig+0x1b8>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 030f 	and.w	r3, r3, #15
 8001ee8:	683a      	ldr	r2, [r7, #0]
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d90c      	bls.n	8001f08 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eee:	4b65      	ldr	r3, [pc, #404]	; (8002084 <HAL_RCC_ClockConfig+0x1b8>)
 8001ef0:	683a      	ldr	r2, [r7, #0]
 8001ef2:	b2d2      	uxtb	r2, r2
 8001ef4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ef6:	4b63      	ldr	r3, [pc, #396]	; (8002084 <HAL_RCC_ClockConfig+0x1b8>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 030f 	and.w	r3, r3, #15
 8001efe:	683a      	ldr	r2, [r7, #0]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d001      	beq.n	8001f08 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e0b8      	b.n	800207a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 0302 	and.w	r3, r3, #2
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d020      	beq.n	8001f56 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0304 	and.w	r3, r3, #4
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d005      	beq.n	8001f2c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f20:	4b59      	ldr	r3, [pc, #356]	; (8002088 <HAL_RCC_ClockConfig+0x1bc>)
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	4a58      	ldr	r2, [pc, #352]	; (8002088 <HAL_RCC_ClockConfig+0x1bc>)
 8001f26:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001f2a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 0308 	and.w	r3, r3, #8
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d005      	beq.n	8001f44 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f38:	4b53      	ldr	r3, [pc, #332]	; (8002088 <HAL_RCC_ClockConfig+0x1bc>)
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	4a52      	ldr	r2, [pc, #328]	; (8002088 <HAL_RCC_ClockConfig+0x1bc>)
 8001f3e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001f42:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f44:	4b50      	ldr	r3, [pc, #320]	; (8002088 <HAL_RCC_ClockConfig+0x1bc>)
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	494d      	ldr	r1, [pc, #308]	; (8002088 <HAL_RCC_ClockConfig+0x1bc>)
 8001f52:	4313      	orrs	r3, r2
 8001f54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0301 	and.w	r3, r3, #1
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d044      	beq.n	8001fec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d107      	bne.n	8001f7a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f6a:	4b47      	ldr	r3, [pc, #284]	; (8002088 <HAL_RCC_ClockConfig+0x1bc>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d119      	bne.n	8001faa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e07f      	b.n	800207a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d003      	beq.n	8001f8a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f86:	2b03      	cmp	r3, #3
 8001f88:	d107      	bne.n	8001f9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f8a:	4b3f      	ldr	r3, [pc, #252]	; (8002088 <HAL_RCC_ClockConfig+0x1bc>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d109      	bne.n	8001faa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e06f      	b.n	800207a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f9a:	4b3b      	ldr	r3, [pc, #236]	; (8002088 <HAL_RCC_ClockConfig+0x1bc>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0302 	and.w	r3, r3, #2
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d101      	bne.n	8001faa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e067      	b.n	800207a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001faa:	4b37      	ldr	r3, [pc, #220]	; (8002088 <HAL_RCC_ClockConfig+0x1bc>)
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	f023 0203 	bic.w	r2, r3, #3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	4934      	ldr	r1, [pc, #208]	; (8002088 <HAL_RCC_ClockConfig+0x1bc>)
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fbc:	f7ff fa00 	bl	80013c0 <HAL_GetTick>
 8001fc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fc2:	e00a      	b.n	8001fda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fc4:	f7ff f9fc 	bl	80013c0 <HAL_GetTick>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d901      	bls.n	8001fda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e04f      	b.n	800207a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fda:	4b2b      	ldr	r3, [pc, #172]	; (8002088 <HAL_RCC_ClockConfig+0x1bc>)
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	f003 020c 	and.w	r2, r3, #12
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d1eb      	bne.n	8001fc4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fec:	4b25      	ldr	r3, [pc, #148]	; (8002084 <HAL_RCC_ClockConfig+0x1b8>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 030f 	and.w	r3, r3, #15
 8001ff4:	683a      	ldr	r2, [r7, #0]
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d20c      	bcs.n	8002014 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ffa:	4b22      	ldr	r3, [pc, #136]	; (8002084 <HAL_RCC_ClockConfig+0x1b8>)
 8001ffc:	683a      	ldr	r2, [r7, #0]
 8001ffe:	b2d2      	uxtb	r2, r2
 8002000:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002002:	4b20      	ldr	r3, [pc, #128]	; (8002084 <HAL_RCC_ClockConfig+0x1b8>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 030f 	and.w	r3, r3, #15
 800200a:	683a      	ldr	r2, [r7, #0]
 800200c:	429a      	cmp	r2, r3
 800200e:	d001      	beq.n	8002014 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	e032      	b.n	800207a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0304 	and.w	r3, r3, #4
 800201c:	2b00      	cmp	r3, #0
 800201e:	d008      	beq.n	8002032 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002020:	4b19      	ldr	r3, [pc, #100]	; (8002088 <HAL_RCC_ClockConfig+0x1bc>)
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	4916      	ldr	r1, [pc, #88]	; (8002088 <HAL_RCC_ClockConfig+0x1bc>)
 800202e:	4313      	orrs	r3, r2
 8002030:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0308 	and.w	r3, r3, #8
 800203a:	2b00      	cmp	r3, #0
 800203c:	d009      	beq.n	8002052 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800203e:	4b12      	ldr	r3, [pc, #72]	; (8002088 <HAL_RCC_ClockConfig+0x1bc>)
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	691b      	ldr	r3, [r3, #16]
 800204a:	00db      	lsls	r3, r3, #3
 800204c:	490e      	ldr	r1, [pc, #56]	; (8002088 <HAL_RCC_ClockConfig+0x1bc>)
 800204e:	4313      	orrs	r3, r2
 8002050:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002052:	f000 f821 	bl	8002098 <HAL_RCC_GetSysClockFreq>
 8002056:	4601      	mov	r1, r0
 8002058:	4b0b      	ldr	r3, [pc, #44]	; (8002088 <HAL_RCC_ClockConfig+0x1bc>)
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	091b      	lsrs	r3, r3, #4
 800205e:	f003 030f 	and.w	r3, r3, #15
 8002062:	4a0a      	ldr	r2, [pc, #40]	; (800208c <HAL_RCC_ClockConfig+0x1c0>)
 8002064:	5cd3      	ldrb	r3, [r2, r3]
 8002066:	fa21 f303 	lsr.w	r3, r1, r3
 800206a:	4a09      	ldr	r2, [pc, #36]	; (8002090 <HAL_RCC_ClockConfig+0x1c4>)
 800206c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800206e:	4b09      	ldr	r3, [pc, #36]	; (8002094 <HAL_RCC_ClockConfig+0x1c8>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4618      	mov	r0, r3
 8002074:	f7ff f960 	bl	8001338 <HAL_InitTick>

  return HAL_OK;
 8002078:	2300      	movs	r3, #0
}
 800207a:	4618      	mov	r0, r3
 800207c:	3710      	adds	r7, #16
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	40023c00 	.word	0x40023c00
 8002088:	40023800 	.word	0x40023800
 800208c:	08004248 	.word	0x08004248
 8002090:	20000004 	.word	0x20000004
 8002094:	20000008 	.word	0x20000008

08002098 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002098:	b5f0      	push	{r4, r5, r6, r7, lr}
 800209a:	b085      	sub	sp, #20
 800209c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800209e:	2300      	movs	r3, #0
 80020a0:	607b      	str	r3, [r7, #4]
 80020a2:	2300      	movs	r3, #0
 80020a4:	60fb      	str	r3, [r7, #12]
 80020a6:	2300      	movs	r3, #0
 80020a8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80020aa:	2300      	movs	r3, #0
 80020ac:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80020ae:	4b63      	ldr	r3, [pc, #396]	; (800223c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	f003 030c 	and.w	r3, r3, #12
 80020b6:	2b04      	cmp	r3, #4
 80020b8:	d007      	beq.n	80020ca <HAL_RCC_GetSysClockFreq+0x32>
 80020ba:	2b08      	cmp	r3, #8
 80020bc:	d008      	beq.n	80020d0 <HAL_RCC_GetSysClockFreq+0x38>
 80020be:	2b00      	cmp	r3, #0
 80020c0:	f040 80b4 	bne.w	800222c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80020c4:	4b5e      	ldr	r3, [pc, #376]	; (8002240 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80020c6:	60bb      	str	r3, [r7, #8]
       break;
 80020c8:	e0b3      	b.n	8002232 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80020ca:	4b5e      	ldr	r3, [pc, #376]	; (8002244 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80020cc:	60bb      	str	r3, [r7, #8]
      break;
 80020ce:	e0b0      	b.n	8002232 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80020d0:	4b5a      	ldr	r3, [pc, #360]	; (800223c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80020d8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80020da:	4b58      	ldr	r3, [pc, #352]	; (800223c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d04a      	beq.n	800217c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020e6:	4b55      	ldr	r3, [pc, #340]	; (800223c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	099b      	lsrs	r3, r3, #6
 80020ec:	f04f 0400 	mov.w	r4, #0
 80020f0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80020f4:	f04f 0200 	mov.w	r2, #0
 80020f8:	ea03 0501 	and.w	r5, r3, r1
 80020fc:	ea04 0602 	and.w	r6, r4, r2
 8002100:	4629      	mov	r1, r5
 8002102:	4632      	mov	r2, r6
 8002104:	f04f 0300 	mov.w	r3, #0
 8002108:	f04f 0400 	mov.w	r4, #0
 800210c:	0154      	lsls	r4, r2, #5
 800210e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002112:	014b      	lsls	r3, r1, #5
 8002114:	4619      	mov	r1, r3
 8002116:	4622      	mov	r2, r4
 8002118:	1b49      	subs	r1, r1, r5
 800211a:	eb62 0206 	sbc.w	r2, r2, r6
 800211e:	f04f 0300 	mov.w	r3, #0
 8002122:	f04f 0400 	mov.w	r4, #0
 8002126:	0194      	lsls	r4, r2, #6
 8002128:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800212c:	018b      	lsls	r3, r1, #6
 800212e:	1a5b      	subs	r3, r3, r1
 8002130:	eb64 0402 	sbc.w	r4, r4, r2
 8002134:	f04f 0100 	mov.w	r1, #0
 8002138:	f04f 0200 	mov.w	r2, #0
 800213c:	00e2      	lsls	r2, r4, #3
 800213e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002142:	00d9      	lsls	r1, r3, #3
 8002144:	460b      	mov	r3, r1
 8002146:	4614      	mov	r4, r2
 8002148:	195b      	adds	r3, r3, r5
 800214a:	eb44 0406 	adc.w	r4, r4, r6
 800214e:	f04f 0100 	mov.w	r1, #0
 8002152:	f04f 0200 	mov.w	r2, #0
 8002156:	0262      	lsls	r2, r4, #9
 8002158:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800215c:	0259      	lsls	r1, r3, #9
 800215e:	460b      	mov	r3, r1
 8002160:	4614      	mov	r4, r2
 8002162:	4618      	mov	r0, r3
 8002164:	4621      	mov	r1, r4
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	f04f 0400 	mov.w	r4, #0
 800216c:	461a      	mov	r2, r3
 800216e:	4623      	mov	r3, r4
 8002170:	f7fe f832 	bl	80001d8 <__aeabi_uldivmod>
 8002174:	4603      	mov	r3, r0
 8002176:	460c      	mov	r4, r1
 8002178:	60fb      	str	r3, [r7, #12]
 800217a:	e049      	b.n	8002210 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800217c:	4b2f      	ldr	r3, [pc, #188]	; (800223c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	099b      	lsrs	r3, r3, #6
 8002182:	f04f 0400 	mov.w	r4, #0
 8002186:	f240 11ff 	movw	r1, #511	; 0x1ff
 800218a:	f04f 0200 	mov.w	r2, #0
 800218e:	ea03 0501 	and.w	r5, r3, r1
 8002192:	ea04 0602 	and.w	r6, r4, r2
 8002196:	4629      	mov	r1, r5
 8002198:	4632      	mov	r2, r6
 800219a:	f04f 0300 	mov.w	r3, #0
 800219e:	f04f 0400 	mov.w	r4, #0
 80021a2:	0154      	lsls	r4, r2, #5
 80021a4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80021a8:	014b      	lsls	r3, r1, #5
 80021aa:	4619      	mov	r1, r3
 80021ac:	4622      	mov	r2, r4
 80021ae:	1b49      	subs	r1, r1, r5
 80021b0:	eb62 0206 	sbc.w	r2, r2, r6
 80021b4:	f04f 0300 	mov.w	r3, #0
 80021b8:	f04f 0400 	mov.w	r4, #0
 80021bc:	0194      	lsls	r4, r2, #6
 80021be:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80021c2:	018b      	lsls	r3, r1, #6
 80021c4:	1a5b      	subs	r3, r3, r1
 80021c6:	eb64 0402 	sbc.w	r4, r4, r2
 80021ca:	f04f 0100 	mov.w	r1, #0
 80021ce:	f04f 0200 	mov.w	r2, #0
 80021d2:	00e2      	lsls	r2, r4, #3
 80021d4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80021d8:	00d9      	lsls	r1, r3, #3
 80021da:	460b      	mov	r3, r1
 80021dc:	4614      	mov	r4, r2
 80021de:	195b      	adds	r3, r3, r5
 80021e0:	eb44 0406 	adc.w	r4, r4, r6
 80021e4:	f04f 0100 	mov.w	r1, #0
 80021e8:	f04f 0200 	mov.w	r2, #0
 80021ec:	02a2      	lsls	r2, r4, #10
 80021ee:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80021f2:	0299      	lsls	r1, r3, #10
 80021f4:	460b      	mov	r3, r1
 80021f6:	4614      	mov	r4, r2
 80021f8:	4618      	mov	r0, r3
 80021fa:	4621      	mov	r1, r4
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	f04f 0400 	mov.w	r4, #0
 8002202:	461a      	mov	r2, r3
 8002204:	4623      	mov	r3, r4
 8002206:	f7fd ffe7 	bl	80001d8 <__aeabi_uldivmod>
 800220a:	4603      	mov	r3, r0
 800220c:	460c      	mov	r4, r1
 800220e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002210:	4b0a      	ldr	r3, [pc, #40]	; (800223c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	0c1b      	lsrs	r3, r3, #16
 8002216:	f003 0303 	and.w	r3, r3, #3
 800221a:	3301      	adds	r3, #1
 800221c:	005b      	lsls	r3, r3, #1
 800221e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002220:	68fa      	ldr	r2, [r7, #12]
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	fbb2 f3f3 	udiv	r3, r2, r3
 8002228:	60bb      	str	r3, [r7, #8]
      break;
 800222a:	e002      	b.n	8002232 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800222c:	4b04      	ldr	r3, [pc, #16]	; (8002240 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800222e:	60bb      	str	r3, [r7, #8]
      break;
 8002230:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002232:	68bb      	ldr	r3, [r7, #8]
}
 8002234:	4618      	mov	r0, r3
 8002236:	3714      	adds	r7, #20
 8002238:	46bd      	mov	sp, r7
 800223a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800223c:	40023800 	.word	0x40023800
 8002240:	00f42400 	.word	0x00f42400
 8002244:	007a1200 	.word	0x007a1200

08002248 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800224c:	4b03      	ldr	r3, [pc, #12]	; (800225c <HAL_RCC_GetHCLKFreq+0x14>)
 800224e:	681b      	ldr	r3, [r3, #0]
}
 8002250:	4618      	mov	r0, r3
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop
 800225c:	20000004 	.word	0x20000004

08002260 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002264:	f7ff fff0 	bl	8002248 <HAL_RCC_GetHCLKFreq>
 8002268:	4601      	mov	r1, r0
 800226a:	4b05      	ldr	r3, [pc, #20]	; (8002280 <HAL_RCC_GetPCLK1Freq+0x20>)
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	0a9b      	lsrs	r3, r3, #10
 8002270:	f003 0307 	and.w	r3, r3, #7
 8002274:	4a03      	ldr	r2, [pc, #12]	; (8002284 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002276:	5cd3      	ldrb	r3, [r2, r3]
 8002278:	fa21 f303 	lsr.w	r3, r1, r3
}
 800227c:	4618      	mov	r0, r3
 800227e:	bd80      	pop	{r7, pc}
 8002280:	40023800 	.word	0x40023800
 8002284:	08004258 	.word	0x08004258

08002288 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800228c:	f7ff ffdc 	bl	8002248 <HAL_RCC_GetHCLKFreq>
 8002290:	4601      	mov	r1, r0
 8002292:	4b05      	ldr	r3, [pc, #20]	; (80022a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	0b5b      	lsrs	r3, r3, #13
 8002298:	f003 0307 	and.w	r3, r3, #7
 800229c:	4a03      	ldr	r2, [pc, #12]	; (80022ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800229e:	5cd3      	ldrb	r3, [r2, r3]
 80022a0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	40023800 	.word	0x40023800
 80022ac:	08004258 	.word	0x08004258

080022b0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d101      	bne.n	80022c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e056      	b.n	8002370 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2200      	movs	r2, #0
 80022c6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d106      	bne.n	80022e2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2200      	movs	r2, #0
 80022d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	f7fe fef9 	bl	80010d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2202      	movs	r2, #2
 80022e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022f8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	685a      	ldr	r2, [r3, #4]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	431a      	orrs	r2, r3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	431a      	orrs	r2, r3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	691b      	ldr	r3, [r3, #16]
 800230e:	431a      	orrs	r2, r3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	695b      	ldr	r3, [r3, #20]
 8002314:	431a      	orrs	r2, r3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	699b      	ldr	r3, [r3, #24]
 800231a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800231e:	431a      	orrs	r2, r3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	69db      	ldr	r3, [r3, #28]
 8002324:	431a      	orrs	r2, r3
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6a1b      	ldr	r3, [r3, #32]
 800232a:	ea42 0103 	orr.w	r1, r2, r3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	430a      	orrs	r2, r1
 8002338:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	699b      	ldr	r3, [r3, #24]
 800233e:	0c1b      	lsrs	r3, r3, #16
 8002340:	f003 0104 	and.w	r1, r3, #4
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	430a      	orrs	r2, r1
 800234e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	69da      	ldr	r2, [r3, #28]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800235e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2200      	movs	r2, #0
 8002364:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2201      	movs	r2, #1
 800236a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800236e:	2300      	movs	r3, #0
}
 8002370:	4618      	mov	r0, r3
 8002372:	3708      	adds	r7, #8
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}

08002378 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b08c      	sub	sp, #48	; 0x30
 800237c:	af00      	add	r7, sp, #0
 800237e:	60f8      	str	r0, [r7, #12]
 8002380:	60b9      	str	r1, [r7, #8]
 8002382:	607a      	str	r2, [r7, #4]
 8002384:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002386:	2301      	movs	r3, #1
 8002388:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800238a:	2300      	movs	r3, #0
 800238c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002396:	2b01      	cmp	r3, #1
 8002398:	d101      	bne.n	800239e <HAL_SPI_TransmitReceive+0x26>
 800239a:	2302      	movs	r3, #2
 800239c:	e18a      	b.n	80026b4 <HAL_SPI_TransmitReceive+0x33c>
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2201      	movs	r2, #1
 80023a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80023a6:	f7ff f80b 	bl	80013c0 <HAL_GetTick>
 80023aa:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80023b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80023bc:	887b      	ldrh	r3, [r7, #2]
 80023be:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80023c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d00f      	beq.n	80023e8 <HAL_SPI_TransmitReceive+0x70>
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80023ce:	d107      	bne.n	80023e0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d103      	bne.n	80023e0 <HAL_SPI_TransmitReceive+0x68>
 80023d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80023dc:	2b04      	cmp	r3, #4
 80023de:	d003      	beq.n	80023e8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80023e0:	2302      	movs	r3, #2
 80023e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80023e6:	e15b      	b.n	80026a0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d005      	beq.n	80023fa <HAL_SPI_TransmitReceive+0x82>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d002      	beq.n	80023fa <HAL_SPI_TransmitReceive+0x82>
 80023f4:	887b      	ldrh	r3, [r7, #2]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d103      	bne.n	8002402 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002400:	e14e      	b.n	80026a0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002408:	b2db      	uxtb	r3, r3
 800240a:	2b04      	cmp	r3, #4
 800240c:	d003      	beq.n	8002416 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2205      	movs	r2, #5
 8002412:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2200      	movs	r2, #0
 800241a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	887a      	ldrh	r2, [r7, #2]
 8002426:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	887a      	ldrh	r2, [r7, #2]
 800242c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	68ba      	ldr	r2, [r7, #8]
 8002432:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	887a      	ldrh	r2, [r7, #2]
 8002438:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	887a      	ldrh	r2, [r7, #2]
 800243e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2200      	movs	r2, #0
 8002444:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2200      	movs	r2, #0
 800244a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002456:	2b40      	cmp	r3, #64	; 0x40
 8002458:	d007      	beq.n	800246a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002468:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	68db      	ldr	r3, [r3, #12]
 800246e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002472:	d178      	bne.n	8002566 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d002      	beq.n	8002482 <HAL_SPI_TransmitReceive+0x10a>
 800247c:	8b7b      	ldrh	r3, [r7, #26]
 800247e:	2b01      	cmp	r3, #1
 8002480:	d166      	bne.n	8002550 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002486:	881a      	ldrh	r2, [r3, #0]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002492:	1c9a      	adds	r2, r3, #2
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800249c:	b29b      	uxth	r3, r3
 800249e:	3b01      	subs	r3, #1
 80024a0:	b29a      	uxth	r2, r3
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80024a6:	e053      	b.n	8002550 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	f003 0302 	and.w	r3, r3, #2
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d11b      	bne.n	80024ee <HAL_SPI_TransmitReceive+0x176>
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d016      	beq.n	80024ee <HAL_SPI_TransmitReceive+0x176>
 80024c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d113      	bne.n	80024ee <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ca:	881a      	ldrh	r2, [r3, #0]
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d6:	1c9a      	adds	r2, r3, #2
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024e0:	b29b      	uxth	r3, r3
 80024e2:	3b01      	subs	r3, #1
 80024e4:	b29a      	uxth	r2, r3
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80024ea:	2300      	movs	r3, #0
 80024ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	f003 0301 	and.w	r3, r3, #1
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d119      	bne.n	8002530 <HAL_SPI_TransmitReceive+0x1b8>
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002500:	b29b      	uxth	r3, r3
 8002502:	2b00      	cmp	r3, #0
 8002504:	d014      	beq.n	8002530 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	68da      	ldr	r2, [r3, #12]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002510:	b292      	uxth	r2, r2
 8002512:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002518:	1c9a      	adds	r2, r3, #2
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002522:	b29b      	uxth	r3, r3
 8002524:	3b01      	subs	r3, #1
 8002526:	b29a      	uxth	r2, r3
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800252c:	2301      	movs	r3, #1
 800252e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002530:	f7fe ff46 	bl	80013c0 <HAL_GetTick>
 8002534:	4602      	mov	r2, r0
 8002536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800253c:	429a      	cmp	r2, r3
 800253e:	d807      	bhi.n	8002550 <HAL_SPI_TransmitReceive+0x1d8>
 8002540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002542:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002546:	d003      	beq.n	8002550 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002548:	2303      	movs	r3, #3
 800254a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800254e:	e0a7      	b.n	80026a0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002554:	b29b      	uxth	r3, r3
 8002556:	2b00      	cmp	r3, #0
 8002558:	d1a6      	bne.n	80024a8 <HAL_SPI_TransmitReceive+0x130>
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800255e:	b29b      	uxth	r3, r3
 8002560:	2b00      	cmp	r3, #0
 8002562:	d1a1      	bne.n	80024a8 <HAL_SPI_TransmitReceive+0x130>
 8002564:	e07c      	b.n	8002660 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d002      	beq.n	8002574 <HAL_SPI_TransmitReceive+0x1fc>
 800256e:	8b7b      	ldrh	r3, [r7, #26]
 8002570:	2b01      	cmp	r3, #1
 8002572:	d16b      	bne.n	800264c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	330c      	adds	r3, #12
 800257e:	7812      	ldrb	r2, [r2, #0]
 8002580:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002586:	1c5a      	adds	r2, r3, #1
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002590:	b29b      	uxth	r3, r3
 8002592:	3b01      	subs	r3, #1
 8002594:	b29a      	uxth	r2, r3
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800259a:	e057      	b.n	800264c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	f003 0302 	and.w	r3, r3, #2
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d11c      	bne.n	80025e4 <HAL_SPI_TransmitReceive+0x26c>
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d017      	beq.n	80025e4 <HAL_SPI_TransmitReceive+0x26c>
 80025b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d114      	bne.n	80025e4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	330c      	adds	r3, #12
 80025c4:	7812      	ldrb	r2, [r2, #0]
 80025c6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025cc:	1c5a      	adds	r2, r3, #1
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	3b01      	subs	r3, #1
 80025da:	b29a      	uxth	r2, r3
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80025e0:	2300      	movs	r3, #0
 80025e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	f003 0301 	and.w	r3, r3, #1
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d119      	bne.n	8002626 <HAL_SPI_TransmitReceive+0x2ae>
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d014      	beq.n	8002626 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	68da      	ldr	r2, [r3, #12]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002606:	b2d2      	uxtb	r2, r2
 8002608:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800260e:	1c5a      	adds	r2, r3, #1
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002618:	b29b      	uxth	r3, r3
 800261a:	3b01      	subs	r3, #1
 800261c:	b29a      	uxth	r2, r3
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002622:	2301      	movs	r3, #1
 8002624:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002626:	f7fe fecb 	bl	80013c0 <HAL_GetTick>
 800262a:	4602      	mov	r2, r0
 800262c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002632:	429a      	cmp	r2, r3
 8002634:	d803      	bhi.n	800263e <HAL_SPI_TransmitReceive+0x2c6>
 8002636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800263c:	d102      	bne.n	8002644 <HAL_SPI_TransmitReceive+0x2cc>
 800263e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002640:	2b00      	cmp	r3, #0
 8002642:	d103      	bne.n	800264c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002644:	2303      	movs	r3, #3
 8002646:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800264a:	e029      	b.n	80026a0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002650:	b29b      	uxth	r3, r3
 8002652:	2b00      	cmp	r3, #0
 8002654:	d1a2      	bne.n	800259c <HAL_SPI_TransmitReceive+0x224>
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800265a:	b29b      	uxth	r3, r3
 800265c:	2b00      	cmp	r3, #0
 800265e:	d19d      	bne.n	800259c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002660:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002662:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002664:	68f8      	ldr	r0, [r7, #12]
 8002666:	f000 f893 	bl	8002790 <SPI_EndRxTxTransaction>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d006      	beq.n	800267e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2220      	movs	r2, #32
 800267a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800267c:	e010      	b.n	80026a0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d10b      	bne.n	800269e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002686:	2300      	movs	r3, #0
 8002688:	617b      	str	r3, [r7, #20]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	617b      	str	r3, [r7, #20]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	617b      	str	r3, [r7, #20]
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	e000      	b.n	80026a0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800269e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2201      	movs	r2, #1
 80026a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2200      	movs	r2, #0
 80026ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80026b0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3730      	adds	r7, #48	; 0x30
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}

080026bc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	60f8      	str	r0, [r7, #12]
 80026c4:	60b9      	str	r1, [r7, #8]
 80026c6:	603b      	str	r3, [r7, #0]
 80026c8:	4613      	mov	r3, r2
 80026ca:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80026cc:	e04c      	b.n	8002768 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026d4:	d048      	beq.n	8002768 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80026d6:	f7fe fe73 	bl	80013c0 <HAL_GetTick>
 80026da:	4602      	mov	r2, r0
 80026dc:	69bb      	ldr	r3, [r7, #24]
 80026de:	1ad3      	subs	r3, r2, r3
 80026e0:	683a      	ldr	r2, [r7, #0]
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d902      	bls.n	80026ec <SPI_WaitFlagStateUntilTimeout+0x30>
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d13d      	bne.n	8002768 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	685a      	ldr	r2, [r3, #4]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80026fa:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002704:	d111      	bne.n	800272a <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800270e:	d004      	beq.n	800271a <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002718:	d107      	bne.n	800272a <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002728:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800272e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002732:	d10f      	bne.n	8002754 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002742:	601a      	str	r2, [r3, #0]
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002752:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2201      	movs	r2, #1
 8002758:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2200      	movs	r2, #0
 8002760:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002764:	2303      	movs	r3, #3
 8002766:	e00f      	b.n	8002788 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	689a      	ldr	r2, [r3, #8]
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	4013      	ands	r3, r2
 8002772:	68ba      	ldr	r2, [r7, #8]
 8002774:	429a      	cmp	r2, r3
 8002776:	bf0c      	ite	eq
 8002778:	2301      	moveq	r3, #1
 800277a:	2300      	movne	r3, #0
 800277c:	b2db      	uxtb	r3, r3
 800277e:	461a      	mov	r2, r3
 8002780:	79fb      	ldrb	r3, [r7, #7]
 8002782:	429a      	cmp	r2, r3
 8002784:	d1a3      	bne.n	80026ce <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002786:	2300      	movs	r3, #0
}
 8002788:	4618      	mov	r0, r3
 800278a:	3710      	adds	r7, #16
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}

08002790 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b088      	sub	sp, #32
 8002794:	af02      	add	r7, sp, #8
 8002796:	60f8      	str	r0, [r7, #12]
 8002798:	60b9      	str	r1, [r7, #8]
 800279a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800279c:	4b1b      	ldr	r3, [pc, #108]	; (800280c <SPI_EndRxTxTransaction+0x7c>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a1b      	ldr	r2, [pc, #108]	; (8002810 <SPI_EndRxTxTransaction+0x80>)
 80027a2:	fba2 2303 	umull	r2, r3, r2, r3
 80027a6:	0d5b      	lsrs	r3, r3, #21
 80027a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80027ac:	fb02 f303 	mul.w	r3, r2, r3
 80027b0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80027ba:	d112      	bne.n	80027e2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	9300      	str	r3, [sp, #0]
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	2200      	movs	r2, #0
 80027c4:	2180      	movs	r1, #128	; 0x80
 80027c6:	68f8      	ldr	r0, [r7, #12]
 80027c8:	f7ff ff78 	bl	80026bc <SPI_WaitFlagStateUntilTimeout>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d016      	beq.n	8002800 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027d6:	f043 0220 	orr.w	r2, r3, #32
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80027de:	2303      	movs	r3, #3
 80027e0:	e00f      	b.n	8002802 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d00a      	beq.n	80027fe <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	3b01      	subs	r3, #1
 80027ec:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027f8:	2b80      	cmp	r3, #128	; 0x80
 80027fa:	d0f2      	beq.n	80027e2 <SPI_EndRxTxTransaction+0x52>
 80027fc:	e000      	b.n	8002800 <SPI_EndRxTxTransaction+0x70>
        break;
 80027fe:	bf00      	nop
  }

  return HAL_OK;
 8002800:	2300      	movs	r3, #0
}
 8002802:	4618      	mov	r0, r3
 8002804:	3718      	adds	r7, #24
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	20000004 	.word	0x20000004
 8002810:	165e9f81 	.word	0x165e9f81

08002814 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b082      	sub	sp, #8
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d101      	bne.n	8002826 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e01d      	b.n	8002862 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800282c:	b2db      	uxtb	r3, r3
 800282e:	2b00      	cmp	r3, #0
 8002830:	d106      	bne.n	8002840 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2200      	movs	r2, #0
 8002836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f000 f816 	bl	800286c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2202      	movs	r2, #2
 8002844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	3304      	adds	r3, #4
 8002850:	4619      	mov	r1, r3
 8002852:	4610      	mov	r0, r2
 8002854:	f000 fa26 	bl	8002ca4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2201      	movs	r2, #1
 800285c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002860:	2300      	movs	r3, #0
}
 8002862:	4618      	mov	r0, r3
 8002864:	3708      	adds	r7, #8
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
	...

0800286c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b088      	sub	sp, #32
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  //UNUSED(htim);
	GPIO_InitTypeDef GPIO_InitStruct;
	__HAL_RCC_TIM3_CLK_ENABLE();
 8002874:	2300      	movs	r3, #0
 8002876:	60bb      	str	r3, [r7, #8]
 8002878:	4b0f      	ldr	r3, [pc, #60]	; (80028b8 <HAL_TIM_Base_MspInit+0x4c>)
 800287a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287c:	4a0e      	ldr	r2, [pc, #56]	; (80028b8 <HAL_TIM_Base_MspInit+0x4c>)
 800287e:	f043 0302 	orr.w	r3, r3, #2
 8002882:	6413      	str	r3, [r2, #64]	; 0x40
 8002884:	4b0c      	ldr	r3, [pc, #48]	; (80028b8 <HAL_TIM_Base_MspInit+0x4c>)
 8002886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002888:	f003 0302 	and.w	r3, r3, #2
 800288c:	60bb      	str	r3, [r7, #8]
 800288e:	68bb      	ldr	r3, [r7, #8]

	GPIO_InitStruct.Pin = (1<<0)|(1<<1)|(1<<4)|(1<<5);
 8002890:	2333      	movs	r3, #51	; 0x33
 8002892:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002894:	2302      	movs	r3, #2
 8002896:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002898:	2301      	movs	r3, #1
 800289a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 800289c:	2301      	movs	r3, #1
 800289e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = 2;
 80028a0:	2302      	movs	r3, #2
 80028a2:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028a4:	f107 030c 	add.w	r3, r7, #12
 80028a8:	4619      	mov	r1, r3
 80028aa:	4804      	ldr	r0, [pc, #16]	; (80028bc <HAL_TIM_Base_MspInit+0x50>)
 80028ac:	f7fe feea 	bl	8001684 <HAL_GPIO_Init>

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80028b0:	bf00      	nop
 80028b2:	3720      	adds	r7, #32
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	40023800 	.word	0x40023800
 80028bc:	40020400 	.word	0x40020400

080028c0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d101      	bne.n	80028d2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e01d      	b.n	800290e <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d106      	bne.n	80028ec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2200      	movs	r2, #0
 80028e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f000 f815 	bl	8002916 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2202      	movs	r2, #2
 80028f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	3304      	adds	r3, #4
 80028fc:	4619      	mov	r1, r3
 80028fe:	4610      	mov	r0, r2
 8002900:	f000 f9d0 	bl	8002ca4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2201      	movs	r2, #1
 8002908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800290c:	2300      	movs	r3, #0
}
 800290e:	4618      	mov	r0, r3
 8002910:	3708      	adds	r7, #8
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}

08002916 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002916:	b480      	push	{r7}
 8002918:	b083      	sub	sp, #12
 800291a:	af00      	add	r7, sp, #0
 800291c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800291e:	bf00      	nop
 8002920:	370c      	adds	r7, #12
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr
	...

0800292c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b084      	sub	sp, #16
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
 8002934:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	2201      	movs	r2, #1
 800293c:	6839      	ldr	r1, [r7, #0]
 800293e:	4618      	mov	r0, r3
 8002940:	f000 fc9a 	bl	8003278 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a15      	ldr	r2, [pc, #84]	; (80029a0 <HAL_TIM_PWM_Start+0x74>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d004      	beq.n	8002958 <HAL_TIM_PWM_Start+0x2c>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a14      	ldr	r2, [pc, #80]	; (80029a4 <HAL_TIM_PWM_Start+0x78>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d101      	bne.n	800295c <HAL_TIM_PWM_Start+0x30>
 8002958:	2301      	movs	r3, #1
 800295a:	e000      	b.n	800295e <HAL_TIM_PWM_Start+0x32>
 800295c:	2300      	movs	r3, #0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d007      	beq.n	8002972 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002970:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	f003 0307 	and.w	r3, r3, #7
 800297c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2b06      	cmp	r3, #6
 8002982:	d007      	beq.n	8002994 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f042 0201 	orr.w	r2, r2, #1
 8002992:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002994:	2300      	movs	r3, #0
}
 8002996:	4618      	mov	r0, r3
 8002998:	3710      	adds	r7, #16
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	40010000 	.word	0x40010000
 80029a4:	40010400 	.word	0x40010400

080029a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b084      	sub	sp, #16
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	60f8      	str	r0, [r7, #12]
 80029b0:	60b9      	str	r1, [r7, #8]
 80029b2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d101      	bne.n	80029c2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80029be:	2302      	movs	r3, #2
 80029c0:	e0b4      	b.n	8002b2c <HAL_TIM_PWM_ConfigChannel+0x184>
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2201      	movs	r2, #1
 80029c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2202      	movs	r2, #2
 80029ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2b0c      	cmp	r3, #12
 80029d6:	f200 809f 	bhi.w	8002b18 <HAL_TIM_PWM_ConfigChannel+0x170>
 80029da:	a201      	add	r2, pc, #4	; (adr r2, 80029e0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80029dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029e0:	08002a15 	.word	0x08002a15
 80029e4:	08002b19 	.word	0x08002b19
 80029e8:	08002b19 	.word	0x08002b19
 80029ec:	08002b19 	.word	0x08002b19
 80029f0:	08002a55 	.word	0x08002a55
 80029f4:	08002b19 	.word	0x08002b19
 80029f8:	08002b19 	.word	0x08002b19
 80029fc:	08002b19 	.word	0x08002b19
 8002a00:	08002a97 	.word	0x08002a97
 8002a04:	08002b19 	.word	0x08002b19
 8002a08:	08002b19 	.word	0x08002b19
 8002a0c:	08002b19 	.word	0x08002b19
 8002a10:	08002ad7 	.word	0x08002ad7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	68b9      	ldr	r1, [r7, #8]
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f000 f9e2 	bl	8002de4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	699a      	ldr	r2, [r3, #24]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f042 0208 	orr.w	r2, r2, #8
 8002a2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	699a      	ldr	r2, [r3, #24]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f022 0204 	bic.w	r2, r2, #4
 8002a3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	6999      	ldr	r1, [r3, #24]
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	691a      	ldr	r2, [r3, #16]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	430a      	orrs	r2, r1
 8002a50:	619a      	str	r2, [r3, #24]
      break;
 8002a52:	e062      	b.n	8002b1a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	68b9      	ldr	r1, [r7, #8]
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f000 fa32 	bl	8002ec4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	699a      	ldr	r2, [r3, #24]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	699a      	ldr	r2, [r3, #24]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	6999      	ldr	r1, [r3, #24]
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	691b      	ldr	r3, [r3, #16]
 8002a8a:	021a      	lsls	r2, r3, #8
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	430a      	orrs	r2, r1
 8002a92:	619a      	str	r2, [r3, #24]
      break;
 8002a94:	e041      	b.n	8002b1a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	68b9      	ldr	r1, [r7, #8]
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f000 fa87 	bl	8002fb0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	69da      	ldr	r2, [r3, #28]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f042 0208 	orr.w	r2, r2, #8
 8002ab0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	69da      	ldr	r2, [r3, #28]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f022 0204 	bic.w	r2, r2, #4
 8002ac0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	69d9      	ldr	r1, [r3, #28]
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	691a      	ldr	r2, [r3, #16]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	430a      	orrs	r2, r1
 8002ad2:	61da      	str	r2, [r3, #28]
      break;
 8002ad4:	e021      	b.n	8002b1a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	68b9      	ldr	r1, [r7, #8]
 8002adc:	4618      	mov	r0, r3
 8002ade:	f000 fadb 	bl	8003098 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	69da      	ldr	r2, [r3, #28]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002af0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	69da      	ldr	r2, [r3, #28]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	69d9      	ldr	r1, [r3, #28]
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	691b      	ldr	r3, [r3, #16]
 8002b0c:	021a      	lsls	r2, r3, #8
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	430a      	orrs	r2, r1
 8002b14:	61da      	str	r2, [r3, #28]
      break;
 8002b16:	e000      	b.n	8002b1a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8002b18:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2200      	movs	r2, #0
 8002b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b2a:	2300      	movs	r3, #0
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3710      	adds	r7, #16
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}

08002b34 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b084      	sub	sp, #16
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d101      	bne.n	8002b4c <HAL_TIM_ConfigClockSource+0x18>
 8002b48:	2302      	movs	r3, #2
 8002b4a:	e0a6      	b.n	8002c9a <HAL_TIM_ConfigClockSource+0x166>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2202      	movs	r2, #2
 8002b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002b6a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b72:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	68fa      	ldr	r2, [r7, #12]
 8002b7a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2b40      	cmp	r3, #64	; 0x40
 8002b82:	d067      	beq.n	8002c54 <HAL_TIM_ConfigClockSource+0x120>
 8002b84:	2b40      	cmp	r3, #64	; 0x40
 8002b86:	d80b      	bhi.n	8002ba0 <HAL_TIM_ConfigClockSource+0x6c>
 8002b88:	2b10      	cmp	r3, #16
 8002b8a:	d073      	beq.n	8002c74 <HAL_TIM_ConfigClockSource+0x140>
 8002b8c:	2b10      	cmp	r3, #16
 8002b8e:	d802      	bhi.n	8002b96 <HAL_TIM_ConfigClockSource+0x62>
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d06f      	beq.n	8002c74 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002b94:	e078      	b.n	8002c88 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002b96:	2b20      	cmp	r3, #32
 8002b98:	d06c      	beq.n	8002c74 <HAL_TIM_ConfigClockSource+0x140>
 8002b9a:	2b30      	cmp	r3, #48	; 0x30
 8002b9c:	d06a      	beq.n	8002c74 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002b9e:	e073      	b.n	8002c88 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002ba0:	2b70      	cmp	r3, #112	; 0x70
 8002ba2:	d00d      	beq.n	8002bc0 <HAL_TIM_ConfigClockSource+0x8c>
 8002ba4:	2b70      	cmp	r3, #112	; 0x70
 8002ba6:	d804      	bhi.n	8002bb2 <HAL_TIM_ConfigClockSource+0x7e>
 8002ba8:	2b50      	cmp	r3, #80	; 0x50
 8002baa:	d033      	beq.n	8002c14 <HAL_TIM_ConfigClockSource+0xe0>
 8002bac:	2b60      	cmp	r3, #96	; 0x60
 8002bae:	d041      	beq.n	8002c34 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002bb0:	e06a      	b.n	8002c88 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002bb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bb6:	d066      	beq.n	8002c86 <HAL_TIM_ConfigClockSource+0x152>
 8002bb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bbc:	d017      	beq.n	8002bee <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002bbe:	e063      	b.n	8002c88 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6818      	ldr	r0, [r3, #0]
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	6899      	ldr	r1, [r3, #8]
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	685a      	ldr	r2, [r3, #4]
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	f000 fb32 	bl	8003238 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002be2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	68fa      	ldr	r2, [r7, #12]
 8002bea:	609a      	str	r2, [r3, #8]
      break;
 8002bec:	e04c      	b.n	8002c88 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6818      	ldr	r0, [r3, #0]
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	6899      	ldr	r1, [r3, #8]
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	685a      	ldr	r2, [r3, #4]
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	f000 fb1b 	bl	8003238 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	689a      	ldr	r2, [r3, #8]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c10:	609a      	str	r2, [r3, #8]
      break;
 8002c12:	e039      	b.n	8002c88 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6818      	ldr	r0, [r3, #0]
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	6859      	ldr	r1, [r3, #4]
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	461a      	mov	r2, r3
 8002c22:	f000 fa8f 	bl	8003144 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	2150      	movs	r1, #80	; 0x50
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f000 fae8 	bl	8003202 <TIM_ITRx_SetConfig>
      break;
 8002c32:	e029      	b.n	8002c88 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6818      	ldr	r0, [r3, #0]
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	6859      	ldr	r1, [r3, #4]
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	461a      	mov	r2, r3
 8002c42:	f000 faae 	bl	80031a2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	2160      	movs	r1, #96	; 0x60
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f000 fad8 	bl	8003202 <TIM_ITRx_SetConfig>
      break;
 8002c52:	e019      	b.n	8002c88 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6818      	ldr	r0, [r3, #0]
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	6859      	ldr	r1, [r3, #4]
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	461a      	mov	r2, r3
 8002c62:	f000 fa6f 	bl	8003144 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	2140      	movs	r1, #64	; 0x40
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f000 fac8 	bl	8003202 <TIM_ITRx_SetConfig>
      break;
 8002c72:	e009      	b.n	8002c88 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	4610      	mov	r0, r2
 8002c80:	f000 fabf 	bl	8003202 <TIM_ITRx_SetConfig>
      break;
 8002c84:	e000      	b.n	8002c88 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002c86:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2200      	movs	r2, #0
 8002c94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c98:	2300      	movs	r3, #0
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3710      	adds	r7, #16
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
	...

08002ca4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b085      	sub	sp, #20
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	4a40      	ldr	r2, [pc, #256]	; (8002db8 <TIM_Base_SetConfig+0x114>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d013      	beq.n	8002ce4 <TIM_Base_SetConfig+0x40>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cc2:	d00f      	beq.n	8002ce4 <TIM_Base_SetConfig+0x40>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	4a3d      	ldr	r2, [pc, #244]	; (8002dbc <TIM_Base_SetConfig+0x118>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d00b      	beq.n	8002ce4 <TIM_Base_SetConfig+0x40>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	4a3c      	ldr	r2, [pc, #240]	; (8002dc0 <TIM_Base_SetConfig+0x11c>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d007      	beq.n	8002ce4 <TIM_Base_SetConfig+0x40>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	4a3b      	ldr	r2, [pc, #236]	; (8002dc4 <TIM_Base_SetConfig+0x120>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d003      	beq.n	8002ce4 <TIM_Base_SetConfig+0x40>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	4a3a      	ldr	r2, [pc, #232]	; (8002dc8 <TIM_Base_SetConfig+0x124>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d108      	bne.n	8002cf6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	68fa      	ldr	r2, [r7, #12]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4a2f      	ldr	r2, [pc, #188]	; (8002db8 <TIM_Base_SetConfig+0x114>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d02b      	beq.n	8002d56 <TIM_Base_SetConfig+0xb2>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d04:	d027      	beq.n	8002d56 <TIM_Base_SetConfig+0xb2>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4a2c      	ldr	r2, [pc, #176]	; (8002dbc <TIM_Base_SetConfig+0x118>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d023      	beq.n	8002d56 <TIM_Base_SetConfig+0xb2>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4a2b      	ldr	r2, [pc, #172]	; (8002dc0 <TIM_Base_SetConfig+0x11c>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d01f      	beq.n	8002d56 <TIM_Base_SetConfig+0xb2>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4a2a      	ldr	r2, [pc, #168]	; (8002dc4 <TIM_Base_SetConfig+0x120>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d01b      	beq.n	8002d56 <TIM_Base_SetConfig+0xb2>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4a29      	ldr	r2, [pc, #164]	; (8002dc8 <TIM_Base_SetConfig+0x124>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d017      	beq.n	8002d56 <TIM_Base_SetConfig+0xb2>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a28      	ldr	r2, [pc, #160]	; (8002dcc <TIM_Base_SetConfig+0x128>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d013      	beq.n	8002d56 <TIM_Base_SetConfig+0xb2>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a27      	ldr	r2, [pc, #156]	; (8002dd0 <TIM_Base_SetConfig+0x12c>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d00f      	beq.n	8002d56 <TIM_Base_SetConfig+0xb2>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4a26      	ldr	r2, [pc, #152]	; (8002dd4 <TIM_Base_SetConfig+0x130>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d00b      	beq.n	8002d56 <TIM_Base_SetConfig+0xb2>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a25      	ldr	r2, [pc, #148]	; (8002dd8 <TIM_Base_SetConfig+0x134>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d007      	beq.n	8002d56 <TIM_Base_SetConfig+0xb2>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a24      	ldr	r2, [pc, #144]	; (8002ddc <TIM_Base_SetConfig+0x138>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d003      	beq.n	8002d56 <TIM_Base_SetConfig+0xb2>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a23      	ldr	r2, [pc, #140]	; (8002de0 <TIM_Base_SetConfig+0x13c>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d108      	bne.n	8002d68 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	68fa      	ldr	r2, [r7, #12]
 8002d64:	4313      	orrs	r3, r2
 8002d66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	695b      	ldr	r3, [r3, #20]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	68fa      	ldr	r2, [r7, #12]
 8002d7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	689a      	ldr	r2, [r3, #8]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	4a0a      	ldr	r2, [pc, #40]	; (8002db8 <TIM_Base_SetConfig+0x114>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d003      	beq.n	8002d9c <TIM_Base_SetConfig+0xf8>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	4a0c      	ldr	r2, [pc, #48]	; (8002dc8 <TIM_Base_SetConfig+0x124>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d103      	bne.n	8002da4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	691a      	ldr	r2, [r3, #16]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2201      	movs	r2, #1
 8002da8:	615a      	str	r2, [r3, #20]
}
 8002daa:	bf00      	nop
 8002dac:	3714      	adds	r7, #20
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr
 8002db6:	bf00      	nop
 8002db8:	40010000 	.word	0x40010000
 8002dbc:	40000400 	.word	0x40000400
 8002dc0:	40000800 	.word	0x40000800
 8002dc4:	40000c00 	.word	0x40000c00
 8002dc8:	40010400 	.word	0x40010400
 8002dcc:	40014000 	.word	0x40014000
 8002dd0:	40014400 	.word	0x40014400
 8002dd4:	40014800 	.word	0x40014800
 8002dd8:	40001800 	.word	0x40001800
 8002ddc:	40001c00 	.word	0x40001c00
 8002de0:	40002000 	.word	0x40002000

08002de4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b087      	sub	sp, #28
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6a1b      	ldr	r3, [r3, #32]
 8002df2:	f023 0201 	bic.w	r2, r3, #1
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6a1b      	ldr	r3, [r3, #32]
 8002dfe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	699b      	ldr	r3, [r3, #24]
 8002e0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f023 0303 	bic.w	r3, r3, #3
 8002e1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	68fa      	ldr	r2, [r7, #12]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	f023 0302 	bic.w	r3, r3, #2
 8002e2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	697a      	ldr	r2, [r7, #20]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	4a20      	ldr	r2, [pc, #128]	; (8002ebc <TIM_OC1_SetConfig+0xd8>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d003      	beq.n	8002e48 <TIM_OC1_SetConfig+0x64>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	4a1f      	ldr	r2, [pc, #124]	; (8002ec0 <TIM_OC1_SetConfig+0xdc>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d10c      	bne.n	8002e62 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	f023 0308 	bic.w	r3, r3, #8
 8002e4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	697a      	ldr	r2, [r7, #20]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	f023 0304 	bic.w	r3, r3, #4
 8002e60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4a15      	ldr	r2, [pc, #84]	; (8002ebc <TIM_OC1_SetConfig+0xd8>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d003      	beq.n	8002e72 <TIM_OC1_SetConfig+0x8e>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4a14      	ldr	r2, [pc, #80]	; (8002ec0 <TIM_OC1_SetConfig+0xdc>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d111      	bne.n	8002e96 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002e80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	695b      	ldr	r3, [r3, #20]
 8002e86:	693a      	ldr	r2, [r7, #16]
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	699b      	ldr	r3, [r3, #24]
 8002e90:	693a      	ldr	r2, [r7, #16]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	693a      	ldr	r2, [r7, #16]
 8002e9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	68fa      	ldr	r2, [r7, #12]
 8002ea0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	685a      	ldr	r2, [r3, #4]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	697a      	ldr	r2, [r7, #20]
 8002eae:	621a      	str	r2, [r3, #32]
}
 8002eb0:	bf00      	nop
 8002eb2:	371c      	adds	r7, #28
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr
 8002ebc:	40010000 	.word	0x40010000
 8002ec0:	40010400 	.word	0x40010400

08002ec4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b087      	sub	sp, #28
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6a1b      	ldr	r3, [r3, #32]
 8002ed2:	f023 0210 	bic.w	r2, r3, #16
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6a1b      	ldr	r3, [r3, #32]
 8002ede:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	699b      	ldr	r3, [r3, #24]
 8002eea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ef2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002efa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	021b      	lsls	r3, r3, #8
 8002f02:	68fa      	ldr	r2, [r7, #12]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	f023 0320 	bic.w	r3, r3, #32
 8002f0e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	011b      	lsls	r3, r3, #4
 8002f16:	697a      	ldr	r2, [r7, #20]
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	4a22      	ldr	r2, [pc, #136]	; (8002fa8 <TIM_OC2_SetConfig+0xe4>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d003      	beq.n	8002f2c <TIM_OC2_SetConfig+0x68>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	4a21      	ldr	r2, [pc, #132]	; (8002fac <TIM_OC2_SetConfig+0xe8>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d10d      	bne.n	8002f48 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	011b      	lsls	r3, r3, #4
 8002f3a:	697a      	ldr	r2, [r7, #20]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f46:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	4a17      	ldr	r2, [pc, #92]	; (8002fa8 <TIM_OC2_SetConfig+0xe4>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d003      	beq.n	8002f58 <TIM_OC2_SetConfig+0x94>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	4a16      	ldr	r2, [pc, #88]	; (8002fac <TIM_OC2_SetConfig+0xe8>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d113      	bne.n	8002f80 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002f5e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002f66:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	695b      	ldr	r3, [r3, #20]
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	693a      	ldr	r2, [r7, #16]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	699b      	ldr	r3, [r3, #24]
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	693a      	ldr	r2, [r7, #16]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	693a      	ldr	r2, [r7, #16]
 8002f84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	68fa      	ldr	r2, [r7, #12]
 8002f8a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	685a      	ldr	r2, [r3, #4]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	697a      	ldr	r2, [r7, #20]
 8002f98:	621a      	str	r2, [r3, #32]
}
 8002f9a:	bf00      	nop
 8002f9c:	371c      	adds	r7, #28
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr
 8002fa6:	bf00      	nop
 8002fa8:	40010000 	.word	0x40010000
 8002fac:	40010400 	.word	0x40010400

08002fb0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b087      	sub	sp, #28
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
 8002fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6a1b      	ldr	r3, [r3, #32]
 8002fbe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6a1b      	ldr	r3, [r3, #32]
 8002fca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	69db      	ldr	r3, [r3, #28]
 8002fd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f023 0303 	bic.w	r3, r3, #3
 8002fe6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	68fa      	ldr	r2, [r7, #12]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002ff8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	021b      	lsls	r3, r3, #8
 8003000:	697a      	ldr	r2, [r7, #20]
 8003002:	4313      	orrs	r3, r2
 8003004:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4a21      	ldr	r2, [pc, #132]	; (8003090 <TIM_OC3_SetConfig+0xe0>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d003      	beq.n	8003016 <TIM_OC3_SetConfig+0x66>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4a20      	ldr	r2, [pc, #128]	; (8003094 <TIM_OC3_SetConfig+0xe4>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d10d      	bne.n	8003032 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800301c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	68db      	ldr	r3, [r3, #12]
 8003022:	021b      	lsls	r3, r3, #8
 8003024:	697a      	ldr	r2, [r7, #20]
 8003026:	4313      	orrs	r3, r2
 8003028:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003030:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4a16      	ldr	r2, [pc, #88]	; (8003090 <TIM_OC3_SetConfig+0xe0>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d003      	beq.n	8003042 <TIM_OC3_SetConfig+0x92>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	4a15      	ldr	r2, [pc, #84]	; (8003094 <TIM_OC3_SetConfig+0xe4>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d113      	bne.n	800306a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003048:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003050:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	695b      	ldr	r3, [r3, #20]
 8003056:	011b      	lsls	r3, r3, #4
 8003058:	693a      	ldr	r2, [r7, #16]
 800305a:	4313      	orrs	r3, r2
 800305c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	699b      	ldr	r3, [r3, #24]
 8003062:	011b      	lsls	r3, r3, #4
 8003064:	693a      	ldr	r2, [r7, #16]
 8003066:	4313      	orrs	r3, r2
 8003068:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	693a      	ldr	r2, [r7, #16]
 800306e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	68fa      	ldr	r2, [r7, #12]
 8003074:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	685a      	ldr	r2, [r3, #4]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	697a      	ldr	r2, [r7, #20]
 8003082:	621a      	str	r2, [r3, #32]
}
 8003084:	bf00      	nop
 8003086:	371c      	adds	r7, #28
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr
 8003090:	40010000 	.word	0x40010000
 8003094:	40010400 	.word	0x40010400

08003098 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003098:	b480      	push	{r7}
 800309a:	b087      	sub	sp, #28
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a1b      	ldr	r3, [r3, #32]
 80030a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6a1b      	ldr	r3, [r3, #32]
 80030b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	69db      	ldr	r3, [r3, #28]
 80030be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	021b      	lsls	r3, r3, #8
 80030d6:	68fa      	ldr	r2, [r7, #12]
 80030d8:	4313      	orrs	r3, r2
 80030da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80030e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	031b      	lsls	r3, r3, #12
 80030ea:	693a      	ldr	r2, [r7, #16]
 80030ec:	4313      	orrs	r3, r2
 80030ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	4a12      	ldr	r2, [pc, #72]	; (800313c <TIM_OC4_SetConfig+0xa4>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d003      	beq.n	8003100 <TIM_OC4_SetConfig+0x68>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	4a11      	ldr	r2, [pc, #68]	; (8003140 <TIM_OC4_SetConfig+0xa8>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d109      	bne.n	8003114 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003106:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	695b      	ldr	r3, [r3, #20]
 800310c:	019b      	lsls	r3, r3, #6
 800310e:	697a      	ldr	r2, [r7, #20]
 8003110:	4313      	orrs	r3, r2
 8003112:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	697a      	ldr	r2, [r7, #20]
 8003118:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	68fa      	ldr	r2, [r7, #12]
 800311e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	685a      	ldr	r2, [r3, #4]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	693a      	ldr	r2, [r7, #16]
 800312c:	621a      	str	r2, [r3, #32]
}
 800312e:	bf00      	nop
 8003130:	371c      	adds	r7, #28
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr
 800313a:	bf00      	nop
 800313c:	40010000 	.word	0x40010000
 8003140:	40010400 	.word	0x40010400

08003144 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003144:	b480      	push	{r7}
 8003146:	b087      	sub	sp, #28
 8003148:	af00      	add	r7, sp, #0
 800314a:	60f8      	str	r0, [r7, #12]
 800314c:	60b9      	str	r1, [r7, #8]
 800314e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	6a1b      	ldr	r3, [r3, #32]
 8003154:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	6a1b      	ldr	r3, [r3, #32]
 800315a:	f023 0201 	bic.w	r2, r3, #1
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	699b      	ldr	r3, [r3, #24]
 8003166:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800316e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	011b      	lsls	r3, r3, #4
 8003174:	693a      	ldr	r2, [r7, #16]
 8003176:	4313      	orrs	r3, r2
 8003178:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	f023 030a 	bic.w	r3, r3, #10
 8003180:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003182:	697a      	ldr	r2, [r7, #20]
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	4313      	orrs	r3, r2
 8003188:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	693a      	ldr	r2, [r7, #16]
 800318e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	697a      	ldr	r2, [r7, #20]
 8003194:	621a      	str	r2, [r3, #32]
}
 8003196:	bf00      	nop
 8003198:	371c      	adds	r7, #28
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr

080031a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031a2:	b480      	push	{r7}
 80031a4:	b087      	sub	sp, #28
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	60f8      	str	r0, [r7, #12]
 80031aa:	60b9      	str	r1, [r7, #8]
 80031ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	6a1b      	ldr	r3, [r3, #32]
 80031b2:	f023 0210 	bic.w	r2, r3, #16
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	699b      	ldr	r3, [r3, #24]
 80031be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6a1b      	ldr	r3, [r3, #32]
 80031c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80031cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	031b      	lsls	r3, r3, #12
 80031d2:	697a      	ldr	r2, [r7, #20]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80031de:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	011b      	lsls	r3, r3, #4
 80031e4:	693a      	ldr	r2, [r7, #16]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	697a      	ldr	r2, [r7, #20]
 80031ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	693a      	ldr	r2, [r7, #16]
 80031f4:	621a      	str	r2, [r3, #32]
}
 80031f6:	bf00      	nop
 80031f8:	371c      	adds	r7, #28
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr

08003202 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003202:	b480      	push	{r7}
 8003204:	b085      	sub	sp, #20
 8003206:	af00      	add	r7, sp, #0
 8003208:	6078      	str	r0, [r7, #4]
 800320a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003218:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800321a:	683a      	ldr	r2, [r7, #0]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	4313      	orrs	r3, r2
 8003220:	f043 0307 	orr.w	r3, r3, #7
 8003224:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	68fa      	ldr	r2, [r7, #12]
 800322a:	609a      	str	r2, [r3, #8]
}
 800322c:	bf00      	nop
 800322e:	3714      	adds	r7, #20
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr

08003238 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003238:	b480      	push	{r7}
 800323a:	b087      	sub	sp, #28
 800323c:	af00      	add	r7, sp, #0
 800323e:	60f8      	str	r0, [r7, #12]
 8003240:	60b9      	str	r1, [r7, #8]
 8003242:	607a      	str	r2, [r7, #4]
 8003244:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003252:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	021a      	lsls	r2, r3, #8
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	431a      	orrs	r2, r3
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	4313      	orrs	r3, r2
 8003260:	697a      	ldr	r2, [r7, #20]
 8003262:	4313      	orrs	r3, r2
 8003264:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	697a      	ldr	r2, [r7, #20]
 800326a:	609a      	str	r2, [r3, #8]
}
 800326c:	bf00      	nop
 800326e:	371c      	adds	r7, #28
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr

08003278 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003278:	b480      	push	{r7}
 800327a:	b087      	sub	sp, #28
 800327c:	af00      	add	r7, sp, #0
 800327e:	60f8      	str	r0, [r7, #12]
 8003280:	60b9      	str	r1, [r7, #8]
 8003282:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	f003 031f 	and.w	r3, r3, #31
 800328a:	2201      	movs	r2, #1
 800328c:	fa02 f303 	lsl.w	r3, r2, r3
 8003290:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	6a1a      	ldr	r2, [r3, #32]
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	43db      	mvns	r3, r3
 800329a:	401a      	ands	r2, r3
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	6a1a      	ldr	r2, [r3, #32]
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	f003 031f 	and.w	r3, r3, #31
 80032aa:	6879      	ldr	r1, [r7, #4]
 80032ac:	fa01 f303 	lsl.w	r3, r1, r3
 80032b0:	431a      	orrs	r2, r3
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	621a      	str	r2, [r3, #32]
}
 80032b6:	bf00      	nop
 80032b8:	371c      	adds	r7, #28
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr
	...

080032c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b085      	sub	sp, #20
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
 80032cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d101      	bne.n	80032dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80032d8:	2302      	movs	r3, #2
 80032da:	e05a      	b.n	8003392 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2201      	movs	r2, #1
 80032e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2202      	movs	r2, #2
 80032e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003302:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	68fa      	ldr	r2, [r7, #12]
 800330a:	4313      	orrs	r3, r2
 800330c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	68fa      	ldr	r2, [r7, #12]
 8003314:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a21      	ldr	r2, [pc, #132]	; (80033a0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d022      	beq.n	8003366 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003328:	d01d      	beq.n	8003366 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a1d      	ldr	r2, [pc, #116]	; (80033a4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d018      	beq.n	8003366 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a1b      	ldr	r2, [pc, #108]	; (80033a8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d013      	beq.n	8003366 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a1a      	ldr	r2, [pc, #104]	; (80033ac <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d00e      	beq.n	8003366 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a18      	ldr	r2, [pc, #96]	; (80033b0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d009      	beq.n	8003366 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a17      	ldr	r2, [pc, #92]	; (80033b4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d004      	beq.n	8003366 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a15      	ldr	r2, [pc, #84]	; (80033b8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d10c      	bne.n	8003380 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800336c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	68ba      	ldr	r2, [r7, #8]
 8003374:	4313      	orrs	r3, r2
 8003376:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	68ba      	ldr	r2, [r7, #8]
 800337e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2201      	movs	r2, #1
 8003384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003390:	2300      	movs	r3, #0
}
 8003392:	4618      	mov	r0, r3
 8003394:	3714      	adds	r7, #20
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr
 800339e:	bf00      	nop
 80033a0:	40010000 	.word	0x40010000
 80033a4:	40000400 	.word	0x40000400
 80033a8:	40000800 	.word	0x40000800
 80033ac:	40000c00 	.word	0x40000c00
 80033b0:	40010400 	.word	0x40010400
 80033b4:	40014000 	.word	0x40014000
 80033b8:	40001800 	.word	0x40001800

080033bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b082      	sub	sp, #8
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d101      	bne.n	80033ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e03f      	b.n	800344e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d106      	bne.n	80033e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f7fd febe 	bl	8001164 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2224      	movs	r2, #36	; 0x24
 80033ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	68da      	ldr	r2, [r3, #12]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80033fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f000 fb4b 	bl	8003a9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	691a      	ldr	r2, [r3, #16]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003414:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	695a      	ldr	r2, [r3, #20]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003424:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	68da      	ldr	r2, [r3, #12]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003434:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2220      	movs	r2, #32
 8003440:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2220      	movs	r2, #32
 8003448:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800344c:	2300      	movs	r3, #0
}
 800344e:	4618      	mov	r0, r3
 8003450:	3708      	adds	r7, #8
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}

08003456 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003456:	b580      	push	{r7, lr}
 8003458:	b088      	sub	sp, #32
 800345a:	af02      	add	r7, sp, #8
 800345c:	60f8      	str	r0, [r7, #12]
 800345e:	60b9      	str	r1, [r7, #8]
 8003460:	603b      	str	r3, [r7, #0]
 8003462:	4613      	mov	r3, r2
 8003464:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003466:	2300      	movs	r3, #0
 8003468:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003470:	b2db      	uxtb	r3, r3
 8003472:	2b20      	cmp	r3, #32
 8003474:	f040 8083 	bne.w	800357e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d002      	beq.n	8003484 <HAL_UART_Transmit+0x2e>
 800347e:	88fb      	ldrh	r3, [r7, #6]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d101      	bne.n	8003488 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e07b      	b.n	8003580 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800348e:	2b01      	cmp	r3, #1
 8003490:	d101      	bne.n	8003496 <HAL_UART_Transmit+0x40>
 8003492:	2302      	movs	r3, #2
 8003494:	e074      	b.n	8003580 <HAL_UART_Transmit+0x12a>
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2201      	movs	r2, #1
 800349a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2200      	movs	r2, #0
 80034a2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2221      	movs	r2, #33	; 0x21
 80034a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80034ac:	f7fd ff88 	bl	80013c0 <HAL_GetTick>
 80034b0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	88fa      	ldrh	r2, [r7, #6]
 80034b6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	88fa      	ldrh	r2, [r7, #6]
 80034bc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2200      	movs	r2, #0
 80034c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80034c6:	e042      	b.n	800354e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	3b01      	subs	r3, #1
 80034d0:	b29a      	uxth	r2, r3
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034de:	d122      	bne.n	8003526 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	9300      	str	r3, [sp, #0]
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	2200      	movs	r2, #0
 80034e8:	2180      	movs	r1, #128	; 0x80
 80034ea:	68f8      	ldr	r0, [r7, #12]
 80034ec:	f000 f96a 	bl	80037c4 <UART_WaitOnFlagUntilTimeout>
 80034f0:	4603      	mov	r3, r0
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d001      	beq.n	80034fa <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	e042      	b.n	8003580 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	881b      	ldrh	r3, [r3, #0]
 8003502:	461a      	mov	r2, r3
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800350c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	691b      	ldr	r3, [r3, #16]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d103      	bne.n	800351e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	3302      	adds	r3, #2
 800351a:	60bb      	str	r3, [r7, #8]
 800351c:	e017      	b.n	800354e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	3301      	adds	r3, #1
 8003522:	60bb      	str	r3, [r7, #8]
 8003524:	e013      	b.n	800354e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	9300      	str	r3, [sp, #0]
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	2200      	movs	r2, #0
 800352e:	2180      	movs	r1, #128	; 0x80
 8003530:	68f8      	ldr	r0, [r7, #12]
 8003532:	f000 f947 	bl	80037c4 <UART_WaitOnFlagUntilTimeout>
 8003536:	4603      	mov	r3, r0
 8003538:	2b00      	cmp	r3, #0
 800353a:	d001      	beq.n	8003540 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800353c:	2303      	movs	r3, #3
 800353e:	e01f      	b.n	8003580 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	1c5a      	adds	r2, r3, #1
 8003544:	60ba      	str	r2, [r7, #8]
 8003546:	781a      	ldrb	r2, [r3, #0]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003552:	b29b      	uxth	r3, r3
 8003554:	2b00      	cmp	r3, #0
 8003556:	d1b7      	bne.n	80034c8 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	9300      	str	r3, [sp, #0]
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	2200      	movs	r2, #0
 8003560:	2140      	movs	r1, #64	; 0x40
 8003562:	68f8      	ldr	r0, [r7, #12]
 8003564:	f000 f92e 	bl	80037c4 <UART_WaitOnFlagUntilTimeout>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d001      	beq.n	8003572 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	e006      	b.n	8003580 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2220      	movs	r2, #32
 8003576:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800357a:	2300      	movs	r3, #0
 800357c:	e000      	b.n	8003580 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800357e:	2302      	movs	r3, #2
  }
}
 8003580:	4618      	mov	r0, r3
 8003582:	3718      	adds	r7, #24
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}

08003588 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b088      	sub	sp, #32
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	68db      	ldr	r3, [r3, #12]
 800359e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	695b      	ldr	r3, [r3, #20]
 80035a6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80035a8:	2300      	movs	r3, #0
 80035aa:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80035ac:	2300      	movs	r3, #0
 80035ae:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80035b0:	69fb      	ldr	r3, [r7, #28]
 80035b2:	f003 030f 	and.w	r3, r3, #15
 80035b6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d10d      	bne.n	80035da <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	f003 0320 	and.w	r3, r3, #32
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d008      	beq.n	80035da <HAL_UART_IRQHandler+0x52>
 80035c8:	69bb      	ldr	r3, [r7, #24]
 80035ca:	f003 0320 	and.w	r3, r3, #32
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d003      	beq.n	80035da <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f000 f9e0 	bl	8003998 <UART_Receive_IT>
      return;
 80035d8:	e0d1      	b.n	800377e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	f000 80b0 	beq.w	8003742 <HAL_UART_IRQHandler+0x1ba>
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	f003 0301 	and.w	r3, r3, #1
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d105      	bne.n	80035f8 <HAL_UART_IRQHandler+0x70>
 80035ec:	69bb      	ldr	r3, [r7, #24]
 80035ee:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	f000 80a5 	beq.w	8003742 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80035f8:	69fb      	ldr	r3, [r7, #28]
 80035fa:	f003 0301 	and.w	r3, r3, #1
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d00a      	beq.n	8003618 <HAL_UART_IRQHandler+0x90>
 8003602:	69bb      	ldr	r3, [r7, #24]
 8003604:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003608:	2b00      	cmp	r3, #0
 800360a:	d005      	beq.n	8003618 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003610:	f043 0201 	orr.w	r2, r3, #1
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	f003 0304 	and.w	r3, r3, #4
 800361e:	2b00      	cmp	r3, #0
 8003620:	d00a      	beq.n	8003638 <HAL_UART_IRQHandler+0xb0>
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	f003 0301 	and.w	r3, r3, #1
 8003628:	2b00      	cmp	r3, #0
 800362a:	d005      	beq.n	8003638 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003630:	f043 0202 	orr.w	r2, r3, #2
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003638:	69fb      	ldr	r3, [r7, #28]
 800363a:	f003 0302 	and.w	r3, r3, #2
 800363e:	2b00      	cmp	r3, #0
 8003640:	d00a      	beq.n	8003658 <HAL_UART_IRQHandler+0xd0>
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	f003 0301 	and.w	r3, r3, #1
 8003648:	2b00      	cmp	r3, #0
 800364a:	d005      	beq.n	8003658 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003650:	f043 0204 	orr.w	r2, r3, #4
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003658:	69fb      	ldr	r3, [r7, #28]
 800365a:	f003 0308 	and.w	r3, r3, #8
 800365e:	2b00      	cmp	r3, #0
 8003660:	d00f      	beq.n	8003682 <HAL_UART_IRQHandler+0xfa>
 8003662:	69bb      	ldr	r3, [r7, #24]
 8003664:	f003 0320 	and.w	r3, r3, #32
 8003668:	2b00      	cmp	r3, #0
 800366a:	d104      	bne.n	8003676 <HAL_UART_IRQHandler+0xee>
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	f003 0301 	and.w	r3, r3, #1
 8003672:	2b00      	cmp	r3, #0
 8003674:	d005      	beq.n	8003682 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800367a:	f043 0208 	orr.w	r2, r3, #8
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003686:	2b00      	cmp	r3, #0
 8003688:	d078      	beq.n	800377c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	f003 0320 	and.w	r3, r3, #32
 8003690:	2b00      	cmp	r3, #0
 8003692:	d007      	beq.n	80036a4 <HAL_UART_IRQHandler+0x11c>
 8003694:	69bb      	ldr	r3, [r7, #24]
 8003696:	f003 0320 	and.w	r3, r3, #32
 800369a:	2b00      	cmp	r3, #0
 800369c:	d002      	beq.n	80036a4 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f000 f97a 	bl	8003998 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	695b      	ldr	r3, [r3, #20]
 80036aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ae:	2b40      	cmp	r3, #64	; 0x40
 80036b0:	bf0c      	ite	eq
 80036b2:	2301      	moveq	r3, #1
 80036b4:	2300      	movne	r3, #0
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036be:	f003 0308 	and.w	r3, r3, #8
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d102      	bne.n	80036cc <HAL_UART_IRQHandler+0x144>
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d031      	beq.n	8003730 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f000 f8c3 	bl	8003858 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	695b      	ldr	r3, [r3, #20]
 80036d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036dc:	2b40      	cmp	r3, #64	; 0x40
 80036de:	d123      	bne.n	8003728 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	695a      	ldr	r2, [r3, #20]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036ee:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d013      	beq.n	8003720 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036fc:	4a21      	ldr	r2, [pc, #132]	; (8003784 <HAL_UART_IRQHandler+0x1fc>)
 80036fe:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003704:	4618      	mov	r0, r3
 8003706:	f7fd ff9a 	bl	800163e <HAL_DMA_Abort_IT>
 800370a:	4603      	mov	r3, r0
 800370c:	2b00      	cmp	r3, #0
 800370e:	d016      	beq.n	800373e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003714:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800371a:	4610      	mov	r0, r2
 800371c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800371e:	e00e      	b.n	800373e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f000 f845 	bl	80037b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003726:	e00a      	b.n	800373e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	f000 f841 	bl	80037b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800372e:	e006      	b.n	800373e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f000 f83d 	bl	80037b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800373c:	e01e      	b.n	800377c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800373e:	bf00      	nop
    return;
 8003740:	e01c      	b.n	800377c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003742:	69fb      	ldr	r3, [r7, #28]
 8003744:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003748:	2b00      	cmp	r3, #0
 800374a:	d008      	beq.n	800375e <HAL_UART_IRQHandler+0x1d6>
 800374c:	69bb      	ldr	r3, [r7, #24]
 800374e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003752:	2b00      	cmp	r3, #0
 8003754:	d003      	beq.n	800375e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f000 f8b0 	bl	80038bc <UART_Transmit_IT>
    return;
 800375c:	e00f      	b.n	800377e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800375e:	69fb      	ldr	r3, [r7, #28]
 8003760:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003764:	2b00      	cmp	r3, #0
 8003766:	d00a      	beq.n	800377e <HAL_UART_IRQHandler+0x1f6>
 8003768:	69bb      	ldr	r3, [r7, #24]
 800376a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800376e:	2b00      	cmp	r3, #0
 8003770:	d005      	beq.n	800377e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f000 f8f8 	bl	8003968 <UART_EndTransmit_IT>
    return;
 8003778:	bf00      	nop
 800377a:	e000      	b.n	800377e <HAL_UART_IRQHandler+0x1f6>
    return;
 800377c:	bf00      	nop
  }
}
 800377e:	3720      	adds	r7, #32
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}
 8003784:	08003895 	.word	0x08003895

08003788 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003788:	b480      	push	{r7}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003790:	bf00      	nop
 8003792:	370c      	adds	r7, #12
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr

0800379c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800379c:	b480      	push	{r7}
 800379e:	b083      	sub	sp, #12
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80037a4:	bf00      	nop
 80037a6:	370c      	adds	r7, #12
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr

080037b0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b083      	sub	sp, #12
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80037b8:	bf00      	nop
 80037ba:	370c      	adds	r7, #12
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr

080037c4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b084      	sub	sp, #16
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	60f8      	str	r0, [r7, #12]
 80037cc:	60b9      	str	r1, [r7, #8]
 80037ce:	603b      	str	r3, [r7, #0]
 80037d0:	4613      	mov	r3, r2
 80037d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037d4:	e02c      	b.n	8003830 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037d6:	69bb      	ldr	r3, [r7, #24]
 80037d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037dc:	d028      	beq.n	8003830 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80037de:	69bb      	ldr	r3, [r7, #24]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d007      	beq.n	80037f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80037e4:	f7fd fdec 	bl	80013c0 <HAL_GetTick>
 80037e8:	4602      	mov	r2, r0
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	69ba      	ldr	r2, [r7, #24]
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d21d      	bcs.n	8003830 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	68da      	ldr	r2, [r3, #12]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003802:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	695a      	ldr	r2, [r3, #20]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f022 0201 	bic.w	r2, r2, #1
 8003812:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2220      	movs	r2, #32
 8003818:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2220      	movs	r2, #32
 8003820:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2200      	movs	r2, #0
 8003828:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800382c:	2303      	movs	r3, #3
 800382e:	e00f      	b.n	8003850 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	4013      	ands	r3, r2
 800383a:	68ba      	ldr	r2, [r7, #8]
 800383c:	429a      	cmp	r2, r3
 800383e:	bf0c      	ite	eq
 8003840:	2301      	moveq	r3, #1
 8003842:	2300      	movne	r3, #0
 8003844:	b2db      	uxtb	r3, r3
 8003846:	461a      	mov	r2, r3
 8003848:	79fb      	ldrb	r3, [r7, #7]
 800384a:	429a      	cmp	r2, r3
 800384c:	d0c3      	beq.n	80037d6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800384e:	2300      	movs	r3, #0
}
 8003850:	4618      	mov	r0, r3
 8003852:	3710      	adds	r7, #16
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}

08003858 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003858:	b480      	push	{r7}
 800385a:	b083      	sub	sp, #12
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	68da      	ldr	r2, [r3, #12]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800386e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	695a      	ldr	r2, [r3, #20]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f022 0201 	bic.w	r2, r2, #1
 800387e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2220      	movs	r2, #32
 8003884:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003888:	bf00      	nop
 800388a:	370c      	adds	r7, #12
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr

08003894 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b084      	sub	sp, #16
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038a0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2200      	movs	r2, #0
 80038a6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2200      	movs	r2, #0
 80038ac:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80038ae:	68f8      	ldr	r0, [r7, #12]
 80038b0:	f7ff ff7e 	bl	80037b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80038b4:	bf00      	nop
 80038b6:	3710      	adds	r7, #16
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}

080038bc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80038bc:	b480      	push	{r7}
 80038be:	b085      	sub	sp, #20
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	2b21      	cmp	r3, #33	; 0x21
 80038ce:	d144      	bne.n	800395a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038d8:	d11a      	bne.n	8003910 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a1b      	ldr	r3, [r3, #32]
 80038de:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	881b      	ldrh	r3, [r3, #0]
 80038e4:	461a      	mov	r2, r3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038ee:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	691b      	ldr	r3, [r3, #16]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d105      	bne.n	8003904 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6a1b      	ldr	r3, [r3, #32]
 80038fc:	1c9a      	adds	r2, r3, #2
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	621a      	str	r2, [r3, #32]
 8003902:	e00e      	b.n	8003922 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6a1b      	ldr	r3, [r3, #32]
 8003908:	1c5a      	adds	r2, r3, #1
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	621a      	str	r2, [r3, #32]
 800390e:	e008      	b.n	8003922 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6a1b      	ldr	r3, [r3, #32]
 8003914:	1c59      	adds	r1, r3, #1
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	6211      	str	r1, [r2, #32]
 800391a:	781a      	ldrb	r2, [r3, #0]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003926:	b29b      	uxth	r3, r3
 8003928:	3b01      	subs	r3, #1
 800392a:	b29b      	uxth	r3, r3
 800392c:	687a      	ldr	r2, [r7, #4]
 800392e:	4619      	mov	r1, r3
 8003930:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003932:	2b00      	cmp	r3, #0
 8003934:	d10f      	bne.n	8003956 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	68da      	ldr	r2, [r3, #12]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003944:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	68da      	ldr	r2, [r3, #12]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003954:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003956:	2300      	movs	r3, #0
 8003958:	e000      	b.n	800395c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800395a:	2302      	movs	r3, #2
  }
}
 800395c:	4618      	mov	r0, r3
 800395e:	3714      	adds	r7, #20
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr

08003968 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b082      	sub	sp, #8
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	68da      	ldr	r2, [r3, #12]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800397e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2220      	movs	r2, #32
 8003984:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f7ff fefd 	bl	8003788 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800398e:	2300      	movs	r3, #0
}
 8003990:	4618      	mov	r0, r3
 8003992:	3708      	adds	r7, #8
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}

08003998 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b084      	sub	sp, #16
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	2b22      	cmp	r3, #34	; 0x22
 80039aa:	d171      	bne.n	8003a90 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039b4:	d123      	bne.n	80039fe <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ba:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	691b      	ldr	r3, [r3, #16]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d10e      	bne.n	80039e2 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	b29b      	uxth	r3, r3
 80039cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039d0:	b29a      	uxth	r2, r3
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039da:	1c9a      	adds	r2, r3, #2
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	629a      	str	r2, [r3, #40]	; 0x28
 80039e0:	e029      	b.n	8003a36 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	b2db      	uxtb	r3, r3
 80039ec:	b29a      	uxth	r2, r3
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f6:	1c5a      	adds	r2, r3, #1
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	629a      	str	r2, [r3, #40]	; 0x28
 80039fc:	e01b      	b.n	8003a36 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	691b      	ldr	r3, [r3, #16]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d10a      	bne.n	8003a1c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	6858      	ldr	r0, [r3, #4]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a10:	1c59      	adds	r1, r3, #1
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	6291      	str	r1, [r2, #40]	; 0x28
 8003a16:	b2c2      	uxtb	r2, r0
 8003a18:	701a      	strb	r2, [r3, #0]
 8003a1a:	e00c      	b.n	8003a36 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	b2da      	uxtb	r2, r3
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a28:	1c58      	adds	r0, r3, #1
 8003a2a:	6879      	ldr	r1, [r7, #4]
 8003a2c:	6288      	str	r0, [r1, #40]	; 0x28
 8003a2e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003a32:	b2d2      	uxtb	r2, r2
 8003a34:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a3a:	b29b      	uxth	r3, r3
 8003a3c:	3b01      	subs	r3, #1
 8003a3e:	b29b      	uxth	r3, r3
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	4619      	mov	r1, r3
 8003a44:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d120      	bne.n	8003a8c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	68da      	ldr	r2, [r3, #12]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f022 0220 	bic.w	r2, r2, #32
 8003a58:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	68da      	ldr	r2, [r3, #12]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a68:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	695a      	ldr	r2, [r3, #20]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f022 0201 	bic.w	r2, r2, #1
 8003a78:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2220      	movs	r2, #32
 8003a7e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f7ff fe8a 	bl	800379c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	e002      	b.n	8003a92 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	e000      	b.n	8003a92 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003a90:	2302      	movs	r3, #2
  }
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3710      	adds	r7, #16
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
	...

08003a9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003aa0:	b085      	sub	sp, #20
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	691b      	ldr	r3, [r3, #16]
 8003aac:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	68da      	ldr	r2, [r3, #12]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	430a      	orrs	r2, r1
 8003aba:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	689a      	ldr	r2, [r3, #8]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	691b      	ldr	r3, [r3, #16]
 8003ac4:	431a      	orrs	r2, r3
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	695b      	ldr	r3, [r3, #20]
 8003aca:	431a      	orrs	r2, r3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	69db      	ldr	r3, [r3, #28]
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	68db      	ldr	r3, [r3, #12]
 8003ada:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003ade:	f023 030c 	bic.w	r3, r3, #12
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	6812      	ldr	r2, [r2, #0]
 8003ae6:	68f9      	ldr	r1, [r7, #12]
 8003ae8:	430b      	orrs	r3, r1
 8003aea:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	695b      	ldr	r3, [r3, #20]
 8003af2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	699a      	ldr	r2, [r3, #24]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	430a      	orrs	r2, r1
 8003b00:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	69db      	ldr	r3, [r3, #28]
 8003b06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b0a:	f040 818b 	bne.w	8003e24 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4ac1      	ldr	r2, [pc, #772]	; (8003e18 <UART_SetConfig+0x37c>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d005      	beq.n	8003b24 <UART_SetConfig+0x88>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4abf      	ldr	r2, [pc, #764]	; (8003e1c <UART_SetConfig+0x380>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	f040 80bd 	bne.w	8003c9e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003b24:	f7fe fbb0 	bl	8002288 <HAL_RCC_GetPCLK2Freq>
 8003b28:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	461d      	mov	r5, r3
 8003b2e:	f04f 0600 	mov.w	r6, #0
 8003b32:	46a8      	mov	r8, r5
 8003b34:	46b1      	mov	r9, r6
 8003b36:	eb18 0308 	adds.w	r3, r8, r8
 8003b3a:	eb49 0409 	adc.w	r4, r9, r9
 8003b3e:	4698      	mov	r8, r3
 8003b40:	46a1      	mov	r9, r4
 8003b42:	eb18 0805 	adds.w	r8, r8, r5
 8003b46:	eb49 0906 	adc.w	r9, r9, r6
 8003b4a:	f04f 0100 	mov.w	r1, #0
 8003b4e:	f04f 0200 	mov.w	r2, #0
 8003b52:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003b56:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003b5a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003b5e:	4688      	mov	r8, r1
 8003b60:	4691      	mov	r9, r2
 8003b62:	eb18 0005 	adds.w	r0, r8, r5
 8003b66:	eb49 0106 	adc.w	r1, r9, r6
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	461d      	mov	r5, r3
 8003b70:	f04f 0600 	mov.w	r6, #0
 8003b74:	196b      	adds	r3, r5, r5
 8003b76:	eb46 0406 	adc.w	r4, r6, r6
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	4623      	mov	r3, r4
 8003b7e:	f7fc fb2b 	bl	80001d8 <__aeabi_uldivmod>
 8003b82:	4603      	mov	r3, r0
 8003b84:	460c      	mov	r4, r1
 8003b86:	461a      	mov	r2, r3
 8003b88:	4ba5      	ldr	r3, [pc, #660]	; (8003e20 <UART_SetConfig+0x384>)
 8003b8a:	fba3 2302 	umull	r2, r3, r3, r2
 8003b8e:	095b      	lsrs	r3, r3, #5
 8003b90:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	461d      	mov	r5, r3
 8003b98:	f04f 0600 	mov.w	r6, #0
 8003b9c:	46a9      	mov	r9, r5
 8003b9e:	46b2      	mov	sl, r6
 8003ba0:	eb19 0309 	adds.w	r3, r9, r9
 8003ba4:	eb4a 040a 	adc.w	r4, sl, sl
 8003ba8:	4699      	mov	r9, r3
 8003baa:	46a2      	mov	sl, r4
 8003bac:	eb19 0905 	adds.w	r9, r9, r5
 8003bb0:	eb4a 0a06 	adc.w	sl, sl, r6
 8003bb4:	f04f 0100 	mov.w	r1, #0
 8003bb8:	f04f 0200 	mov.w	r2, #0
 8003bbc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003bc0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003bc4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003bc8:	4689      	mov	r9, r1
 8003bca:	4692      	mov	sl, r2
 8003bcc:	eb19 0005 	adds.w	r0, r9, r5
 8003bd0:	eb4a 0106 	adc.w	r1, sl, r6
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	461d      	mov	r5, r3
 8003bda:	f04f 0600 	mov.w	r6, #0
 8003bde:	196b      	adds	r3, r5, r5
 8003be0:	eb46 0406 	adc.w	r4, r6, r6
 8003be4:	461a      	mov	r2, r3
 8003be6:	4623      	mov	r3, r4
 8003be8:	f7fc faf6 	bl	80001d8 <__aeabi_uldivmod>
 8003bec:	4603      	mov	r3, r0
 8003bee:	460c      	mov	r4, r1
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	4b8b      	ldr	r3, [pc, #556]	; (8003e20 <UART_SetConfig+0x384>)
 8003bf4:	fba3 1302 	umull	r1, r3, r3, r2
 8003bf8:	095b      	lsrs	r3, r3, #5
 8003bfa:	2164      	movs	r1, #100	; 0x64
 8003bfc:	fb01 f303 	mul.w	r3, r1, r3
 8003c00:	1ad3      	subs	r3, r2, r3
 8003c02:	00db      	lsls	r3, r3, #3
 8003c04:	3332      	adds	r3, #50	; 0x32
 8003c06:	4a86      	ldr	r2, [pc, #536]	; (8003e20 <UART_SetConfig+0x384>)
 8003c08:	fba2 2303 	umull	r2, r3, r2, r3
 8003c0c:	095b      	lsrs	r3, r3, #5
 8003c0e:	005b      	lsls	r3, r3, #1
 8003c10:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003c14:	4498      	add	r8, r3
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	461d      	mov	r5, r3
 8003c1a:	f04f 0600 	mov.w	r6, #0
 8003c1e:	46a9      	mov	r9, r5
 8003c20:	46b2      	mov	sl, r6
 8003c22:	eb19 0309 	adds.w	r3, r9, r9
 8003c26:	eb4a 040a 	adc.w	r4, sl, sl
 8003c2a:	4699      	mov	r9, r3
 8003c2c:	46a2      	mov	sl, r4
 8003c2e:	eb19 0905 	adds.w	r9, r9, r5
 8003c32:	eb4a 0a06 	adc.w	sl, sl, r6
 8003c36:	f04f 0100 	mov.w	r1, #0
 8003c3a:	f04f 0200 	mov.w	r2, #0
 8003c3e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c42:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003c46:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003c4a:	4689      	mov	r9, r1
 8003c4c:	4692      	mov	sl, r2
 8003c4e:	eb19 0005 	adds.w	r0, r9, r5
 8003c52:	eb4a 0106 	adc.w	r1, sl, r6
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	461d      	mov	r5, r3
 8003c5c:	f04f 0600 	mov.w	r6, #0
 8003c60:	196b      	adds	r3, r5, r5
 8003c62:	eb46 0406 	adc.w	r4, r6, r6
 8003c66:	461a      	mov	r2, r3
 8003c68:	4623      	mov	r3, r4
 8003c6a:	f7fc fab5 	bl	80001d8 <__aeabi_uldivmod>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	460c      	mov	r4, r1
 8003c72:	461a      	mov	r2, r3
 8003c74:	4b6a      	ldr	r3, [pc, #424]	; (8003e20 <UART_SetConfig+0x384>)
 8003c76:	fba3 1302 	umull	r1, r3, r3, r2
 8003c7a:	095b      	lsrs	r3, r3, #5
 8003c7c:	2164      	movs	r1, #100	; 0x64
 8003c7e:	fb01 f303 	mul.w	r3, r1, r3
 8003c82:	1ad3      	subs	r3, r2, r3
 8003c84:	00db      	lsls	r3, r3, #3
 8003c86:	3332      	adds	r3, #50	; 0x32
 8003c88:	4a65      	ldr	r2, [pc, #404]	; (8003e20 <UART_SetConfig+0x384>)
 8003c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c8e:	095b      	lsrs	r3, r3, #5
 8003c90:	f003 0207 	and.w	r2, r3, #7
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4442      	add	r2, r8
 8003c9a:	609a      	str	r2, [r3, #8]
 8003c9c:	e26f      	b.n	800417e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003c9e:	f7fe fadf 	bl	8002260 <HAL_RCC_GetPCLK1Freq>
 8003ca2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	461d      	mov	r5, r3
 8003ca8:	f04f 0600 	mov.w	r6, #0
 8003cac:	46a8      	mov	r8, r5
 8003cae:	46b1      	mov	r9, r6
 8003cb0:	eb18 0308 	adds.w	r3, r8, r8
 8003cb4:	eb49 0409 	adc.w	r4, r9, r9
 8003cb8:	4698      	mov	r8, r3
 8003cba:	46a1      	mov	r9, r4
 8003cbc:	eb18 0805 	adds.w	r8, r8, r5
 8003cc0:	eb49 0906 	adc.w	r9, r9, r6
 8003cc4:	f04f 0100 	mov.w	r1, #0
 8003cc8:	f04f 0200 	mov.w	r2, #0
 8003ccc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003cd0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003cd4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003cd8:	4688      	mov	r8, r1
 8003cda:	4691      	mov	r9, r2
 8003cdc:	eb18 0005 	adds.w	r0, r8, r5
 8003ce0:	eb49 0106 	adc.w	r1, r9, r6
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	461d      	mov	r5, r3
 8003cea:	f04f 0600 	mov.w	r6, #0
 8003cee:	196b      	adds	r3, r5, r5
 8003cf0:	eb46 0406 	adc.w	r4, r6, r6
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	4623      	mov	r3, r4
 8003cf8:	f7fc fa6e 	bl	80001d8 <__aeabi_uldivmod>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	460c      	mov	r4, r1
 8003d00:	461a      	mov	r2, r3
 8003d02:	4b47      	ldr	r3, [pc, #284]	; (8003e20 <UART_SetConfig+0x384>)
 8003d04:	fba3 2302 	umull	r2, r3, r3, r2
 8003d08:	095b      	lsrs	r3, r3, #5
 8003d0a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	461d      	mov	r5, r3
 8003d12:	f04f 0600 	mov.w	r6, #0
 8003d16:	46a9      	mov	r9, r5
 8003d18:	46b2      	mov	sl, r6
 8003d1a:	eb19 0309 	adds.w	r3, r9, r9
 8003d1e:	eb4a 040a 	adc.w	r4, sl, sl
 8003d22:	4699      	mov	r9, r3
 8003d24:	46a2      	mov	sl, r4
 8003d26:	eb19 0905 	adds.w	r9, r9, r5
 8003d2a:	eb4a 0a06 	adc.w	sl, sl, r6
 8003d2e:	f04f 0100 	mov.w	r1, #0
 8003d32:	f04f 0200 	mov.w	r2, #0
 8003d36:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d3a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003d3e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003d42:	4689      	mov	r9, r1
 8003d44:	4692      	mov	sl, r2
 8003d46:	eb19 0005 	adds.w	r0, r9, r5
 8003d4a:	eb4a 0106 	adc.w	r1, sl, r6
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	461d      	mov	r5, r3
 8003d54:	f04f 0600 	mov.w	r6, #0
 8003d58:	196b      	adds	r3, r5, r5
 8003d5a:	eb46 0406 	adc.w	r4, r6, r6
 8003d5e:	461a      	mov	r2, r3
 8003d60:	4623      	mov	r3, r4
 8003d62:	f7fc fa39 	bl	80001d8 <__aeabi_uldivmod>
 8003d66:	4603      	mov	r3, r0
 8003d68:	460c      	mov	r4, r1
 8003d6a:	461a      	mov	r2, r3
 8003d6c:	4b2c      	ldr	r3, [pc, #176]	; (8003e20 <UART_SetConfig+0x384>)
 8003d6e:	fba3 1302 	umull	r1, r3, r3, r2
 8003d72:	095b      	lsrs	r3, r3, #5
 8003d74:	2164      	movs	r1, #100	; 0x64
 8003d76:	fb01 f303 	mul.w	r3, r1, r3
 8003d7a:	1ad3      	subs	r3, r2, r3
 8003d7c:	00db      	lsls	r3, r3, #3
 8003d7e:	3332      	adds	r3, #50	; 0x32
 8003d80:	4a27      	ldr	r2, [pc, #156]	; (8003e20 <UART_SetConfig+0x384>)
 8003d82:	fba2 2303 	umull	r2, r3, r2, r3
 8003d86:	095b      	lsrs	r3, r3, #5
 8003d88:	005b      	lsls	r3, r3, #1
 8003d8a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003d8e:	4498      	add	r8, r3
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	461d      	mov	r5, r3
 8003d94:	f04f 0600 	mov.w	r6, #0
 8003d98:	46a9      	mov	r9, r5
 8003d9a:	46b2      	mov	sl, r6
 8003d9c:	eb19 0309 	adds.w	r3, r9, r9
 8003da0:	eb4a 040a 	adc.w	r4, sl, sl
 8003da4:	4699      	mov	r9, r3
 8003da6:	46a2      	mov	sl, r4
 8003da8:	eb19 0905 	adds.w	r9, r9, r5
 8003dac:	eb4a 0a06 	adc.w	sl, sl, r6
 8003db0:	f04f 0100 	mov.w	r1, #0
 8003db4:	f04f 0200 	mov.w	r2, #0
 8003db8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003dbc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003dc0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003dc4:	4689      	mov	r9, r1
 8003dc6:	4692      	mov	sl, r2
 8003dc8:	eb19 0005 	adds.w	r0, r9, r5
 8003dcc:	eb4a 0106 	adc.w	r1, sl, r6
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	461d      	mov	r5, r3
 8003dd6:	f04f 0600 	mov.w	r6, #0
 8003dda:	196b      	adds	r3, r5, r5
 8003ddc:	eb46 0406 	adc.w	r4, r6, r6
 8003de0:	461a      	mov	r2, r3
 8003de2:	4623      	mov	r3, r4
 8003de4:	f7fc f9f8 	bl	80001d8 <__aeabi_uldivmod>
 8003de8:	4603      	mov	r3, r0
 8003dea:	460c      	mov	r4, r1
 8003dec:	461a      	mov	r2, r3
 8003dee:	4b0c      	ldr	r3, [pc, #48]	; (8003e20 <UART_SetConfig+0x384>)
 8003df0:	fba3 1302 	umull	r1, r3, r3, r2
 8003df4:	095b      	lsrs	r3, r3, #5
 8003df6:	2164      	movs	r1, #100	; 0x64
 8003df8:	fb01 f303 	mul.w	r3, r1, r3
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	00db      	lsls	r3, r3, #3
 8003e00:	3332      	adds	r3, #50	; 0x32
 8003e02:	4a07      	ldr	r2, [pc, #28]	; (8003e20 <UART_SetConfig+0x384>)
 8003e04:	fba2 2303 	umull	r2, r3, r2, r3
 8003e08:	095b      	lsrs	r3, r3, #5
 8003e0a:	f003 0207 	and.w	r2, r3, #7
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4442      	add	r2, r8
 8003e14:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003e16:	e1b2      	b.n	800417e <UART_SetConfig+0x6e2>
 8003e18:	40011000 	.word	0x40011000
 8003e1c:	40011400 	.word	0x40011400
 8003e20:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4ad7      	ldr	r2, [pc, #860]	; (8004188 <UART_SetConfig+0x6ec>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d005      	beq.n	8003e3a <UART_SetConfig+0x39e>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4ad6      	ldr	r2, [pc, #856]	; (800418c <UART_SetConfig+0x6f0>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	f040 80d1 	bne.w	8003fdc <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003e3a:	f7fe fa25 	bl	8002288 <HAL_RCC_GetPCLK2Freq>
 8003e3e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	469a      	mov	sl, r3
 8003e44:	f04f 0b00 	mov.w	fp, #0
 8003e48:	46d0      	mov	r8, sl
 8003e4a:	46d9      	mov	r9, fp
 8003e4c:	eb18 0308 	adds.w	r3, r8, r8
 8003e50:	eb49 0409 	adc.w	r4, r9, r9
 8003e54:	4698      	mov	r8, r3
 8003e56:	46a1      	mov	r9, r4
 8003e58:	eb18 080a 	adds.w	r8, r8, sl
 8003e5c:	eb49 090b 	adc.w	r9, r9, fp
 8003e60:	f04f 0100 	mov.w	r1, #0
 8003e64:	f04f 0200 	mov.w	r2, #0
 8003e68:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003e6c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003e70:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003e74:	4688      	mov	r8, r1
 8003e76:	4691      	mov	r9, r2
 8003e78:	eb1a 0508 	adds.w	r5, sl, r8
 8003e7c:	eb4b 0609 	adc.w	r6, fp, r9
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	4619      	mov	r1, r3
 8003e86:	f04f 0200 	mov.w	r2, #0
 8003e8a:	f04f 0300 	mov.w	r3, #0
 8003e8e:	f04f 0400 	mov.w	r4, #0
 8003e92:	0094      	lsls	r4, r2, #2
 8003e94:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003e98:	008b      	lsls	r3, r1, #2
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	4623      	mov	r3, r4
 8003e9e:	4628      	mov	r0, r5
 8003ea0:	4631      	mov	r1, r6
 8003ea2:	f7fc f999 	bl	80001d8 <__aeabi_uldivmod>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	460c      	mov	r4, r1
 8003eaa:	461a      	mov	r2, r3
 8003eac:	4bb8      	ldr	r3, [pc, #736]	; (8004190 <UART_SetConfig+0x6f4>)
 8003eae:	fba3 2302 	umull	r2, r3, r3, r2
 8003eb2:	095b      	lsrs	r3, r3, #5
 8003eb4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	469b      	mov	fp, r3
 8003ebc:	f04f 0c00 	mov.w	ip, #0
 8003ec0:	46d9      	mov	r9, fp
 8003ec2:	46e2      	mov	sl, ip
 8003ec4:	eb19 0309 	adds.w	r3, r9, r9
 8003ec8:	eb4a 040a 	adc.w	r4, sl, sl
 8003ecc:	4699      	mov	r9, r3
 8003ece:	46a2      	mov	sl, r4
 8003ed0:	eb19 090b 	adds.w	r9, r9, fp
 8003ed4:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003ed8:	f04f 0100 	mov.w	r1, #0
 8003edc:	f04f 0200 	mov.w	r2, #0
 8003ee0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ee4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003ee8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003eec:	4689      	mov	r9, r1
 8003eee:	4692      	mov	sl, r2
 8003ef0:	eb1b 0509 	adds.w	r5, fp, r9
 8003ef4:	eb4c 060a 	adc.w	r6, ip, sl
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	4619      	mov	r1, r3
 8003efe:	f04f 0200 	mov.w	r2, #0
 8003f02:	f04f 0300 	mov.w	r3, #0
 8003f06:	f04f 0400 	mov.w	r4, #0
 8003f0a:	0094      	lsls	r4, r2, #2
 8003f0c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003f10:	008b      	lsls	r3, r1, #2
 8003f12:	461a      	mov	r2, r3
 8003f14:	4623      	mov	r3, r4
 8003f16:	4628      	mov	r0, r5
 8003f18:	4631      	mov	r1, r6
 8003f1a:	f7fc f95d 	bl	80001d8 <__aeabi_uldivmod>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	460c      	mov	r4, r1
 8003f22:	461a      	mov	r2, r3
 8003f24:	4b9a      	ldr	r3, [pc, #616]	; (8004190 <UART_SetConfig+0x6f4>)
 8003f26:	fba3 1302 	umull	r1, r3, r3, r2
 8003f2a:	095b      	lsrs	r3, r3, #5
 8003f2c:	2164      	movs	r1, #100	; 0x64
 8003f2e:	fb01 f303 	mul.w	r3, r1, r3
 8003f32:	1ad3      	subs	r3, r2, r3
 8003f34:	011b      	lsls	r3, r3, #4
 8003f36:	3332      	adds	r3, #50	; 0x32
 8003f38:	4a95      	ldr	r2, [pc, #596]	; (8004190 <UART_SetConfig+0x6f4>)
 8003f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f3e:	095b      	lsrs	r3, r3, #5
 8003f40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f44:	4498      	add	r8, r3
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	469b      	mov	fp, r3
 8003f4a:	f04f 0c00 	mov.w	ip, #0
 8003f4e:	46d9      	mov	r9, fp
 8003f50:	46e2      	mov	sl, ip
 8003f52:	eb19 0309 	adds.w	r3, r9, r9
 8003f56:	eb4a 040a 	adc.w	r4, sl, sl
 8003f5a:	4699      	mov	r9, r3
 8003f5c:	46a2      	mov	sl, r4
 8003f5e:	eb19 090b 	adds.w	r9, r9, fp
 8003f62:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003f66:	f04f 0100 	mov.w	r1, #0
 8003f6a:	f04f 0200 	mov.w	r2, #0
 8003f6e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f72:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003f76:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003f7a:	4689      	mov	r9, r1
 8003f7c:	4692      	mov	sl, r2
 8003f7e:	eb1b 0509 	adds.w	r5, fp, r9
 8003f82:	eb4c 060a 	adc.w	r6, ip, sl
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	4619      	mov	r1, r3
 8003f8c:	f04f 0200 	mov.w	r2, #0
 8003f90:	f04f 0300 	mov.w	r3, #0
 8003f94:	f04f 0400 	mov.w	r4, #0
 8003f98:	0094      	lsls	r4, r2, #2
 8003f9a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003f9e:	008b      	lsls	r3, r1, #2
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	4623      	mov	r3, r4
 8003fa4:	4628      	mov	r0, r5
 8003fa6:	4631      	mov	r1, r6
 8003fa8:	f7fc f916 	bl	80001d8 <__aeabi_uldivmod>
 8003fac:	4603      	mov	r3, r0
 8003fae:	460c      	mov	r4, r1
 8003fb0:	461a      	mov	r2, r3
 8003fb2:	4b77      	ldr	r3, [pc, #476]	; (8004190 <UART_SetConfig+0x6f4>)
 8003fb4:	fba3 1302 	umull	r1, r3, r3, r2
 8003fb8:	095b      	lsrs	r3, r3, #5
 8003fba:	2164      	movs	r1, #100	; 0x64
 8003fbc:	fb01 f303 	mul.w	r3, r1, r3
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	011b      	lsls	r3, r3, #4
 8003fc4:	3332      	adds	r3, #50	; 0x32
 8003fc6:	4a72      	ldr	r2, [pc, #456]	; (8004190 <UART_SetConfig+0x6f4>)
 8003fc8:	fba2 2303 	umull	r2, r3, r2, r3
 8003fcc:	095b      	lsrs	r3, r3, #5
 8003fce:	f003 020f 	and.w	r2, r3, #15
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4442      	add	r2, r8
 8003fd8:	609a      	str	r2, [r3, #8]
 8003fda:	e0d0      	b.n	800417e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003fdc:	f7fe f940 	bl	8002260 <HAL_RCC_GetPCLK1Freq>
 8003fe0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	469a      	mov	sl, r3
 8003fe6:	f04f 0b00 	mov.w	fp, #0
 8003fea:	46d0      	mov	r8, sl
 8003fec:	46d9      	mov	r9, fp
 8003fee:	eb18 0308 	adds.w	r3, r8, r8
 8003ff2:	eb49 0409 	adc.w	r4, r9, r9
 8003ff6:	4698      	mov	r8, r3
 8003ff8:	46a1      	mov	r9, r4
 8003ffa:	eb18 080a 	adds.w	r8, r8, sl
 8003ffe:	eb49 090b 	adc.w	r9, r9, fp
 8004002:	f04f 0100 	mov.w	r1, #0
 8004006:	f04f 0200 	mov.w	r2, #0
 800400a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800400e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004012:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004016:	4688      	mov	r8, r1
 8004018:	4691      	mov	r9, r2
 800401a:	eb1a 0508 	adds.w	r5, sl, r8
 800401e:	eb4b 0609 	adc.w	r6, fp, r9
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	4619      	mov	r1, r3
 8004028:	f04f 0200 	mov.w	r2, #0
 800402c:	f04f 0300 	mov.w	r3, #0
 8004030:	f04f 0400 	mov.w	r4, #0
 8004034:	0094      	lsls	r4, r2, #2
 8004036:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800403a:	008b      	lsls	r3, r1, #2
 800403c:	461a      	mov	r2, r3
 800403e:	4623      	mov	r3, r4
 8004040:	4628      	mov	r0, r5
 8004042:	4631      	mov	r1, r6
 8004044:	f7fc f8c8 	bl	80001d8 <__aeabi_uldivmod>
 8004048:	4603      	mov	r3, r0
 800404a:	460c      	mov	r4, r1
 800404c:	461a      	mov	r2, r3
 800404e:	4b50      	ldr	r3, [pc, #320]	; (8004190 <UART_SetConfig+0x6f4>)
 8004050:	fba3 2302 	umull	r2, r3, r3, r2
 8004054:	095b      	lsrs	r3, r3, #5
 8004056:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	469b      	mov	fp, r3
 800405e:	f04f 0c00 	mov.w	ip, #0
 8004062:	46d9      	mov	r9, fp
 8004064:	46e2      	mov	sl, ip
 8004066:	eb19 0309 	adds.w	r3, r9, r9
 800406a:	eb4a 040a 	adc.w	r4, sl, sl
 800406e:	4699      	mov	r9, r3
 8004070:	46a2      	mov	sl, r4
 8004072:	eb19 090b 	adds.w	r9, r9, fp
 8004076:	eb4a 0a0c 	adc.w	sl, sl, ip
 800407a:	f04f 0100 	mov.w	r1, #0
 800407e:	f04f 0200 	mov.w	r2, #0
 8004082:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004086:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800408a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800408e:	4689      	mov	r9, r1
 8004090:	4692      	mov	sl, r2
 8004092:	eb1b 0509 	adds.w	r5, fp, r9
 8004096:	eb4c 060a 	adc.w	r6, ip, sl
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	4619      	mov	r1, r3
 80040a0:	f04f 0200 	mov.w	r2, #0
 80040a4:	f04f 0300 	mov.w	r3, #0
 80040a8:	f04f 0400 	mov.w	r4, #0
 80040ac:	0094      	lsls	r4, r2, #2
 80040ae:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80040b2:	008b      	lsls	r3, r1, #2
 80040b4:	461a      	mov	r2, r3
 80040b6:	4623      	mov	r3, r4
 80040b8:	4628      	mov	r0, r5
 80040ba:	4631      	mov	r1, r6
 80040bc:	f7fc f88c 	bl	80001d8 <__aeabi_uldivmod>
 80040c0:	4603      	mov	r3, r0
 80040c2:	460c      	mov	r4, r1
 80040c4:	461a      	mov	r2, r3
 80040c6:	4b32      	ldr	r3, [pc, #200]	; (8004190 <UART_SetConfig+0x6f4>)
 80040c8:	fba3 1302 	umull	r1, r3, r3, r2
 80040cc:	095b      	lsrs	r3, r3, #5
 80040ce:	2164      	movs	r1, #100	; 0x64
 80040d0:	fb01 f303 	mul.w	r3, r1, r3
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	011b      	lsls	r3, r3, #4
 80040d8:	3332      	adds	r3, #50	; 0x32
 80040da:	4a2d      	ldr	r2, [pc, #180]	; (8004190 <UART_SetConfig+0x6f4>)
 80040dc:	fba2 2303 	umull	r2, r3, r2, r3
 80040e0:	095b      	lsrs	r3, r3, #5
 80040e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040e6:	4498      	add	r8, r3
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	469b      	mov	fp, r3
 80040ec:	f04f 0c00 	mov.w	ip, #0
 80040f0:	46d9      	mov	r9, fp
 80040f2:	46e2      	mov	sl, ip
 80040f4:	eb19 0309 	adds.w	r3, r9, r9
 80040f8:	eb4a 040a 	adc.w	r4, sl, sl
 80040fc:	4699      	mov	r9, r3
 80040fe:	46a2      	mov	sl, r4
 8004100:	eb19 090b 	adds.w	r9, r9, fp
 8004104:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004108:	f04f 0100 	mov.w	r1, #0
 800410c:	f04f 0200 	mov.w	r2, #0
 8004110:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004114:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004118:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800411c:	4689      	mov	r9, r1
 800411e:	4692      	mov	sl, r2
 8004120:	eb1b 0509 	adds.w	r5, fp, r9
 8004124:	eb4c 060a 	adc.w	r6, ip, sl
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	4619      	mov	r1, r3
 800412e:	f04f 0200 	mov.w	r2, #0
 8004132:	f04f 0300 	mov.w	r3, #0
 8004136:	f04f 0400 	mov.w	r4, #0
 800413a:	0094      	lsls	r4, r2, #2
 800413c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004140:	008b      	lsls	r3, r1, #2
 8004142:	461a      	mov	r2, r3
 8004144:	4623      	mov	r3, r4
 8004146:	4628      	mov	r0, r5
 8004148:	4631      	mov	r1, r6
 800414a:	f7fc f845 	bl	80001d8 <__aeabi_uldivmod>
 800414e:	4603      	mov	r3, r0
 8004150:	460c      	mov	r4, r1
 8004152:	461a      	mov	r2, r3
 8004154:	4b0e      	ldr	r3, [pc, #56]	; (8004190 <UART_SetConfig+0x6f4>)
 8004156:	fba3 1302 	umull	r1, r3, r3, r2
 800415a:	095b      	lsrs	r3, r3, #5
 800415c:	2164      	movs	r1, #100	; 0x64
 800415e:	fb01 f303 	mul.w	r3, r1, r3
 8004162:	1ad3      	subs	r3, r2, r3
 8004164:	011b      	lsls	r3, r3, #4
 8004166:	3332      	adds	r3, #50	; 0x32
 8004168:	4a09      	ldr	r2, [pc, #36]	; (8004190 <UART_SetConfig+0x6f4>)
 800416a:	fba2 2303 	umull	r2, r3, r2, r3
 800416e:	095b      	lsrs	r3, r3, #5
 8004170:	f003 020f 	and.w	r2, r3, #15
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4442      	add	r2, r8
 800417a:	609a      	str	r2, [r3, #8]
}
 800417c:	e7ff      	b.n	800417e <UART_SetConfig+0x6e2>
 800417e:	bf00      	nop
 8004180:	3714      	adds	r7, #20
 8004182:	46bd      	mov	sp, r7
 8004184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004188:	40011000 	.word	0x40011000
 800418c:	40011400 	.word	0x40011400
 8004190:	51eb851f 	.word	0x51eb851f

08004194 <__libc_init_array>:
 8004194:	b570      	push	{r4, r5, r6, lr}
 8004196:	4e0d      	ldr	r6, [pc, #52]	; (80041cc <__libc_init_array+0x38>)
 8004198:	4c0d      	ldr	r4, [pc, #52]	; (80041d0 <__libc_init_array+0x3c>)
 800419a:	1ba4      	subs	r4, r4, r6
 800419c:	10a4      	asrs	r4, r4, #2
 800419e:	2500      	movs	r5, #0
 80041a0:	42a5      	cmp	r5, r4
 80041a2:	d109      	bne.n	80041b8 <__libc_init_array+0x24>
 80041a4:	4e0b      	ldr	r6, [pc, #44]	; (80041d4 <__libc_init_array+0x40>)
 80041a6:	4c0c      	ldr	r4, [pc, #48]	; (80041d8 <__libc_init_array+0x44>)
 80041a8:	f000 f830 	bl	800420c <_init>
 80041ac:	1ba4      	subs	r4, r4, r6
 80041ae:	10a4      	asrs	r4, r4, #2
 80041b0:	2500      	movs	r5, #0
 80041b2:	42a5      	cmp	r5, r4
 80041b4:	d105      	bne.n	80041c2 <__libc_init_array+0x2e>
 80041b6:	bd70      	pop	{r4, r5, r6, pc}
 80041b8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80041bc:	4798      	blx	r3
 80041be:	3501      	adds	r5, #1
 80041c0:	e7ee      	b.n	80041a0 <__libc_init_array+0xc>
 80041c2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80041c6:	4798      	blx	r3
 80041c8:	3501      	adds	r5, #1
 80041ca:	e7f2      	b.n	80041b2 <__libc_init_array+0x1e>
 80041cc:	08004268 	.word	0x08004268
 80041d0:	08004268 	.word	0x08004268
 80041d4:	08004268 	.word	0x08004268
 80041d8:	0800426c 	.word	0x0800426c

080041dc <memset>:
 80041dc:	4402      	add	r2, r0
 80041de:	4603      	mov	r3, r0
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d100      	bne.n	80041e6 <memset+0xa>
 80041e4:	4770      	bx	lr
 80041e6:	f803 1b01 	strb.w	r1, [r3], #1
 80041ea:	e7f9      	b.n	80041e0 <memset+0x4>

080041ec <strcat>:
 80041ec:	b510      	push	{r4, lr}
 80041ee:	4603      	mov	r3, r0
 80041f0:	781a      	ldrb	r2, [r3, #0]
 80041f2:	1c5c      	adds	r4, r3, #1
 80041f4:	b93a      	cbnz	r2, 8004206 <strcat+0x1a>
 80041f6:	3b01      	subs	r3, #1
 80041f8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80041fc:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004200:	2a00      	cmp	r2, #0
 8004202:	d1f9      	bne.n	80041f8 <strcat+0xc>
 8004204:	bd10      	pop	{r4, pc}
 8004206:	4623      	mov	r3, r4
 8004208:	e7f2      	b.n	80041f0 <strcat+0x4>
	...

0800420c <_init>:
 800420c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800420e:	bf00      	nop
 8004210:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004212:	bc08      	pop	{r3}
 8004214:	469e      	mov	lr, r3
 8004216:	4770      	bx	lr

08004218 <_fini>:
 8004218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800421a:	bf00      	nop
 800421c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800421e:	bc08      	pop	{r3}
 8004220:	469e      	mov	lr, r3
 8004222:	4770      	bx	lr
